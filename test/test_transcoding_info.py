# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from embyapi.models.transcoding_info import TranscodingInfo

class TestTranscodingInfo(unittest.TestCase):
    """TranscodingInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TranscodingInfo:
        """Test TranscodingInfo
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TranscodingInfo`
        """
        model = TranscodingInfo()
        if include_optional:
            return TranscodingInfo(
                audio_codec = '',
                video_codec = '',
                sub_protocol = '',
                container = '',
                is_video_direct = True,
                is_audio_direct = True,
                bitrate = 56,
                audio_bitrate = 56,
                video_bitrate = 56,
                framerate = 1.337,
                completion_percentage = 1.337,
                transcoding_position_ticks = 1.337,
                transcoding_start_position_ticks = 1.337,
                width = 56,
                height = 56,
                audio_channels = 56,
                transcode_reasons = [
                    'ContainerNotSupported'
                    ],
                current_cpu_usage = 1.337,
                average_cpu_usage = 1.337,
                cpu_history = [
                    embyapi.models.tuple_double_double.Tuple_Double-Double(
                        item1 = 1.337, 
                        item2 = 1.337, )
                    ],
                process_statistics = embyapi.models.process_run/metrics/process_statistics.ProcessRun.Metrics.ProcessStatistics(
                    current_cpu = 1.337, 
                    average_cpu = 1.337, 
                    current_virtual_memory = 1.337, 
                    current_working_set = 1.337, 
                    metrics = [
                        embyapi.models.process_run/metrics/process_metric_point.ProcessRun.Metrics.ProcessMetricPoint(
                            time = '', 
                            cpu_percent = 1.337, 
                            virtual_memory = 1.337, 
                            working_set = 1.337, )
                        ], ),
                current_throttle = 56,
                video_decoder = '',
                video_decoder_is_hardware = True,
                video_decoder_media_type = '',
                video_decoder_hw_accel = '',
                video_encoder = '',
                video_encoder_is_hardware = True,
                video_encoder_media_type = '',
                video_encoder_hw_accel = '',
                video_pipeline_info = [
                    embyapi.models.transcoding/vp_step_info.Transcoding.VpStepInfo(
                        step_type = 'Decoder', 
                        step_type_name = '', 
                        hardware_context_name = '', 
                        is_hardware_context = True, 
                        name = '', 
                        short = '', 
                        ffmpeg_name = '', 
                        ffmpeg_description = '', 
                        ffmpeg_options = '', 
                        param = '', 
                        param_short = '', )
                    ],
                subtitle_pipeline_infos = [
                    [
                        embyapi.models.transcoding/vp_step_info.Transcoding.VpStepInfo(
                            step_type = 'Decoder', 
                            step_type_name = '', 
                            hardware_context_name = '', 
                            is_hardware_context = True, 
                            name = '', 
                            short = '', 
                            ffmpeg_name = '', 
                            ffmpeg_description = '', 
                            ffmpeg_options = '', 
                            param = '', 
                            param_short = '', )
                        ]
                    ]
            )
        else:
            return TranscodingInfo(
        )
        """

    def testTranscodingInfo(self):
        """Test TranscodingInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
