# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.access_schedule import AccessSchedule
from embyapi.models.unrated_item import UnratedItem
from typing import Optional, Set
from typing_extensions import Self

class UserPolicy(BaseModel):
    """
    UserPolicy
    """ # noqa: E501
    is_administrator: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is administrator.", alias="IsAdministrator")
    is_hidden: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is hidden.", alias="IsHidden")
    is_hidden_remotely: Optional[StrictBool] = Field(default=None, alias="IsHiddenRemotely")
    is_hidden_from_unused_devices: Optional[StrictBool] = Field(default=None, alias="IsHiddenFromUnusedDevices")
    is_disabled: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is disabled.", alias="IsDisabled")
    locked_out_date: Optional[StrictInt] = Field(default=None, alias="LockedOutDate")
    max_parental_rating: Optional[StrictInt] = Field(default=None, description="The max parental rating.", alias="MaxParentalRating")
    allow_tag_or_rating: Optional[StrictBool] = Field(default=None, alias="AllowTagOrRating")
    blocked_tags: Optional[List[StrictStr]] = Field(default=None, alias="BlockedTags")
    is_tag_blocking_mode_inclusive: Optional[StrictBool] = Field(default=None, alias="IsTagBlockingModeInclusive")
    include_tags: Optional[List[StrictStr]] = Field(default=None, alias="IncludeTags")
    enable_user_preference_access: Optional[StrictBool] = Field(default=None, alias="EnableUserPreferenceAccess")
    access_schedules: Optional[List[AccessSchedule]] = Field(default=None, alias="AccessSchedules")
    block_unrated_items: Optional[List[UnratedItem]] = Field(default=None, alias="BlockUnratedItems")
    enable_remote_control_of_other_users: Optional[StrictBool] = Field(default=None, alias="EnableRemoteControlOfOtherUsers")
    enable_shared_device_control: Optional[StrictBool] = Field(default=None, alias="EnableSharedDeviceControl")
    enable_remote_access: Optional[StrictBool] = Field(default=None, alias="EnableRemoteAccess")
    enable_live_tv_management: Optional[StrictBool] = Field(default=None, alias="EnableLiveTvManagement")
    enable_live_tv_access: Optional[StrictBool] = Field(default=None, alias="EnableLiveTvAccess")
    enable_media_playback: Optional[StrictBool] = Field(default=None, alias="EnableMediaPlayback")
    enable_audio_playback_transcoding: Optional[StrictBool] = Field(default=None, alias="EnableAudioPlaybackTranscoding")
    enable_video_playback_transcoding: Optional[StrictBool] = Field(default=None, alias="EnableVideoPlaybackTranscoding")
    enable_playback_remuxing: Optional[StrictBool] = Field(default=None, alias="EnablePlaybackRemuxing")
    enable_content_deletion: Optional[StrictBool] = Field(default=None, alias="EnableContentDeletion")
    restricted_features: Optional[List[StrictStr]] = Field(default=None, alias="RestrictedFeatures")
    enable_content_deletion_from_folders: Optional[List[StrictStr]] = Field(default=None, alias="EnableContentDeletionFromFolders")
    enable_content_downloading: Optional[StrictBool] = Field(default=None, alias="EnableContentDownloading")
    enable_subtitle_downloading: Optional[StrictBool] = Field(default=None, alias="EnableSubtitleDownloading")
    enable_subtitle_management: Optional[StrictBool] = Field(default=None, alias="EnableSubtitleManagement")
    enable_sync_transcoding: Optional[StrictBool] = Field(default=None, description="A value indicating whether \\[enable synchronize\\].", alias="EnableSyncTranscoding")
    enable_media_conversion: Optional[StrictBool] = Field(default=None, alias="EnableMediaConversion")
    enabled_channels: Optional[List[StrictStr]] = Field(default=None, alias="EnabledChannels")
    enable_all_channels: Optional[StrictBool] = Field(default=None, alias="EnableAllChannels")
    enabled_folders: Optional[List[StrictStr]] = Field(default=None, alias="EnabledFolders")
    enable_all_folders: Optional[StrictBool] = Field(default=None, alias="EnableAllFolders")
    invalid_login_attempt_count: Optional[StrictInt] = Field(default=None, alias="InvalidLoginAttemptCount")
    enable_public_sharing: Optional[StrictBool] = Field(default=None, alias="EnablePublicSharing")
    blocked_media_folders: Optional[List[StrictStr]] = Field(default=None, alias="BlockedMediaFolders")
    remote_client_bitrate_limit: Optional[StrictInt] = Field(default=None, alias="RemoteClientBitrateLimit")
    authentication_provider_id: Optional[StrictStr] = Field(default=None, alias="AuthenticationProviderId")
    excluded_sub_folders: Optional[List[StrictStr]] = Field(default=None, alias="ExcludedSubFolders")
    simultaneous_stream_limit: Optional[StrictInt] = Field(default=None, alias="SimultaneousStreamLimit")
    enabled_devices: Optional[List[StrictStr]] = Field(default=None, alias="EnabledDevices")
    enable_all_devices: Optional[StrictBool] = Field(default=None, alias="EnableAllDevices")
    allow_camera_upload: Optional[StrictBool] = Field(default=None, alias="AllowCameraUpload")
    allow_sharing_personal_items: Optional[StrictBool] = Field(default=None, alias="AllowSharingPersonalItems")
    __properties: ClassVar[List[str]] = ["IsAdministrator", "IsHidden", "IsHiddenRemotely", "IsHiddenFromUnusedDevices", "IsDisabled", "LockedOutDate", "MaxParentalRating", "AllowTagOrRating", "BlockedTags", "IsTagBlockingModeInclusive", "IncludeTags", "EnableUserPreferenceAccess", "AccessSchedules", "BlockUnratedItems", "EnableRemoteControlOfOtherUsers", "EnableSharedDeviceControl", "EnableRemoteAccess", "EnableLiveTvManagement", "EnableLiveTvAccess", "EnableMediaPlayback", "EnableAudioPlaybackTranscoding", "EnableVideoPlaybackTranscoding", "EnablePlaybackRemuxing", "EnableContentDeletion", "RestrictedFeatures", "EnableContentDeletionFromFolders", "EnableContentDownloading", "EnableSubtitleDownloading", "EnableSubtitleManagement", "EnableSyncTranscoding", "EnableMediaConversion", "EnabledChannels", "EnableAllChannels", "EnabledFolders", "EnableAllFolders", "InvalidLoginAttemptCount", "EnablePublicSharing", "BlockedMediaFolders", "RemoteClientBitrateLimit", "AuthenticationProviderId", "ExcludedSubFolders", "SimultaneousStreamLimit", "EnabledDevices", "EnableAllDevices", "AllowCameraUpload", "AllowSharingPersonalItems"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in access_schedules (list)
        _items = []
        if self.access_schedules:
            for _item in self.access_schedules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AccessSchedules'] = _items
        # set to None if max_parental_rating (nullable) is None
        # and model_fields_set contains the field
        if self.max_parental_rating is None and "max_parental_rating" in self.model_fields_set:
            _dict['MaxParentalRating'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "IsAdministrator": obj.get("IsAdministrator"),
            "IsHidden": obj.get("IsHidden"),
            "IsHiddenRemotely": obj.get("IsHiddenRemotely"),
            "IsHiddenFromUnusedDevices": obj.get("IsHiddenFromUnusedDevices"),
            "IsDisabled": obj.get("IsDisabled"),
            "LockedOutDate": obj.get("LockedOutDate"),
            "MaxParentalRating": obj.get("MaxParentalRating"),
            "AllowTagOrRating": obj.get("AllowTagOrRating"),
            "BlockedTags": obj.get("BlockedTags"),
            "IsTagBlockingModeInclusive": obj.get("IsTagBlockingModeInclusive"),
            "IncludeTags": obj.get("IncludeTags"),
            "EnableUserPreferenceAccess": obj.get("EnableUserPreferenceAccess"),
            "AccessSchedules": [AccessSchedule.from_dict(_item) for _item in obj["AccessSchedules"]] if obj.get("AccessSchedules") is not None else None,
            "BlockUnratedItems": obj.get("BlockUnratedItems"),
            "EnableRemoteControlOfOtherUsers": obj.get("EnableRemoteControlOfOtherUsers"),
            "EnableSharedDeviceControl": obj.get("EnableSharedDeviceControl"),
            "EnableRemoteAccess": obj.get("EnableRemoteAccess"),
            "EnableLiveTvManagement": obj.get("EnableLiveTvManagement"),
            "EnableLiveTvAccess": obj.get("EnableLiveTvAccess"),
            "EnableMediaPlayback": obj.get("EnableMediaPlayback"),
            "EnableAudioPlaybackTranscoding": obj.get("EnableAudioPlaybackTranscoding"),
            "EnableVideoPlaybackTranscoding": obj.get("EnableVideoPlaybackTranscoding"),
            "EnablePlaybackRemuxing": obj.get("EnablePlaybackRemuxing"),
            "EnableContentDeletion": obj.get("EnableContentDeletion"),
            "RestrictedFeatures": obj.get("RestrictedFeatures"),
            "EnableContentDeletionFromFolders": obj.get("EnableContentDeletionFromFolders"),
            "EnableContentDownloading": obj.get("EnableContentDownloading"),
            "EnableSubtitleDownloading": obj.get("EnableSubtitleDownloading"),
            "EnableSubtitleManagement": obj.get("EnableSubtitleManagement"),
            "EnableSyncTranscoding": obj.get("EnableSyncTranscoding"),
            "EnableMediaConversion": obj.get("EnableMediaConversion"),
            "EnabledChannels": obj.get("EnabledChannels"),
            "EnableAllChannels": obj.get("EnableAllChannels"),
            "EnabledFolders": obj.get("EnabledFolders"),
            "EnableAllFolders": obj.get("EnableAllFolders"),
            "InvalidLoginAttemptCount": obj.get("InvalidLoginAttemptCount"),
            "EnablePublicSharing": obj.get("EnablePublicSharing"),
            "BlockedMediaFolders": obj.get("BlockedMediaFolders"),
            "RemoteClientBitrateLimit": obj.get("RemoteClientBitrateLimit"),
            "AuthenticationProviderId": obj.get("AuthenticationProviderId"),
            "ExcludedSubFolders": obj.get("ExcludedSubFolders"),
            "SimultaneousStreamLimit": obj.get("SimultaneousStreamLimit"),
            "EnabledDevices": obj.get("EnabledDevices"),
            "EnableAllDevices": obj.get("EnableAllDevices"),
            "AllowCameraUpload": obj.get("AllowCameraUpload"),
            "AllowSharingPersonalItems": obj.get("AllowSharingPersonalItems")
        })
        return _obj


