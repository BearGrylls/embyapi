# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.day_of_week import DayOfWeek
from embyapi.models.live_tv_keep_until import LiveTvKeepUntil
from embyapi.models.live_tv_keyword_info import LiveTvKeywordInfo
from embyapi.models.live_tv_timer_type import LiveTvTimerType
from typing import Optional, Set
from typing_extensions import Self

class LiveTvSeriesTimerInfoDto(BaseModel):
    """
    Class SeriesTimerInfoDto.  
    """ # noqa: E501
    record_any_time: Optional[StrictBool] = Field(default=None, description="A value indicating whether \\[record any time\\].", alias="RecordAnyTime")
    skip_episodes_in_library: Optional[StrictBool] = Field(default=None, alias="SkipEpisodesInLibrary")
    match_existing_items_with_any_library: Optional[StrictBool] = Field(default=None, alias="MatchExistingItemsWithAnyLibrary")
    record_any_channel: Optional[StrictBool] = Field(default=None, description="A value indicating whether \\[record any channel\\].", alias="RecordAnyChannel")
    keep_up_to: Optional[StrictInt] = Field(default=None, alias="KeepUpTo")
    max_recording_seconds: Optional[StrictInt] = Field(default=None, alias="MaxRecordingSeconds")
    record_new_only: Optional[StrictBool] = Field(default=None, description="A value indicating whether \\[record new only\\].", alias="RecordNewOnly")
    channel_ids: Optional[List[StrictStr]] = Field(default=None, alias="ChannelIds")
    days: Optional[List[DayOfWeek]] = Field(default=None, description="The days.", alias="Days")
    image_tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="The image tags.", alias="ImageTags")
    parent_thumb_item_id: Optional[StrictStr] = Field(default=None, description="The parent thumb item id.", alias="ParentThumbItemId")
    parent_thumb_image_tag: Optional[StrictStr] = Field(default=None, description="The parent thumb image tag.", alias="ParentThumbImageTag")
    parent_primary_image_item_id: Optional[StrictStr] = Field(default=None, description="The parent primary image item identifier.", alias="ParentPrimaryImageItemId")
    parent_primary_image_tag: Optional[StrictStr] = Field(default=None, description="The parent primary image tag.", alias="ParentPrimaryImageTag")
    series_id: Optional[StrictStr] = Field(default=None, alias="SeriesId")
    keywords: Optional[List[LiveTvKeywordInfo]] = Field(default=None, alias="Keywords")
    timer_type: Optional[LiveTvTimerType] = Field(default=None, alias="TimerType")
    id: Optional[StrictStr] = Field(default=None, description="Id of the recording.", alias="Id")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    server_id: Optional[StrictStr] = Field(default=None, description="The server identifier.", alias="ServerId")
    channel_id: Optional[StrictStr] = Field(default=None, description="ChannelId of the recording.", alias="ChannelId")
    channel_name: Optional[StrictStr] = Field(default=None, description="ChannelName of the recording.", alias="ChannelName")
    channel_number: Optional[StrictStr] = Field(default=None, alias="ChannelNumber")
    channel_primary_image_tag: Optional[StrictStr] = Field(default=None, alias="ChannelPrimaryImageTag")
    program_id: Optional[StrictStr] = Field(default=None, description="The program identifier.", alias="ProgramId")
    name: Optional[StrictStr] = Field(default=None, description="Name of the recording.", alias="Name")
    overview: Optional[StrictStr] = Field(default=None, description="Description of the recording.", alias="Overview")
    parent_folder_id: Optional[StrictStr] = Field(default=None, alias="ParentFolderId")
    start_date: Optional[datetime] = Field(default=None, description="The start date of the recording, in UTC.", alias="StartDate")
    end_date: Optional[datetime] = Field(default=None, description="The end date of the recording, in UTC.", alias="EndDate")
    priority: Optional[StrictInt] = Field(default=None, description="The priority.", alias="Priority")
    pre_padding_seconds: Optional[StrictInt] = Field(default=None, description="The pre padding seconds.", alias="PrePaddingSeconds")
    post_padding_seconds: Optional[StrictInt] = Field(default=None, description="The post padding seconds.", alias="PostPaddingSeconds")
    is_pre_padding_required: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is pre padding required.", alias="IsPrePaddingRequired")
    parent_backdrop_item_id: Optional[StrictStr] = Field(default=None, description="If the item does not have any backdrops, this will hold the Id of the Parent that has one.", alias="ParentBackdropItemId")
    parent_backdrop_image_tags: Optional[List[StrictStr]] = Field(default=None, description="The parent backdrop image tags.", alias="ParentBackdropImageTags")
    is_post_padding_required: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is post padding required.", alias="IsPostPaddingRequired")
    keep_until: Optional[LiveTvKeepUntil] = Field(default=None, alias="KeepUntil")
    __properties: ClassVar[List[str]] = ["RecordAnyTime", "SkipEpisodesInLibrary", "MatchExistingItemsWithAnyLibrary", "RecordAnyChannel", "KeepUpTo", "MaxRecordingSeconds", "RecordNewOnly", "ChannelIds", "Days", "ImageTags", "ParentThumbItemId", "ParentThumbImageTag", "ParentPrimaryImageItemId", "ParentPrimaryImageTag", "SeriesId", "Keywords", "TimerType", "Id", "Type", "ServerId", "ChannelId", "ChannelName", "ChannelNumber", "ChannelPrimaryImageTag", "ProgramId", "Name", "Overview", "ParentFolderId", "StartDate", "EndDate", "Priority", "PrePaddingSeconds", "PostPaddingSeconds", "IsPrePaddingRequired", "ParentBackdropItemId", "ParentBackdropImageTags", "IsPostPaddingRequired", "KeepUntil"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiveTvSeriesTimerInfoDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in keywords (list)
        _items = []
        if self.keywords:
            for _item in self.keywords:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Keywords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiveTvSeriesTimerInfoDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "RecordAnyTime": obj.get("RecordAnyTime"),
            "SkipEpisodesInLibrary": obj.get("SkipEpisodesInLibrary"),
            "MatchExistingItemsWithAnyLibrary": obj.get("MatchExistingItemsWithAnyLibrary"),
            "RecordAnyChannel": obj.get("RecordAnyChannel"),
            "KeepUpTo": obj.get("KeepUpTo"),
            "MaxRecordingSeconds": obj.get("MaxRecordingSeconds"),
            "RecordNewOnly": obj.get("RecordNewOnly"),
            "ChannelIds": obj.get("ChannelIds"),
            "Days": obj.get("Days"),
            "ImageTags": obj.get("ImageTags"),
            "ParentThumbItemId": obj.get("ParentThumbItemId"),
            "ParentThumbImageTag": obj.get("ParentThumbImageTag"),
            "ParentPrimaryImageItemId": obj.get("ParentPrimaryImageItemId"),
            "ParentPrimaryImageTag": obj.get("ParentPrimaryImageTag"),
            "SeriesId": obj.get("SeriesId"),
            "Keywords": [LiveTvKeywordInfo.from_dict(_item) for _item in obj["Keywords"]] if obj.get("Keywords") is not None else None,
            "TimerType": obj.get("TimerType"),
            "Id": obj.get("Id"),
            "Type": obj.get("Type"),
            "ServerId": obj.get("ServerId"),
            "ChannelId": obj.get("ChannelId"),
            "ChannelName": obj.get("ChannelName"),
            "ChannelNumber": obj.get("ChannelNumber"),
            "ChannelPrimaryImageTag": obj.get("ChannelPrimaryImageTag"),
            "ProgramId": obj.get("ProgramId"),
            "Name": obj.get("Name"),
            "Overview": obj.get("Overview"),
            "ParentFolderId": obj.get("ParentFolderId"),
            "StartDate": obj.get("StartDate"),
            "EndDate": obj.get("EndDate"),
            "Priority": obj.get("Priority"),
            "PrePaddingSeconds": obj.get("PrePaddingSeconds"),
            "PostPaddingSeconds": obj.get("PostPaddingSeconds"),
            "IsPrePaddingRequired": obj.get("IsPrePaddingRequired"),
            "ParentBackdropItemId": obj.get("ParentBackdropItemId"),
            "ParentBackdropImageTags": obj.get("ParentBackdropImageTags"),
            "IsPostPaddingRequired": obj.get("IsPostPaddingRequired"),
            "KeepUntil": obj.get("KeepUntil")
        })
        return _obj


