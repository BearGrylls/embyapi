# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.transcoding_vp_step_types import TranscodingVpStepTypes
from typing import Optional, Set
from typing_extensions import Self

class TranscodingVpStepInfo(BaseModel):
    """
    TranscodingVpStepInfo
    """ # noqa: E501
    step_type: Optional[TranscodingVpStepTypes] = Field(default=None, alias="StepType")
    step_type_name: Optional[StrictStr] = Field(default=None, alias="StepTypeName")
    hardware_context_name: Optional[StrictStr] = Field(default=None, alias="HardwareContextName")
    is_hardware_context: Optional[StrictBool] = Field(default=None, alias="IsHardwareContext")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    short: Optional[StrictStr] = Field(default=None, alias="Short")
    ffmpeg_name: Optional[StrictStr] = Field(default=None, alias="FfmpegName")
    ffmpeg_description: Optional[StrictStr] = Field(default=None, alias="FfmpegDescription")
    ffmpeg_options: Optional[StrictStr] = Field(default=None, alias="FfmpegOptions")
    param: Optional[StrictStr] = Field(default=None, alias="Param")
    param_short: Optional[StrictStr] = Field(default=None, alias="ParamShort")
    __properties: ClassVar[List[str]] = ["StepType", "StepTypeName", "HardwareContextName", "IsHardwareContext", "Name", "Short", "FfmpegName", "FfmpegDescription", "FfmpegOptions", "Param", "ParamShort"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranscodingVpStepInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranscodingVpStepInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "StepType": obj.get("StepType"),
            "StepTypeName": obj.get("StepTypeName"),
            "HardwareContextName": obj.get("HardwareContextName"),
            "IsHardwareContext": obj.get("IsHardwareContext"),
            "Name": obj.get("Name"),
            "Short": obj.get("Short"),
            "FfmpegName": obj.get("FfmpegName"),
            "FfmpegDescription": obj.get("FfmpegDescription"),
            "FfmpegOptions": obj.get("FfmpegOptions"),
            "Param": obj.get("Param"),
            "ParamShort": obj.get("ParamShort")
        })
        return _obj


