# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from embyapi.models.item_file_info import ItemFileInfo
from embyapi.models.media_source_info import MediaSourceInfo
from embyapi.models.sync_job_item_status import SyncJobItemStatus
from typing import Optional, Set
from typing_extensions import Self

class SyncJobItem(BaseModel):
    """
    SyncJobItem
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, alias="Id")
    job_id: Optional[StrictInt] = Field(default=None, alias="JobId")
    item_id: Optional[StrictInt] = Field(default=None, alias="ItemId")
    item_name: Optional[StrictStr] = Field(default=None, alias="ItemName")
    media_source_id: Optional[StrictStr] = Field(default=None, alias="MediaSourceId")
    media_source: Optional[MediaSourceInfo] = Field(default=None, alias="MediaSource")
    target_id: Optional[StrictStr] = Field(default=None, alias="TargetId")
    internal_target_id: Optional[StrictInt] = Field(default=None, alias="InternalTargetId")
    output_path: Optional[StrictStr] = Field(default=None, alias="OutputPath")
    status: Optional[SyncJobItemStatus] = Field(default=None, alias="Status")
    progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Progress")
    date_created: Optional[datetime] = Field(default=None, alias="DateCreated")
    primary_image_item_id: Optional[StrictStr] = Field(default=None, alias="PrimaryImageItemId")
    primary_image_tag: Optional[StrictStr] = Field(default=None, alias="PrimaryImageTag")
    temporary_path: Optional[StrictStr] = Field(default=None, alias="TemporaryPath")
    additional_files: Optional[List[ItemFileInfo]] = Field(default=None, alias="AdditionalFiles")
    __properties: ClassVar[List[str]] = ["Id", "JobId", "ItemId", "ItemName", "MediaSourceId", "MediaSource", "TargetId", "InternalTargetId", "OutputPath", "Status", "Progress", "DateCreated", "PrimaryImageItemId", "PrimaryImageTag", "TemporaryPath", "AdditionalFiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SyncJobItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of media_source
        if self.media_source:
            _dict['MediaSource'] = self.media_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in additional_files (list)
        _items = []
        if self.additional_files:
            for _item in self.additional_files:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AdditionalFiles'] = _items
        # set to None if progress (nullable) is None
        # and model_fields_set contains the field
        if self.progress is None and "progress" in self.model_fields_set:
            _dict['Progress'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SyncJobItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id"),
            "JobId": obj.get("JobId"),
            "ItemId": obj.get("ItemId"),
            "ItemName": obj.get("ItemName"),
            "MediaSourceId": obj.get("MediaSourceId"),
            "MediaSource": MediaSourceInfo.from_dict(obj["MediaSource"]) if obj.get("MediaSource") is not None else None,
            "TargetId": obj.get("TargetId"),
            "InternalTargetId": obj.get("InternalTargetId"),
            "OutputPath": obj.get("OutputPath"),
            "Status": obj.get("Status"),
            "Progress": obj.get("Progress"),
            "DateCreated": obj.get("DateCreated"),
            "PrimaryImageItemId": obj.get("PrimaryImageItemId"),
            "PrimaryImageTag": obj.get("PrimaryImageTag"),
            "TemporaryPath": obj.get("TemporaryPath"),
            "AdditionalFiles": [ItemFileInfo.from_dict(_item) for _item in obj["AdditionalFiles"]] if obj.get("AdditionalFiles") is not None else None
        })
        return _obj


