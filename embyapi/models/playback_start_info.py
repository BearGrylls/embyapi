# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from embyapi.models.base_item_dto import BaseItemDto
from embyapi.models.play_method import PlayMethod
from embyapi.models.progress_event import ProgressEvent
from embyapi.models.queue_item import QueueItem
from embyapi.models.repeat_mode import RepeatMode
from typing import Optional, Set
from typing_extensions import Self

class PlaybackStartInfo(BaseModel):
    """
    Class PlaybackStartInfo.  
    """ # noqa: E501
    can_seek: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance can seek.", alias="CanSeek")
    item: Optional[BaseItemDto] = Field(default=None, alias="Item")
    now_playing_queue: Optional[List[QueueItem]] = Field(default=None, alias="NowPlayingQueue")
    playlist_item_id: Optional[StrictStr] = Field(default=None, alias="PlaylistItemId")
    item_id: Optional[StrictStr] = Field(default=None, description="The item identifier.", alias="ItemId")
    session_id: Optional[StrictStr] = Field(default=None, description="The session id.", alias="SessionId")
    media_source_id: Optional[StrictStr] = Field(default=None, description="The media version identifier.", alias="MediaSourceId")
    audio_stream_index: Optional[StrictInt] = Field(default=None, description="The index of the audio stream.", alias="AudioStreamIndex")
    subtitle_stream_index: Optional[StrictInt] = Field(default=None, description="The index of the subtitle stream.", alias="SubtitleStreamIndex")
    is_paused: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is paused.", alias="IsPaused")
    playlist_index: Optional[StrictInt] = Field(default=None, alias="PlaylistIndex")
    playlist_length: Optional[StrictInt] = Field(default=None, alias="PlaylistLength")
    is_muted: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is muted.", alias="IsMuted")
    position_ticks: Optional[StrictInt] = Field(default=None, description="The position ticks.", alias="PositionTicks")
    run_time_ticks: Optional[StrictInt] = Field(default=None, alias="RunTimeTicks")
    playback_start_time_ticks: Optional[StrictInt] = Field(default=None, alias="PlaybackStartTimeTicks")
    volume_level: Optional[StrictInt] = Field(default=None, description="The volume level.", alias="VolumeLevel")
    brightness: Optional[StrictInt] = Field(default=None, alias="Brightness")
    aspect_ratio: Optional[StrictStr] = Field(default=None, alias="AspectRatio")
    event_name: Optional[ProgressEvent] = Field(default=None, alias="EventName")
    play_method: Optional[PlayMethod] = Field(default=None, alias="PlayMethod")
    live_stream_id: Optional[StrictStr] = Field(default=None, description="The live stream identifier.", alias="LiveStreamId")
    play_session_id: Optional[StrictStr] = Field(default=None, description="The play session identifier.", alias="PlaySessionId")
    repeat_mode: Optional[RepeatMode] = Field(default=None, alias="RepeatMode")
    subtitle_offset: Optional[StrictInt] = Field(default=None, alias="SubtitleOffset")
    playback_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PlaybackRate")
    playlist_item_ids: Optional[List[StrictStr]] = Field(default=None, alias="PlaylistItemIds")
    __properties: ClassVar[List[str]] = ["CanSeek", "Item", "NowPlayingQueue", "PlaylistItemId", "ItemId", "SessionId", "MediaSourceId", "AudioStreamIndex", "SubtitleStreamIndex", "IsPaused", "PlaylistIndex", "PlaylistLength", "IsMuted", "PositionTicks", "RunTimeTicks", "PlaybackStartTimeTicks", "VolumeLevel", "Brightness", "AspectRatio", "EventName", "PlayMethod", "LiveStreamId", "PlaySessionId", "RepeatMode", "SubtitleOffset", "PlaybackRate", "PlaylistItemIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlaybackStartInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of item
        if self.item:
            _dict['Item'] = self.item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in now_playing_queue (list)
        _items = []
        if self.now_playing_queue:
            for _item in self.now_playing_queue:
                if _item:
                    _items.append(_item.to_dict())
            _dict['NowPlayingQueue'] = _items
        # set to None if audio_stream_index (nullable) is None
        # and model_fields_set contains the field
        if self.audio_stream_index is None and "audio_stream_index" in self.model_fields_set:
            _dict['AudioStreamIndex'] = None

        # set to None if subtitle_stream_index (nullable) is None
        # and model_fields_set contains the field
        if self.subtitle_stream_index is None and "subtitle_stream_index" in self.model_fields_set:
            _dict['SubtitleStreamIndex'] = None

        # set to None if position_ticks (nullable) is None
        # and model_fields_set contains the field
        if self.position_ticks is None and "position_ticks" in self.model_fields_set:
            _dict['PositionTicks'] = None

        # set to None if run_time_ticks (nullable) is None
        # and model_fields_set contains the field
        if self.run_time_ticks is None and "run_time_ticks" in self.model_fields_set:
            _dict['RunTimeTicks'] = None

        # set to None if playback_start_time_ticks (nullable) is None
        # and model_fields_set contains the field
        if self.playback_start_time_ticks is None and "playback_start_time_ticks" in self.model_fields_set:
            _dict['PlaybackStartTimeTicks'] = None

        # set to None if volume_level (nullable) is None
        # and model_fields_set contains the field
        if self.volume_level is None and "volume_level" in self.model_fields_set:
            _dict['VolumeLevel'] = None

        # set to None if brightness (nullable) is None
        # and model_fields_set contains the field
        if self.brightness is None and "brightness" in self.model_fields_set:
            _dict['Brightness'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlaybackStartInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CanSeek": obj.get("CanSeek"),
            "Item": BaseItemDto.from_dict(obj["Item"]) if obj.get("Item") is not None else None,
            "NowPlayingQueue": [QueueItem.from_dict(_item) for _item in obj["NowPlayingQueue"]] if obj.get("NowPlayingQueue") is not None else None,
            "PlaylistItemId": obj.get("PlaylistItemId"),
            "ItemId": obj.get("ItemId"),
            "SessionId": obj.get("SessionId"),
            "MediaSourceId": obj.get("MediaSourceId"),
            "AudioStreamIndex": obj.get("AudioStreamIndex"),
            "SubtitleStreamIndex": obj.get("SubtitleStreamIndex"),
            "IsPaused": obj.get("IsPaused"),
            "PlaylistIndex": obj.get("PlaylistIndex"),
            "PlaylistLength": obj.get("PlaylistLength"),
            "IsMuted": obj.get("IsMuted"),
            "PositionTicks": obj.get("PositionTicks"),
            "RunTimeTicks": obj.get("RunTimeTicks"),
            "PlaybackStartTimeTicks": obj.get("PlaybackStartTimeTicks"),
            "VolumeLevel": obj.get("VolumeLevel"),
            "Brightness": obj.get("Brightness"),
            "AspectRatio": obj.get("AspectRatio"),
            "EventName": obj.get("EventName"),
            "PlayMethod": obj.get("PlayMethod"),
            "LiveStreamId": obj.get("LiveStreamId"),
            "PlaySessionId": obj.get("PlaySessionId"),
            "RepeatMode": obj.get("RepeatMode"),
            "SubtitleOffset": obj.get("SubtitleOffset"),
            "PlaybackRate": obj.get("PlaybackRate"),
            "PlaylistItemIds": obj.get("PlaylistItemIds")
        })
        return _obj


