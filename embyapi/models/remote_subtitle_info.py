# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class RemoteSubtitleInfo(BaseModel):
    """
    RemoteSubtitleInfo
    """ # noqa: E501
    three_letter_iso_language_name: Optional[StrictStr] = Field(default=None, description="Use language instead to return the language specified by the subtitle provider", alias="ThreeLetterISOLanguageName")
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    provider_name: Optional[StrictStr] = Field(default=None, alias="ProviderName")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    format: Optional[StrictStr] = Field(default=None, alias="Format")
    author: Optional[StrictStr] = Field(default=None, alias="Author")
    comment: Optional[StrictStr] = Field(default=None, alias="Comment")
    date_created: Optional[datetime] = Field(default=None, alias="DateCreated")
    community_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="CommunityRating")
    download_count: Optional[StrictInt] = Field(default=None, alias="DownloadCount")
    is_hash_match: Optional[StrictBool] = Field(default=None, alias="IsHashMatch")
    is_forced: Optional[StrictBool] = Field(default=None, alias="IsForced")
    is_hearing_impaired: Optional[StrictBool] = Field(default=None, alias="IsHearingImpaired")
    language: Optional[StrictStr] = Field(default=None, alias="Language")
    __properties: ClassVar[List[str]] = ["ThreeLetterISOLanguageName", "Id", "ProviderName", "Name", "Format", "Author", "Comment", "DateCreated", "CommunityRating", "DownloadCount", "IsHashMatch", "IsForced", "IsHearingImpaired", "Language"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RemoteSubtitleInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if date_created (nullable) is None
        # and model_fields_set contains the field
        if self.date_created is None and "date_created" in self.model_fields_set:
            _dict['DateCreated'] = None

        # set to None if community_rating (nullable) is None
        # and model_fields_set contains the field
        if self.community_rating is None and "community_rating" in self.model_fields_set:
            _dict['CommunityRating'] = None

        # set to None if download_count (nullable) is None
        # and model_fields_set contains the field
        if self.download_count is None and "download_count" in self.model_fields_set:
            _dict['DownloadCount'] = None

        # set to None if is_hash_match (nullable) is None
        # and model_fields_set contains the field
        if self.is_hash_match is None and "is_hash_match" in self.model_fields_set:
            _dict['IsHashMatch'] = None

        # set to None if is_forced (nullable) is None
        # and model_fields_set contains the field
        if self.is_forced is None and "is_forced" in self.model_fields_set:
            _dict['IsForced'] = None

        # set to None if is_hearing_impaired (nullable) is None
        # and model_fields_set contains the field
        if self.is_hearing_impaired is None and "is_hearing_impaired" in self.model_fields_set:
            _dict['IsHearingImpaired'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RemoteSubtitleInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ThreeLetterISOLanguageName": obj.get("ThreeLetterISOLanguageName"),
            "Id": obj.get("Id"),
            "ProviderName": obj.get("ProviderName"),
            "Name": obj.get("Name"),
            "Format": obj.get("Format"),
            "Author": obj.get("Author"),
            "Comment": obj.get("Comment"),
            "DateCreated": obj.get("DateCreated"),
            "CommunityRating": obj.get("CommunityRating"),
            "DownloadCount": obj.get("DownloadCount"),
            "IsHashMatch": obj.get("IsHashMatch"),
            "IsForced": obj.get("IsForced"),
            "IsHearingImpaired": obj.get("IsHearingImpaired"),
            "Language": obj.get("Language")
        })
        return _obj


