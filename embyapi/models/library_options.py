# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.media_path_info import MediaPathInfo
from embyapi.models.type_options import TypeOptions
from typing import Optional, Set
from typing_extensions import Self

class LibraryOptions(BaseModel):
    """
    LibraryOptions
    """ # noqa: E501
    enable_archive_media_files: Optional[StrictBool] = Field(default=None, alias="EnableArchiveMediaFiles")
    enable_photos: Optional[StrictBool] = Field(default=None, alias="EnablePhotos")
    enable_realtime_monitor: Optional[StrictBool] = Field(default=None, alias="EnableRealtimeMonitor")
    enable_marker_detection: Optional[StrictBool] = Field(default=None, alias="EnableMarkerDetection")
    enable_marker_detection_during_library_scan: Optional[StrictBool] = Field(default=None, alias="EnableMarkerDetectionDuringLibraryScan")
    intro_detection_fingerprint_length: Optional[StrictInt] = Field(default=None, alias="IntroDetectionFingerprintLength")
    enable_chapter_image_extraction: Optional[StrictBool] = Field(default=None, alias="EnableChapterImageExtraction")
    extract_chapter_images_during_library_scan: Optional[StrictBool] = Field(default=None, alias="ExtractChapterImagesDuringLibraryScan")
    download_images_in_advance: Optional[StrictBool] = Field(default=None, alias="DownloadImagesInAdvance")
    cache_images: Optional[StrictBool] = Field(default=None, alias="CacheImages")
    path_infos: Optional[List[MediaPathInfo]] = Field(default=None, alias="PathInfos")
    ignore_hidden_files: Optional[StrictBool] = Field(default=None, alias="IgnoreHiddenFiles")
    ignore_file_extensions: Optional[List[StrictStr]] = Field(default=None, alias="IgnoreFileExtensions")
    save_local_metadata: Optional[StrictBool] = Field(default=None, alias="SaveLocalMetadata")
    save_metadata_hidden: Optional[StrictBool] = Field(default=None, alias="SaveMetadataHidden")
    save_local_thumbnail_sets: Optional[StrictBool] = Field(default=None, alias="SaveLocalThumbnailSets")
    import_playlists: Optional[StrictBool] = Field(default=None, alias="ImportPlaylists")
    enable_automatic_series_grouping: Optional[StrictBool] = Field(default=None, alias="EnableAutomaticSeriesGrouping")
    share_embedded_music_album_images: Optional[StrictBool] = Field(default=None, alias="ShareEmbeddedMusicAlbumImages")
    enable_embedded_titles: Optional[StrictBool] = Field(default=None, alias="EnableEmbeddedTitles")
    enable_audio_resume: Optional[StrictBool] = Field(default=None, alias="EnableAudioResume")
    auto_generate_chapters: Optional[StrictBool] = Field(default=None, alias="AutoGenerateChapters")
    automatic_refresh_interval_days: Optional[StrictInt] = Field(default=None, alias="AutomaticRefreshIntervalDays")
    placeholder_metadata_refresh_interval_days: Optional[StrictInt] = Field(default=None, alias="PlaceholderMetadataRefreshIntervalDays")
    preferred_metadata_language: Optional[StrictStr] = Field(default=None, description="The preferred metadata language.", alias="PreferredMetadataLanguage")
    preferred_image_language: Optional[StrictStr] = Field(default=None, alias="PreferredImageLanguage")
    content_type: Optional[StrictStr] = Field(default=None, alias="ContentType")
    metadata_country_code: Optional[StrictStr] = Field(default=None, description="The metadata country code.", alias="MetadataCountryCode")
    metadata_savers: Optional[List[StrictStr]] = Field(default=None, alias="MetadataSavers")
    disabled_local_metadata_readers: Optional[List[StrictStr]] = Field(default=None, alias="DisabledLocalMetadataReaders")
    local_metadata_reader_order: Optional[List[StrictStr]] = Field(default=None, alias="LocalMetadataReaderOrder")
    disabled_lyrics_fetchers: Optional[List[StrictStr]] = Field(default=None, alias="DisabledLyricsFetchers")
    save_lyrics_with_media: Optional[StrictBool] = Field(default=None, alias="SaveLyricsWithMedia")
    lyrics_download_max_age_days: Optional[StrictInt] = Field(default=None, alias="LyricsDownloadMaxAgeDays")
    lyrics_fetcher_order: Optional[List[StrictStr]] = Field(default=None, alias="LyricsFetcherOrder")
    lyrics_download_languages: Optional[List[StrictStr]] = Field(default=None, alias="LyricsDownloadLanguages")
    disabled_subtitle_fetchers: Optional[List[StrictStr]] = Field(default=None, alias="DisabledSubtitleFetchers")
    subtitle_fetcher_order: Optional[List[StrictStr]] = Field(default=None, alias="SubtitleFetcherOrder")
    skip_subtitles_if_embedded_subtitles_present: Optional[StrictBool] = Field(default=None, alias="SkipSubtitlesIfEmbeddedSubtitlesPresent")
    skip_subtitles_if_audio_track_matches: Optional[StrictBool] = Field(default=None, alias="SkipSubtitlesIfAudioTrackMatches")
    subtitle_download_languages: Optional[List[StrictStr]] = Field(default=None, alias="SubtitleDownloadLanguages")
    subtitle_download_max_age_days: Optional[StrictInt] = Field(default=None, alias="SubtitleDownloadMaxAgeDays")
    require_perfect_subtitle_match: Optional[StrictBool] = Field(default=None, alias="RequirePerfectSubtitleMatch")
    save_subtitles_with_media: Optional[StrictBool] = Field(default=None, alias="SaveSubtitlesWithMedia")
    forced_subtitles_only: Optional[StrictBool] = Field(default=None, alias="ForcedSubtitlesOnly")
    hearing_impaired_subtitles_only: Optional[StrictBool] = Field(default=None, alias="HearingImpairedSubtitlesOnly")
    type_options: Optional[List[TypeOptions]] = Field(default=None, alias="TypeOptions")
    collapse_single_item_folders: Optional[StrictBool] = Field(default=None, alias="CollapseSingleItemFolders")
    enable_adult_metadata: Optional[StrictBool] = Field(default=None, alias="EnableAdultMetadata")
    import_collections: Optional[StrictBool] = Field(default=None, alias="ImportCollections")
    min_collection_items: Optional[StrictInt] = Field(default=None, alias="MinCollectionItems")
    music_folder_structure: Optional[StrictStr] = Field(default=None, alias="MusicFolderStructure")
    min_resume_pct: Optional[StrictInt] = Field(default=None, description="The minimum percentage of an item that must be played in order for playstate to be updated.", alias="MinResumePct")
    max_resume_pct: Optional[StrictInt] = Field(default=None, description="The maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.", alias="MaxResumePct")
    min_resume_duration_seconds: Optional[StrictInt] = Field(default=None, description="The minimum duration that an item must have in order to be eligible for playstate updates..", alias="MinResumeDurationSeconds")
    thumbnail_images_interval_seconds: Optional[StrictInt] = Field(default=None, alias="ThumbnailImagesIntervalSeconds")
    sample_ignore_size: Optional[StrictInt] = Field(default=None, alias="SampleIgnoreSize")
    __properties: ClassVar[List[str]] = ["EnableArchiveMediaFiles", "EnablePhotos", "EnableRealtimeMonitor", "EnableMarkerDetection", "EnableMarkerDetectionDuringLibraryScan", "IntroDetectionFingerprintLength", "EnableChapterImageExtraction", "ExtractChapterImagesDuringLibraryScan", "DownloadImagesInAdvance", "CacheImages", "PathInfos", "IgnoreHiddenFiles", "IgnoreFileExtensions", "SaveLocalMetadata", "SaveMetadataHidden", "SaveLocalThumbnailSets", "ImportPlaylists", "EnableAutomaticSeriesGrouping", "ShareEmbeddedMusicAlbumImages", "EnableEmbeddedTitles", "EnableAudioResume", "AutoGenerateChapters", "AutomaticRefreshIntervalDays", "PlaceholderMetadataRefreshIntervalDays", "PreferredMetadataLanguage", "PreferredImageLanguage", "ContentType", "MetadataCountryCode", "MetadataSavers", "DisabledLocalMetadataReaders", "LocalMetadataReaderOrder", "DisabledLyricsFetchers", "SaveLyricsWithMedia", "LyricsDownloadMaxAgeDays", "LyricsFetcherOrder", "LyricsDownloadLanguages", "DisabledSubtitleFetchers", "SubtitleFetcherOrder", "SkipSubtitlesIfEmbeddedSubtitlesPresent", "SkipSubtitlesIfAudioTrackMatches", "SubtitleDownloadLanguages", "SubtitleDownloadMaxAgeDays", "RequirePerfectSubtitleMatch", "SaveSubtitlesWithMedia", "ForcedSubtitlesOnly", "HearingImpairedSubtitlesOnly", "TypeOptions", "CollapseSingleItemFolders", "EnableAdultMetadata", "ImportCollections", "MinCollectionItems", "MusicFolderStructure", "MinResumePct", "MaxResumePct", "MinResumeDurationSeconds", "ThumbnailImagesIntervalSeconds", "SampleIgnoreSize"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LibraryOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in path_infos (list)
        _items = []
        if self.path_infos:
            for _item in self.path_infos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PathInfos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in type_options (list)
        _items = []
        if self.type_options:
            for _item in self.type_options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TypeOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LibraryOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "EnableArchiveMediaFiles": obj.get("EnableArchiveMediaFiles"),
            "EnablePhotos": obj.get("EnablePhotos"),
            "EnableRealtimeMonitor": obj.get("EnableRealtimeMonitor"),
            "EnableMarkerDetection": obj.get("EnableMarkerDetection"),
            "EnableMarkerDetectionDuringLibraryScan": obj.get("EnableMarkerDetectionDuringLibraryScan"),
            "IntroDetectionFingerprintLength": obj.get("IntroDetectionFingerprintLength"),
            "EnableChapterImageExtraction": obj.get("EnableChapterImageExtraction"),
            "ExtractChapterImagesDuringLibraryScan": obj.get("ExtractChapterImagesDuringLibraryScan"),
            "DownloadImagesInAdvance": obj.get("DownloadImagesInAdvance"),
            "CacheImages": obj.get("CacheImages"),
            "PathInfos": [MediaPathInfo.from_dict(_item) for _item in obj["PathInfos"]] if obj.get("PathInfos") is not None else None,
            "IgnoreHiddenFiles": obj.get("IgnoreHiddenFiles"),
            "IgnoreFileExtensions": obj.get("IgnoreFileExtensions"),
            "SaveLocalMetadata": obj.get("SaveLocalMetadata"),
            "SaveMetadataHidden": obj.get("SaveMetadataHidden"),
            "SaveLocalThumbnailSets": obj.get("SaveLocalThumbnailSets"),
            "ImportPlaylists": obj.get("ImportPlaylists"),
            "EnableAutomaticSeriesGrouping": obj.get("EnableAutomaticSeriesGrouping"),
            "ShareEmbeddedMusicAlbumImages": obj.get("ShareEmbeddedMusicAlbumImages"),
            "EnableEmbeddedTitles": obj.get("EnableEmbeddedTitles"),
            "EnableAudioResume": obj.get("EnableAudioResume"),
            "AutoGenerateChapters": obj.get("AutoGenerateChapters"),
            "AutomaticRefreshIntervalDays": obj.get("AutomaticRefreshIntervalDays"),
            "PlaceholderMetadataRefreshIntervalDays": obj.get("PlaceholderMetadataRefreshIntervalDays"),
            "PreferredMetadataLanguage": obj.get("PreferredMetadataLanguage"),
            "PreferredImageLanguage": obj.get("PreferredImageLanguage"),
            "ContentType": obj.get("ContentType"),
            "MetadataCountryCode": obj.get("MetadataCountryCode"),
            "MetadataSavers": obj.get("MetadataSavers"),
            "DisabledLocalMetadataReaders": obj.get("DisabledLocalMetadataReaders"),
            "LocalMetadataReaderOrder": obj.get("LocalMetadataReaderOrder"),
            "DisabledLyricsFetchers": obj.get("DisabledLyricsFetchers"),
            "SaveLyricsWithMedia": obj.get("SaveLyricsWithMedia"),
            "LyricsDownloadMaxAgeDays": obj.get("LyricsDownloadMaxAgeDays"),
            "LyricsFetcherOrder": obj.get("LyricsFetcherOrder"),
            "LyricsDownloadLanguages": obj.get("LyricsDownloadLanguages"),
            "DisabledSubtitleFetchers": obj.get("DisabledSubtitleFetchers"),
            "SubtitleFetcherOrder": obj.get("SubtitleFetcherOrder"),
            "SkipSubtitlesIfEmbeddedSubtitlesPresent": obj.get("SkipSubtitlesIfEmbeddedSubtitlesPresent"),
            "SkipSubtitlesIfAudioTrackMatches": obj.get("SkipSubtitlesIfAudioTrackMatches"),
            "SubtitleDownloadLanguages": obj.get("SubtitleDownloadLanguages"),
            "SubtitleDownloadMaxAgeDays": obj.get("SubtitleDownloadMaxAgeDays"),
            "RequirePerfectSubtitleMatch": obj.get("RequirePerfectSubtitleMatch"),
            "SaveSubtitlesWithMedia": obj.get("SaveSubtitlesWithMedia"),
            "ForcedSubtitlesOnly": obj.get("ForcedSubtitlesOnly"),
            "HearingImpairedSubtitlesOnly": obj.get("HearingImpairedSubtitlesOnly"),
            "TypeOptions": [TypeOptions.from_dict(_item) for _item in obj["TypeOptions"]] if obj.get("TypeOptions") is not None else None,
            "CollapseSingleItemFolders": obj.get("CollapseSingleItemFolders"),
            "EnableAdultMetadata": obj.get("EnableAdultMetadata"),
            "ImportCollections": obj.get("ImportCollections"),
            "MinCollectionItems": obj.get("MinCollectionItems"),
            "MusicFolderStructure": obj.get("MusicFolderStructure"),
            "MinResumePct": obj.get("MinResumePct"),
            "MaxResumePct": obj.get("MaxResumePct"),
            "MinResumeDurationSeconds": obj.get("MinResumeDurationSeconds"),
            "ThumbnailImagesIntervalSeconds": obj.get("ThumbnailImagesIntervalSeconds"),
            "SampleIgnoreSize": obj.get("SampleIgnoreSize")
        })
        return _obj


