# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RemoteSearchResult(BaseModel):
    """
    RemoteSearchResult
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name.", alias="Name")
    provider_ids: Optional[Dict[str, StrictStr]] = Field(default=None, alias="ProviderIds")
    production_year: Optional[StrictInt] = Field(default=None, description="The year.", alias="ProductionYear")
    index_number: Optional[StrictInt] = Field(default=None, alias="IndexNumber")
    index_number_end: Optional[StrictInt] = Field(default=None, alias="IndexNumberEnd")
    parent_index_number: Optional[StrictInt] = Field(default=None, alias="ParentIndexNumber")
    sort_index_number: Optional[StrictInt] = Field(default=None, alias="SortIndexNumber")
    sort_parent_index_number: Optional[StrictInt] = Field(default=None, alias="SortParentIndexNumber")
    premiere_date: Optional[datetime] = Field(default=None, alias="PremiereDate")
    image_url: Optional[StrictStr] = Field(default=None, alias="ImageUrl")
    search_provider_name: Optional[StrictStr] = Field(default=None, alias="SearchProviderName")
    game_system: Optional[StrictStr] = Field(default=None, alias="GameSystem")
    overview: Optional[StrictStr] = Field(default=None, alias="Overview")
    disambiguation_comment: Optional[StrictStr] = Field(default=None, alias="DisambiguationComment")
    album_artist: Optional[RemoteSearchResult] = Field(default=None, alias="AlbumArtist")
    artists: Optional[List[RemoteSearchResult]] = Field(default=None, alias="Artists")
    __properties: ClassVar[List[str]] = ["Name", "ProviderIds", "ProductionYear", "IndexNumber", "IndexNumberEnd", "ParentIndexNumber", "SortIndexNumber", "SortParentIndexNumber", "PremiereDate", "ImageUrl", "SearchProviderName", "GameSystem", "Overview", "DisambiguationComment", "AlbumArtist", "Artists"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RemoteSearchResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of album_artist
        if self.album_artist:
            _dict['AlbumArtist'] = self.album_artist.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in artists (list)
        _items = []
        if self.artists:
            for _item in self.artists:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Artists'] = _items
        # set to None if production_year (nullable) is None
        # and model_fields_set contains the field
        if self.production_year is None and "production_year" in self.model_fields_set:
            _dict['ProductionYear'] = None

        # set to None if index_number (nullable) is None
        # and model_fields_set contains the field
        if self.index_number is None and "index_number" in self.model_fields_set:
            _dict['IndexNumber'] = None

        # set to None if index_number_end (nullable) is None
        # and model_fields_set contains the field
        if self.index_number_end is None and "index_number_end" in self.model_fields_set:
            _dict['IndexNumberEnd'] = None

        # set to None if parent_index_number (nullable) is None
        # and model_fields_set contains the field
        if self.parent_index_number is None and "parent_index_number" in self.model_fields_set:
            _dict['ParentIndexNumber'] = None

        # set to None if sort_index_number (nullable) is None
        # and model_fields_set contains the field
        if self.sort_index_number is None and "sort_index_number" in self.model_fields_set:
            _dict['SortIndexNumber'] = None

        # set to None if sort_parent_index_number (nullable) is None
        # and model_fields_set contains the field
        if self.sort_parent_index_number is None and "sort_parent_index_number" in self.model_fields_set:
            _dict['SortParentIndexNumber'] = None

        # set to None if premiere_date (nullable) is None
        # and model_fields_set contains the field
        if self.premiere_date is None and "premiere_date" in self.model_fields_set:
            _dict['PremiereDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RemoteSearchResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Name": obj.get("Name"),
            "ProviderIds": obj.get("ProviderIds"),
            "ProductionYear": obj.get("ProductionYear"),
            "IndexNumber": obj.get("IndexNumber"),
            "IndexNumberEnd": obj.get("IndexNumberEnd"),
            "ParentIndexNumber": obj.get("ParentIndexNumber"),
            "SortIndexNumber": obj.get("SortIndexNumber"),
            "SortParentIndexNumber": obj.get("SortParentIndexNumber"),
            "PremiereDate": obj.get("PremiereDate"),
            "ImageUrl": obj.get("ImageUrl"),
            "SearchProviderName": obj.get("SearchProviderName"),
            "GameSystem": obj.get("GameSystem"),
            "Overview": obj.get("Overview"),
            "DisambiguationComment": obj.get("DisambiguationComment"),
            "AlbumArtist": RemoteSearchResult.from_dict(obj["AlbumArtist"]) if obj.get("AlbumArtist") is not None else None,
            "Artists": [RemoteSearchResult.from_dict(_item) for _item in obj["Artists"]] if obj.get("Artists") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
RemoteSearchResult.model_rebuild(raise_errors=False)

