# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.user_action_type import UserActionType
from typing import Optional, Set
from typing_extensions import Self

class UserAction(BaseModel):
    """
    UserAction
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    server_id: Optional[StrictStr] = Field(default=None, alias="ServerId")
    user_id: Optional[StrictStr] = Field(default=None, alias="UserId")
    item_id: Optional[StrictStr] = Field(default=None, alias="ItemId")
    type: Optional[UserActionType] = Field(default=None, alias="Type")
    var_date: Optional[datetime] = Field(default=None, alias="Date")
    position_ticks: Optional[StrictInt] = Field(default=None, alias="PositionTicks")
    played: Optional[StrictBool] = Field(default=None, alias="Played")
    is_favorite: Optional[StrictBool] = Field(default=None, alias="IsFavorite")
    __properties: ClassVar[List[str]] = ["Id", "ServerId", "UserId", "ItemId", "Type", "Date", "PositionTicks", "Played", "IsFavorite"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if position_ticks (nullable) is None
        # and model_fields_set contains the field
        if self.position_ticks is None and "position_ticks" in self.model_fields_set:
            _dict['PositionTicks'] = None

        # set to None if played (nullable) is None
        # and model_fields_set contains the field
        if self.played is None and "played" in self.model_fields_set:
            _dict['Played'] = None

        # set to None if is_favorite (nullable) is None
        # and model_fields_set contains the field
        if self.is_favorite is None and "is_favorite" in self.model_fields_set:
            _dict['IsFavorite'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id"),
            "ServerId": obj.get("ServerId"),
            "UserId": obj.get("UserId"),
            "ItemId": obj.get("ItemId"),
            "Type": obj.get("Type"),
            "Date": obj.get("Date"),
            "PositionTicks": obj.get("PositionTicks"),
            "Played": obj.get("Played"),
            "IsFavorite": obj.get("IsFavorite")
        })
        return _obj


