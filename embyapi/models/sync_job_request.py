# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.sync_category import SyncCategory
from typing import Optional, Set
from typing_extensions import Self

class SyncJobRequest(BaseModel):
    """
    SyncJobRequest
    """ # noqa: E501
    target_id: Optional[StrictStr] = Field(default=None, alias="TargetId")
    item_ids: Optional[List[StrictStr]] = Field(default=None, alias="ItemIds")
    category: Optional[SyncCategory] = Field(default=None, alias="Category")
    parent_id: Optional[StrictStr] = Field(default=None, alias="ParentId")
    quality: Optional[StrictStr] = Field(default=None, alias="Quality")
    profile: Optional[StrictStr] = Field(default=None, alias="Profile")
    container: Optional[StrictStr] = Field(default=None, alias="Container")
    video_codec: Optional[StrictStr] = Field(default=None, alias="VideoCodec")
    audio_codec: Optional[StrictStr] = Field(default=None, alias="AudioCodec")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    user_id: Optional[StrictStr] = Field(default=None, alias="UserId")
    unwatched_only: Optional[StrictBool] = Field(default=None, alias="UnwatchedOnly")
    sync_new_content: Optional[StrictBool] = Field(default=None, alias="SyncNewContent")
    item_limit: Optional[StrictInt] = Field(default=None, alias="ItemLimit")
    bitrate: Optional[StrictInt] = Field(default=None, alias="Bitrate")
    downloaded: Optional[StrictBool] = Field(default=None, alias="Downloaded")
    __properties: ClassVar[List[str]] = ["TargetId", "ItemIds", "Category", "ParentId", "Quality", "Profile", "Container", "VideoCodec", "AudioCodec", "Name", "UserId", "UnwatchedOnly", "SyncNewContent", "ItemLimit", "Bitrate", "Downloaded"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SyncJobRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if item_limit (nullable) is None
        # and model_fields_set contains the field
        if self.item_limit is None and "item_limit" in self.model_fields_set:
            _dict['ItemLimit'] = None

        # set to None if bitrate (nullable) is None
        # and model_fields_set contains the field
        if self.bitrate is None and "bitrate" in self.model_fields_set:
            _dict['Bitrate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SyncJobRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "TargetId": obj.get("TargetId"),
            "ItemIds": obj.get("ItemIds"),
            "Category": obj.get("Category"),
            "ParentId": obj.get("ParentId"),
            "Quality": obj.get("Quality"),
            "Profile": obj.get("Profile"),
            "Container": obj.get("Container"),
            "VideoCodec": obj.get("VideoCodec"),
            "AudioCodec": obj.get("AudioCodec"),
            "Name": obj.get("Name"),
            "UserId": obj.get("UserId"),
            "UnwatchedOnly": obj.get("UnwatchedOnly"),
            "SyncNewContent": obj.get("SyncNewContent"),
            "ItemLimit": obj.get("ItemLimit"),
            "Bitrate": obj.get("Bitrate"),
            "Downloaded": obj.get("Downloaded")
        })
        return _obj


