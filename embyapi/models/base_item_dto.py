# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from embyapi.models.base_item_person import BaseItemPerson
from embyapi.models.chapter_info import ChapterInfo
from embyapi.models.day_of_week import DayOfWeek
from embyapi.models.drawing_image_orientation import DrawingImageOrientation
from embyapi.models.external_url import ExternalUrl
from embyapi.models.live_tv_timer_type import LiveTvTimerType
from embyapi.models.location_type import LocationType
from embyapi.models.media_source_info import MediaSourceInfo
from embyapi.models.media_stream import MediaStream
from embyapi.models.media_url import MediaUrl
from embyapi.models.metadata_fields import MetadataFields
from embyapi.models.name_id_pair import NameIdPair
from embyapi.models.name_long_id_pair import NameLongIdPair
from embyapi.models.sync_job_item_status import SyncJobItemStatus
from embyapi.models.user_item_data_dto import UserItemDataDto
from embyapi.models.video3_d_format import Video3DFormat
from typing import Optional, Set
from typing_extensions import Self

class BaseItemDto(BaseModel):
    """
    This is strictly used as a data transfer object from the api layer. This holds information about a BaseItem in a format that is convenient for the client.  
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name.", alias="Name")
    original_title: Optional[StrictStr] = Field(default=None, alias="OriginalTitle")
    server_id: Optional[StrictStr] = Field(default=None, description="The server identifier.", alias="ServerId")
    id: Optional[StrictStr] = Field(default=None, description="The id.", alias="Id")
    guid: Optional[StrictStr] = Field(default=None, alias="Guid")
    etag: Optional[StrictStr] = Field(default=None, description="The etag.", alias="Etag")
    prefix: Optional[StrictStr] = Field(default=None, description="The Prefix.", alias="Prefix")
    playlist_item_id: Optional[StrictStr] = Field(default=None, description="The playlist item identifier.", alias="PlaylistItemId")
    date_created: Optional[datetime] = Field(default=None, description="The date created.", alias="DateCreated")
    extra_type: Optional[StrictStr] = Field(default=None, alias="ExtraType")
    sort_index_number: Optional[StrictInt] = Field(default=None, alias="SortIndexNumber")
    sort_parent_index_number: Optional[StrictInt] = Field(default=None, alias="SortParentIndexNumber")
    can_delete: Optional[StrictBool] = Field(default=None, alias="CanDelete")
    can_download: Optional[StrictBool] = Field(default=None, alias="CanDownload")
    can_edit_items: Optional[StrictBool] = Field(default=None, alias="CanEditItems")
    supports_resume: Optional[StrictBool] = Field(default=None, alias="SupportsResume")
    presentation_unique_key: Optional[StrictStr] = Field(default=None, alias="PresentationUniqueKey")
    preferred_metadata_language: Optional[StrictStr] = Field(default=None, alias="PreferredMetadataLanguage")
    preferred_metadata_country_code: Optional[StrictStr] = Field(default=None, alias="PreferredMetadataCountryCode")
    supports_sync: Optional[StrictBool] = Field(default=None, description="A value indicating whether \\[supports synchronize\\].", alias="SupportsSync")
    sync_status: Optional[SyncJobItemStatus] = Field(default=None, alias="SyncStatus")
    can_manage_access: Optional[StrictBool] = Field(default=None, alias="CanManageAccess")
    can_leave_content: Optional[StrictBool] = Field(default=None, alias="CanLeaveContent")
    can_make_public: Optional[StrictBool] = Field(default=None, alias="CanMakePublic")
    container: Optional[StrictStr] = Field(default=None, alias="Container")
    sort_name: Optional[StrictStr] = Field(default=None, description="The name of the sort.", alias="SortName")
    forced_sort_name: Optional[StrictStr] = Field(default=None, alias="ForcedSortName")
    video3_d_format: Optional[Video3DFormat] = Field(default=None, alias="Video3DFormat")
    premiere_date: Optional[datetime] = Field(default=None, description="The premiere date.", alias="PremiereDate")
    external_urls: Optional[List[ExternalUrl]] = Field(default=None, description="The external urls.", alias="ExternalUrls")
    media_sources: Optional[List[MediaSourceInfo]] = Field(default=None, description="The media versions.", alias="MediaSources")
    critic_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The critic rating.", alias="CriticRating")
    game_system_id: Optional[StrictInt] = Field(default=None, alias="GameSystemId")
    as_series: Optional[StrictBool] = Field(default=None, alias="AsSeries")
    game_system: Optional[StrictStr] = Field(default=None, description="The game system.", alias="GameSystem")
    production_locations: Optional[List[StrictStr]] = Field(default=None, alias="ProductionLocations")
    path: Optional[StrictStr] = Field(default=None, description="The path.", alias="Path")
    official_rating: Optional[StrictStr] = Field(default=None, description="The official rating.", alias="OfficialRating")
    custom_rating: Optional[StrictStr] = Field(default=None, description="The custom rating.", alias="CustomRating")
    channel_id: Optional[StrictStr] = Field(default=None, description="The channel identifier.", alias="ChannelId")
    channel_name: Optional[StrictStr] = Field(default=None, alias="ChannelName")
    overview: Optional[StrictStr] = Field(default=None, description="The overview.", alias="Overview")
    taglines: Optional[List[StrictStr]] = Field(default=None, description="The taglines.", alias="Taglines")
    genres: Optional[List[StrictStr]] = Field(default=None, description="The genres.", alias="Genres")
    community_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The community rating.", alias="CommunityRating")
    run_time_ticks: Optional[StrictInt] = Field(default=None, description="The run time ticks.", alias="RunTimeTicks")
    size: Optional[StrictInt] = Field(default=None, alias="Size")
    file_name: Optional[StrictStr] = Field(default=None, alias="FileName")
    bitrate: Optional[StrictInt] = Field(default=None, alias="Bitrate")
    production_year: Optional[StrictInt] = Field(default=None, description="The production year.", alias="ProductionYear")
    number: Optional[StrictStr] = Field(default=None, description="The number.", alias="Number")
    channel_number: Optional[StrictStr] = Field(default=None, alias="ChannelNumber")
    index_number: Optional[StrictInt] = Field(default=None, description="The index number.", alias="IndexNumber")
    index_number_end: Optional[StrictInt] = Field(default=None, description="The index number end.", alias="IndexNumberEnd")
    parent_index_number: Optional[StrictInt] = Field(default=None, description="The parent index number.", alias="ParentIndexNumber")
    remote_trailers: Optional[List[MediaUrl]] = Field(default=None, description="The trailer urls.", alias="RemoteTrailers")
    provider_ids: Optional[Dict[str, StrictStr]] = Field(default=None, alias="ProviderIds")
    is_folder: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is folder.", alias="IsFolder")
    parent_id: Optional[StrictStr] = Field(default=None, description="The parent id.", alias="ParentId")
    type: Optional[StrictStr] = Field(default=None, description="The type.", alias="Type")
    people: Optional[List[BaseItemPerson]] = Field(default=None, description="The people.", alias="People")
    studios: Optional[List[NameLongIdPair]] = Field(default=None, description="The studios.", alias="Studios")
    genre_items: Optional[List[NameLongIdPair]] = Field(default=None, alias="GenreItems")
    tag_items: Optional[List[NameLongIdPair]] = Field(default=None, alias="TagItems")
    parent_logo_item_id: Optional[StrictStr] = Field(default=None, description="If the item does not have a logo, this will hold the Id of the Parent that has one.", alias="ParentLogoItemId")
    parent_backdrop_item_id: Optional[StrictStr] = Field(default=None, description="If the item does not have any backdrops, this will hold the Id of the Parent that has one.", alias="ParentBackdropItemId")
    parent_backdrop_image_tags: Optional[List[StrictStr]] = Field(default=None, description="The parent backdrop image tags.", alias="ParentBackdropImageTags")
    local_trailer_count: Optional[StrictInt] = Field(default=None, description="The local trailer count.", alias="LocalTrailerCount")
    user_data: Optional[UserItemDataDto] = Field(default=None, alias="UserData")
    recursive_item_count: Optional[StrictInt] = Field(default=None, description="The recursive item count.", alias="RecursiveItemCount")
    child_count: Optional[StrictInt] = Field(default=None, description="The child count.", alias="ChildCount")
    series_name: Optional[StrictStr] = Field(default=None, description="The name of the series.", alias="SeriesName")
    series_id: Optional[StrictStr] = Field(default=None, description="The series id.", alias="SeriesId")
    season_id: Optional[StrictStr] = Field(default=None, description="The season identifier.", alias="SeasonId")
    special_feature_count: Optional[StrictInt] = Field(default=None, description="The special feature count.", alias="SpecialFeatureCount")
    display_preferences_id: Optional[StrictStr] = Field(default=None, description="The display preferences id.", alias="DisplayPreferencesId")
    status: Optional[StrictStr] = Field(default=None, description="The status.", alias="Status")
    air_days: Optional[List[DayOfWeek]] = Field(default=None, description="The air days.", alias="AirDays")
    tags: Optional[List[StrictStr]] = Field(default=None, description="The tags.", alias="Tags")
    primary_image_aspect_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The primary image aspect ratio, after image enhancements.", alias="PrimaryImageAspectRatio")
    artists: Optional[List[StrictStr]] = Field(default=None, description="The artists.", alias="Artists")
    artist_items: Optional[List[NameIdPair]] = Field(default=None, description="The artist items.", alias="ArtistItems")
    composers: Optional[List[NameIdPair]] = Field(default=None, alias="Composers")
    album: Optional[StrictStr] = Field(default=None, description="The album.", alias="Album")
    collection_type: Optional[StrictStr] = Field(default=None, description="The type of the collection.", alias="CollectionType")
    display_order: Optional[StrictStr] = Field(default=None, description="The display order.", alias="DisplayOrder")
    album_id: Optional[StrictStr] = Field(default=None, description="The album id.", alias="AlbumId")
    album_primary_image_tag: Optional[StrictStr] = Field(default=None, description="The album image tag.", alias="AlbumPrimaryImageTag")
    series_primary_image_tag: Optional[StrictStr] = Field(default=None, description="The series primary image tag.", alias="SeriesPrimaryImageTag")
    album_artist: Optional[StrictStr] = Field(default=None, description="The album artist.", alias="AlbumArtist")
    album_artists: Optional[List[NameIdPair]] = Field(default=None, description="The album artists.", alias="AlbumArtists")
    season_name: Optional[StrictStr] = Field(default=None, description="The name of the season.", alias="SeasonName")
    media_streams: Optional[List[MediaStream]] = Field(default=None, description="The media streams.", alias="MediaStreams")
    part_count: Optional[StrictInt] = Field(default=None, description="The part count.", alias="PartCount")
    image_tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="The image tags.", alias="ImageTags")
    backdrop_image_tags: Optional[List[StrictStr]] = Field(default=None, description="The backdrop image tags.", alias="BackdropImageTags")
    parent_logo_image_tag: Optional[StrictStr] = Field(default=None, description="The parent logo image tag.", alias="ParentLogoImageTag")
    series_studio: Optional[StrictStr] = Field(default=None, description="The series studio.", alias="SeriesStudio")
    primary_image_item_id: Optional[StrictStr] = Field(default=None, alias="PrimaryImageItemId")
    primary_image_tag: Optional[StrictStr] = Field(default=None, alias="PrimaryImageTag")
    parent_thumb_item_id: Optional[StrictStr] = Field(default=None, description="The parent thumb item id.", alias="ParentThumbItemId")
    parent_thumb_image_tag: Optional[StrictStr] = Field(default=None, description="The parent thumb image tag.", alias="ParentThumbImageTag")
    chapters: Optional[List[ChapterInfo]] = Field(default=None, description="The chapters.", alias="Chapters")
    location_type: Optional[LocationType] = Field(default=None, alias="LocationType")
    media_type: Optional[StrictStr] = Field(default=None, description="The type of the media.", alias="MediaType")
    end_date: Optional[datetime] = Field(default=None, description="The end date.", alias="EndDate")
    locked_fields: Optional[List[MetadataFields]] = Field(default=None, description="The locked fields.", alias="LockedFields")
    lock_data: Optional[StrictBool] = Field(default=None, description="A value indicating whether \\[enable internet providers\\].", alias="LockData")
    width: Optional[StrictInt] = Field(default=None, alias="Width")
    height: Optional[StrictInt] = Field(default=None, alias="Height")
    camera_make: Optional[StrictStr] = Field(default=None, alias="CameraMake")
    camera_model: Optional[StrictStr] = Field(default=None, alias="CameraModel")
    software: Optional[StrictStr] = Field(default=None, alias="Software")
    exposure_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ExposureTime")
    focal_length: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FocalLength")
    image_orientation: Optional[DrawingImageOrientation] = Field(default=None, alias="ImageOrientation")
    aperture: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Aperture")
    shutter_speed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ShutterSpeed")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Latitude")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Longitude")
    altitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Altitude")
    iso_speed_rating: Optional[StrictInt] = Field(default=None, alias="IsoSpeedRating")
    series_timer_id: Optional[StrictStr] = Field(default=None, description="The series timer identifier.", alias="SeriesTimerId")
    channel_primary_image_tag: Optional[StrictStr] = Field(default=None, description="The channel primary image tag.", alias="ChannelPrimaryImageTag")
    start_date: Optional[datetime] = Field(default=None, description="The start date of the recording, in UTC.", alias="StartDate")
    completion_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The completion percentage.", alias="CompletionPercentage")
    is_repeat: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is repeat.", alias="IsRepeat")
    is_new: Optional[StrictBool] = Field(default=None, alias="IsNew")
    episode_title: Optional[StrictStr] = Field(default=None, description="The episode title.", alias="EpisodeTitle")
    is_movie: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is movie.", alias="IsMovie")
    is_sports: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is sports.", alias="IsSports")
    is_series: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is series.", alias="IsSeries")
    is_live: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is live.", alias="IsLive")
    is_news: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is news.", alias="IsNews")
    is_kids: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is kids.", alias="IsKids")
    is_premiere: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is premiere.", alias="IsPremiere")
    timer_type: Optional[LiveTvTimerType] = Field(default=None, alias="TimerType")
    disabled: Optional[StrictBool] = Field(default=None, alias="Disabled")
    management_id: Optional[StrictStr] = Field(default=None, alias="ManagementId")
    timer_id: Optional[StrictStr] = Field(default=None, description="The timer identifier.", alias="TimerId")
    current_program: Optional[BaseItemDto] = Field(default=None, alias="CurrentProgram")
    movie_count: Optional[StrictInt] = Field(default=None, alias="MovieCount")
    series_count: Optional[StrictInt] = Field(default=None, alias="SeriesCount")
    album_count: Optional[StrictInt] = Field(default=None, alias="AlbumCount")
    song_count: Optional[StrictInt] = Field(default=None, alias="SongCount")
    music_video_count: Optional[StrictInt] = Field(default=None, alias="MusicVideoCount")
    subviews: Optional[List[StrictStr]] = Field(default=None, alias="Subviews")
    listings_provider_id: Optional[StrictStr] = Field(default=None, alias="ListingsProviderId")
    listings_channel_id: Optional[StrictStr] = Field(default=None, alias="ListingsChannelId")
    listings_path: Optional[StrictStr] = Field(default=None, alias="ListingsPath")
    listings_id: Optional[StrictStr] = Field(default=None, alias="ListingsId")
    listings_channel_name: Optional[StrictStr] = Field(default=None, alias="ListingsChannelName")
    listings_channel_number: Optional[StrictStr] = Field(default=None, alias="ListingsChannelNumber")
    affiliate_call_sign: Optional[StrictStr] = Field(default=None, alias="AffiliateCallSign")
    __properties: ClassVar[List[str]] = ["Name", "OriginalTitle", "ServerId", "Id", "Guid", "Etag", "Prefix", "PlaylistItemId", "DateCreated", "ExtraType", "SortIndexNumber", "SortParentIndexNumber", "CanDelete", "CanDownload", "CanEditItems", "SupportsResume", "PresentationUniqueKey", "PreferredMetadataLanguage", "PreferredMetadataCountryCode", "SupportsSync", "SyncStatus", "CanManageAccess", "CanLeaveContent", "CanMakePublic", "Container", "SortName", "ForcedSortName", "Video3DFormat", "PremiereDate", "ExternalUrls", "MediaSources", "CriticRating", "GameSystemId", "AsSeries", "GameSystem", "ProductionLocations", "Path", "OfficialRating", "CustomRating", "ChannelId", "ChannelName", "Overview", "Taglines", "Genres", "CommunityRating", "RunTimeTicks", "Size", "FileName", "Bitrate", "ProductionYear", "Number", "ChannelNumber", "IndexNumber", "IndexNumberEnd", "ParentIndexNumber", "RemoteTrailers", "ProviderIds", "IsFolder", "ParentId", "Type", "People", "Studios", "GenreItems", "TagItems", "ParentLogoItemId", "ParentBackdropItemId", "ParentBackdropImageTags", "LocalTrailerCount", "UserData", "RecursiveItemCount", "ChildCount", "SeriesName", "SeriesId", "SeasonId", "SpecialFeatureCount", "DisplayPreferencesId", "Status", "AirDays", "Tags", "PrimaryImageAspectRatio", "Artists", "ArtistItems", "Composers", "Album", "CollectionType", "DisplayOrder", "AlbumId", "AlbumPrimaryImageTag", "SeriesPrimaryImageTag", "AlbumArtist", "AlbumArtists", "SeasonName", "MediaStreams", "PartCount", "ImageTags", "BackdropImageTags", "ParentLogoImageTag", "SeriesStudio", "PrimaryImageItemId", "PrimaryImageTag", "ParentThumbItemId", "ParentThumbImageTag", "Chapters", "LocationType", "MediaType", "EndDate", "LockedFields", "LockData", "Width", "Height", "CameraMake", "CameraModel", "Software", "ExposureTime", "FocalLength", "ImageOrientation", "Aperture", "ShutterSpeed", "Latitude", "Longitude", "Altitude", "IsoSpeedRating", "SeriesTimerId", "ChannelPrimaryImageTag", "StartDate", "CompletionPercentage", "IsRepeat", "IsNew", "EpisodeTitle", "IsMovie", "IsSports", "IsSeries", "IsLive", "IsNews", "IsKids", "IsPremiere", "TimerType", "Disabled", "ManagementId", "TimerId", "CurrentProgram", "MovieCount", "SeriesCount", "AlbumCount", "SongCount", "MusicVideoCount", "Subviews", "ListingsProviderId", "ListingsChannelId", "ListingsPath", "ListingsId", "ListingsChannelName", "ListingsChannelNumber", "AffiliateCallSign"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BaseItemDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in external_urls (list)
        _items = []
        if self.external_urls:
            for _item in self.external_urls:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ExternalUrls'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in media_sources (list)
        _items = []
        if self.media_sources:
            for _item in self.media_sources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['MediaSources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in remote_trailers (list)
        _items = []
        if self.remote_trailers:
            for _item in self.remote_trailers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['RemoteTrailers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in people (list)
        _items = []
        if self.people:
            for _item in self.people:
                if _item:
                    _items.append(_item.to_dict())
            _dict['People'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in studios (list)
        _items = []
        if self.studios:
            for _item in self.studios:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Studios'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in genre_items (list)
        _items = []
        if self.genre_items:
            for _item in self.genre_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['GenreItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tag_items (list)
        _items = []
        if self.tag_items:
            for _item in self.tag_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['TagItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of user_data
        if self.user_data:
            _dict['UserData'] = self.user_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in artist_items (list)
        _items = []
        if self.artist_items:
            for _item in self.artist_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ArtistItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in composers (list)
        _items = []
        if self.composers:
            for _item in self.composers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Composers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in album_artists (list)
        _items = []
        if self.album_artists:
            for _item in self.album_artists:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AlbumArtists'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in media_streams (list)
        _items = []
        if self.media_streams:
            for _item in self.media_streams:
                if _item:
                    _items.append(_item.to_dict())
            _dict['MediaStreams'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in chapters (list)
        _items = []
        if self.chapters:
            for _item in self.chapters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Chapters'] = _items
        # override the default output from pydantic by calling `to_dict()` of current_program
        if self.current_program:
            _dict['CurrentProgram'] = self.current_program.to_dict()
        # set to None if date_created (nullable) is None
        # and model_fields_set contains the field
        if self.date_created is None and "date_created" in self.model_fields_set:
            _dict['DateCreated'] = None

        # set to None if sort_index_number (nullable) is None
        # and model_fields_set contains the field
        if self.sort_index_number is None and "sort_index_number" in self.model_fields_set:
            _dict['SortIndexNumber'] = None

        # set to None if sort_parent_index_number (nullable) is None
        # and model_fields_set contains the field
        if self.sort_parent_index_number is None and "sort_parent_index_number" in self.model_fields_set:
            _dict['SortParentIndexNumber'] = None

        # set to None if can_delete (nullable) is None
        # and model_fields_set contains the field
        if self.can_delete is None and "can_delete" in self.model_fields_set:
            _dict['CanDelete'] = None

        # set to None if can_download (nullable) is None
        # and model_fields_set contains the field
        if self.can_download is None and "can_download" in self.model_fields_set:
            _dict['CanDownload'] = None

        # set to None if can_edit_items (nullable) is None
        # and model_fields_set contains the field
        if self.can_edit_items is None and "can_edit_items" in self.model_fields_set:
            _dict['CanEditItems'] = None

        # set to None if supports_resume (nullable) is None
        # and model_fields_set contains the field
        if self.supports_resume is None and "supports_resume" in self.model_fields_set:
            _dict['SupportsResume'] = None

        # set to None if supports_sync (nullable) is None
        # and model_fields_set contains the field
        if self.supports_sync is None and "supports_sync" in self.model_fields_set:
            _dict['SupportsSync'] = None

        # set to None if can_manage_access (nullable) is None
        # and model_fields_set contains the field
        if self.can_manage_access is None and "can_manage_access" in self.model_fields_set:
            _dict['CanManageAccess'] = None

        # set to None if can_leave_content (nullable) is None
        # and model_fields_set contains the field
        if self.can_leave_content is None and "can_leave_content" in self.model_fields_set:
            _dict['CanLeaveContent'] = None

        # set to None if can_make_public (nullable) is None
        # and model_fields_set contains the field
        if self.can_make_public is None and "can_make_public" in self.model_fields_set:
            _dict['CanMakePublic'] = None

        # set to None if premiere_date (nullable) is None
        # and model_fields_set contains the field
        if self.premiere_date is None and "premiere_date" in self.model_fields_set:
            _dict['PremiereDate'] = None

        # set to None if critic_rating (nullable) is None
        # and model_fields_set contains the field
        if self.critic_rating is None and "critic_rating" in self.model_fields_set:
            _dict['CriticRating'] = None

        # set to None if game_system_id (nullable) is None
        # and model_fields_set contains the field
        if self.game_system_id is None and "game_system_id" in self.model_fields_set:
            _dict['GameSystemId'] = None

        # set to None if as_series (nullable) is None
        # and model_fields_set contains the field
        if self.as_series is None and "as_series" in self.model_fields_set:
            _dict['AsSeries'] = None

        # set to None if community_rating (nullable) is None
        # and model_fields_set contains the field
        if self.community_rating is None and "community_rating" in self.model_fields_set:
            _dict['CommunityRating'] = None

        # set to None if run_time_ticks (nullable) is None
        # and model_fields_set contains the field
        if self.run_time_ticks is None and "run_time_ticks" in self.model_fields_set:
            _dict['RunTimeTicks'] = None

        # set to None if size (nullable) is None
        # and model_fields_set contains the field
        if self.size is None and "size" in self.model_fields_set:
            _dict['Size'] = None

        # set to None if bitrate (nullable) is None
        # and model_fields_set contains the field
        if self.bitrate is None and "bitrate" in self.model_fields_set:
            _dict['Bitrate'] = None

        # set to None if production_year (nullable) is None
        # and model_fields_set contains the field
        if self.production_year is None and "production_year" in self.model_fields_set:
            _dict['ProductionYear'] = None

        # set to None if index_number (nullable) is None
        # and model_fields_set contains the field
        if self.index_number is None and "index_number" in self.model_fields_set:
            _dict['IndexNumber'] = None

        # set to None if index_number_end (nullable) is None
        # and model_fields_set contains the field
        if self.index_number_end is None and "index_number_end" in self.model_fields_set:
            _dict['IndexNumberEnd'] = None

        # set to None if parent_index_number (nullable) is None
        # and model_fields_set contains the field
        if self.parent_index_number is None and "parent_index_number" in self.model_fields_set:
            _dict['ParentIndexNumber'] = None

        # set to None if is_folder (nullable) is None
        # and model_fields_set contains the field
        if self.is_folder is None and "is_folder" in self.model_fields_set:
            _dict['IsFolder'] = None

        # set to None if local_trailer_count (nullable) is None
        # and model_fields_set contains the field
        if self.local_trailer_count is None and "local_trailer_count" in self.model_fields_set:
            _dict['LocalTrailerCount'] = None

        # set to None if recursive_item_count (nullable) is None
        # and model_fields_set contains the field
        if self.recursive_item_count is None and "recursive_item_count" in self.model_fields_set:
            _dict['RecursiveItemCount'] = None

        # set to None if child_count (nullable) is None
        # and model_fields_set contains the field
        if self.child_count is None and "child_count" in self.model_fields_set:
            _dict['ChildCount'] = None

        # set to None if special_feature_count (nullable) is None
        # and model_fields_set contains the field
        if self.special_feature_count is None and "special_feature_count" in self.model_fields_set:
            _dict['SpecialFeatureCount'] = None

        # set to None if primary_image_aspect_ratio (nullable) is None
        # and model_fields_set contains the field
        if self.primary_image_aspect_ratio is None and "primary_image_aspect_ratio" in self.model_fields_set:
            _dict['PrimaryImageAspectRatio'] = None

        # set to None if part_count (nullable) is None
        # and model_fields_set contains the field
        if self.part_count is None and "part_count" in self.model_fields_set:
            _dict['PartCount'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['EndDate'] = None

        # set to None if lock_data (nullable) is None
        # and model_fields_set contains the field
        if self.lock_data is None and "lock_data" in self.model_fields_set:
            _dict['LockData'] = None

        # set to None if width (nullable) is None
        # and model_fields_set contains the field
        if self.width is None and "width" in self.model_fields_set:
            _dict['Width'] = None

        # set to None if height (nullable) is None
        # and model_fields_set contains the field
        if self.height is None and "height" in self.model_fields_set:
            _dict['Height'] = None

        # set to None if exposure_time (nullable) is None
        # and model_fields_set contains the field
        if self.exposure_time is None and "exposure_time" in self.model_fields_set:
            _dict['ExposureTime'] = None

        # set to None if focal_length (nullable) is None
        # and model_fields_set contains the field
        if self.focal_length is None and "focal_length" in self.model_fields_set:
            _dict['FocalLength'] = None

        # set to None if aperture (nullable) is None
        # and model_fields_set contains the field
        if self.aperture is None and "aperture" in self.model_fields_set:
            _dict['Aperture'] = None

        # set to None if shutter_speed (nullable) is None
        # and model_fields_set contains the field
        if self.shutter_speed is None and "shutter_speed" in self.model_fields_set:
            _dict['ShutterSpeed'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['Latitude'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['Longitude'] = None

        # set to None if altitude (nullable) is None
        # and model_fields_set contains the field
        if self.altitude is None and "altitude" in self.model_fields_set:
            _dict['Altitude'] = None

        # set to None if iso_speed_rating (nullable) is None
        # and model_fields_set contains the field
        if self.iso_speed_rating is None and "iso_speed_rating" in self.model_fields_set:
            _dict['IsoSpeedRating'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['StartDate'] = None

        # set to None if completion_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.completion_percentage is None and "completion_percentage" in self.model_fields_set:
            _dict['CompletionPercentage'] = None

        # set to None if is_repeat (nullable) is None
        # and model_fields_set contains the field
        if self.is_repeat is None and "is_repeat" in self.model_fields_set:
            _dict['IsRepeat'] = None

        # set to None if is_new (nullable) is None
        # and model_fields_set contains the field
        if self.is_new is None and "is_new" in self.model_fields_set:
            _dict['IsNew'] = None

        # set to None if is_movie (nullable) is None
        # and model_fields_set contains the field
        if self.is_movie is None and "is_movie" in self.model_fields_set:
            _dict['IsMovie'] = None

        # set to None if is_sports (nullable) is None
        # and model_fields_set contains the field
        if self.is_sports is None and "is_sports" in self.model_fields_set:
            _dict['IsSports'] = None

        # set to None if is_series (nullable) is None
        # and model_fields_set contains the field
        if self.is_series is None and "is_series" in self.model_fields_set:
            _dict['IsSeries'] = None

        # set to None if is_live (nullable) is None
        # and model_fields_set contains the field
        if self.is_live is None and "is_live" in self.model_fields_set:
            _dict['IsLive'] = None

        # set to None if is_news (nullable) is None
        # and model_fields_set contains the field
        if self.is_news is None and "is_news" in self.model_fields_set:
            _dict['IsNews'] = None

        # set to None if is_kids (nullable) is None
        # and model_fields_set contains the field
        if self.is_kids is None and "is_kids" in self.model_fields_set:
            _dict['IsKids'] = None

        # set to None if is_premiere (nullable) is None
        # and model_fields_set contains the field
        if self.is_premiere is None and "is_premiere" in self.model_fields_set:
            _dict['IsPremiere'] = None

        # set to None if disabled (nullable) is None
        # and model_fields_set contains the field
        if self.disabled is None and "disabled" in self.model_fields_set:
            _dict['Disabled'] = None

        # set to None if movie_count (nullable) is None
        # and model_fields_set contains the field
        if self.movie_count is None and "movie_count" in self.model_fields_set:
            _dict['MovieCount'] = None

        # set to None if series_count (nullable) is None
        # and model_fields_set contains the field
        if self.series_count is None and "series_count" in self.model_fields_set:
            _dict['SeriesCount'] = None

        # set to None if album_count (nullable) is None
        # and model_fields_set contains the field
        if self.album_count is None and "album_count" in self.model_fields_set:
            _dict['AlbumCount'] = None

        # set to None if song_count (nullable) is None
        # and model_fields_set contains the field
        if self.song_count is None and "song_count" in self.model_fields_set:
            _dict['SongCount'] = None

        # set to None if music_video_count (nullable) is None
        # and model_fields_set contains the field
        if self.music_video_count is None and "music_video_count" in self.model_fields_set:
            _dict['MusicVideoCount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BaseItemDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Name": obj.get("Name"),
            "OriginalTitle": obj.get("OriginalTitle"),
            "ServerId": obj.get("ServerId"),
            "Id": obj.get("Id"),
            "Guid": obj.get("Guid"),
            "Etag": obj.get("Etag"),
            "Prefix": obj.get("Prefix"),
            "PlaylistItemId": obj.get("PlaylistItemId"),
            "DateCreated": obj.get("DateCreated"),
            "ExtraType": obj.get("ExtraType"),
            "SortIndexNumber": obj.get("SortIndexNumber"),
            "SortParentIndexNumber": obj.get("SortParentIndexNumber"),
            "CanDelete": obj.get("CanDelete"),
            "CanDownload": obj.get("CanDownload"),
            "CanEditItems": obj.get("CanEditItems"),
            "SupportsResume": obj.get("SupportsResume"),
            "PresentationUniqueKey": obj.get("PresentationUniqueKey"),
            "PreferredMetadataLanguage": obj.get("PreferredMetadataLanguage"),
            "PreferredMetadataCountryCode": obj.get("PreferredMetadataCountryCode"),
            "SupportsSync": obj.get("SupportsSync"),
            "SyncStatus": obj.get("SyncStatus"),
            "CanManageAccess": obj.get("CanManageAccess"),
            "CanLeaveContent": obj.get("CanLeaveContent"),
            "CanMakePublic": obj.get("CanMakePublic"),
            "Container": obj.get("Container"),
            "SortName": obj.get("SortName"),
            "ForcedSortName": obj.get("ForcedSortName"),
            "Video3DFormat": obj.get("Video3DFormat"),
            "PremiereDate": obj.get("PremiereDate"),
            "ExternalUrls": [ExternalUrl.from_dict(_item) for _item in obj["ExternalUrls"]] if obj.get("ExternalUrls") is not None else None,
            "MediaSources": [MediaSourceInfo.from_dict(_item) for _item in obj["MediaSources"]] if obj.get("MediaSources") is not None else None,
            "CriticRating": obj.get("CriticRating"),
            "GameSystemId": obj.get("GameSystemId"),
            "AsSeries": obj.get("AsSeries"),
            "GameSystem": obj.get("GameSystem"),
            "ProductionLocations": obj.get("ProductionLocations"),
            "Path": obj.get("Path"),
            "OfficialRating": obj.get("OfficialRating"),
            "CustomRating": obj.get("CustomRating"),
            "ChannelId": obj.get("ChannelId"),
            "ChannelName": obj.get("ChannelName"),
            "Overview": obj.get("Overview"),
            "Taglines": obj.get("Taglines"),
            "Genres": obj.get("Genres"),
            "CommunityRating": obj.get("CommunityRating"),
            "RunTimeTicks": obj.get("RunTimeTicks"),
            "Size": obj.get("Size"),
            "FileName": obj.get("FileName"),
            "Bitrate": obj.get("Bitrate"),
            "ProductionYear": obj.get("ProductionYear"),
            "Number": obj.get("Number"),
            "ChannelNumber": obj.get("ChannelNumber"),
            "IndexNumber": obj.get("IndexNumber"),
            "IndexNumberEnd": obj.get("IndexNumberEnd"),
            "ParentIndexNumber": obj.get("ParentIndexNumber"),
            "RemoteTrailers": [MediaUrl.from_dict(_item) for _item in obj["RemoteTrailers"]] if obj.get("RemoteTrailers") is not None else None,
            "ProviderIds": obj.get("ProviderIds"),
            "IsFolder": obj.get("IsFolder"),
            "ParentId": obj.get("ParentId"),
            "Type": obj.get("Type"),
            "People": [BaseItemPerson.from_dict(_item) for _item in obj["People"]] if obj.get("People") is not None else None,
            "Studios": [NameLongIdPair.from_dict(_item) for _item in obj["Studios"]] if obj.get("Studios") is not None else None,
            "GenreItems": [NameLongIdPair.from_dict(_item) for _item in obj["GenreItems"]] if obj.get("GenreItems") is not None else None,
            "TagItems": [NameLongIdPair.from_dict(_item) for _item in obj["TagItems"]] if obj.get("TagItems") is not None else None,
            "ParentLogoItemId": obj.get("ParentLogoItemId"),
            "ParentBackdropItemId": obj.get("ParentBackdropItemId"),
            "ParentBackdropImageTags": obj.get("ParentBackdropImageTags"),
            "LocalTrailerCount": obj.get("LocalTrailerCount"),
            "UserData": UserItemDataDto.from_dict(obj["UserData"]) if obj.get("UserData") is not None else None,
            "RecursiveItemCount": obj.get("RecursiveItemCount"),
            "ChildCount": obj.get("ChildCount"),
            "SeriesName": obj.get("SeriesName"),
            "SeriesId": obj.get("SeriesId"),
            "SeasonId": obj.get("SeasonId"),
            "SpecialFeatureCount": obj.get("SpecialFeatureCount"),
            "DisplayPreferencesId": obj.get("DisplayPreferencesId"),
            "Status": obj.get("Status"),
            "AirDays": obj.get("AirDays"),
            "Tags": obj.get("Tags"),
            "PrimaryImageAspectRatio": obj.get("PrimaryImageAspectRatio"),
            "Artists": obj.get("Artists"),
            "ArtistItems": [NameIdPair.from_dict(_item) for _item in obj["ArtistItems"]] if obj.get("ArtistItems") is not None else None,
            "Composers": [NameIdPair.from_dict(_item) for _item in obj["Composers"]] if obj.get("Composers") is not None else None,
            "Album": obj.get("Album"),
            "CollectionType": obj.get("CollectionType"),
            "DisplayOrder": obj.get("DisplayOrder"),
            "AlbumId": obj.get("AlbumId"),
            "AlbumPrimaryImageTag": obj.get("AlbumPrimaryImageTag"),
            "SeriesPrimaryImageTag": obj.get("SeriesPrimaryImageTag"),
            "AlbumArtist": obj.get("AlbumArtist"),
            "AlbumArtists": [NameIdPair.from_dict(_item) for _item in obj["AlbumArtists"]] if obj.get("AlbumArtists") is not None else None,
            "SeasonName": obj.get("SeasonName"),
            "MediaStreams": [MediaStream.from_dict(_item) for _item in obj["MediaStreams"]] if obj.get("MediaStreams") is not None else None,
            "PartCount": obj.get("PartCount"),
            "ImageTags": obj.get("ImageTags"),
            "BackdropImageTags": obj.get("BackdropImageTags"),
            "ParentLogoImageTag": obj.get("ParentLogoImageTag"),
            "SeriesStudio": obj.get("SeriesStudio"),
            "PrimaryImageItemId": obj.get("PrimaryImageItemId"),
            "PrimaryImageTag": obj.get("PrimaryImageTag"),
            "ParentThumbItemId": obj.get("ParentThumbItemId"),
            "ParentThumbImageTag": obj.get("ParentThumbImageTag"),
            "Chapters": [ChapterInfo.from_dict(_item) for _item in obj["Chapters"]] if obj.get("Chapters") is not None else None,
            "LocationType": obj.get("LocationType"),
            "MediaType": obj.get("MediaType"),
            "EndDate": obj.get("EndDate"),
            "LockedFields": obj.get("LockedFields"),
            "LockData": obj.get("LockData"),
            "Width": obj.get("Width"),
            "Height": obj.get("Height"),
            "CameraMake": obj.get("CameraMake"),
            "CameraModel": obj.get("CameraModel"),
            "Software": obj.get("Software"),
            "ExposureTime": obj.get("ExposureTime"),
            "FocalLength": obj.get("FocalLength"),
            "ImageOrientation": obj.get("ImageOrientation"),
            "Aperture": obj.get("Aperture"),
            "ShutterSpeed": obj.get("ShutterSpeed"),
            "Latitude": obj.get("Latitude"),
            "Longitude": obj.get("Longitude"),
            "Altitude": obj.get("Altitude"),
            "IsoSpeedRating": obj.get("IsoSpeedRating"),
            "SeriesTimerId": obj.get("SeriesTimerId"),
            "ChannelPrimaryImageTag": obj.get("ChannelPrimaryImageTag"),
            "StartDate": obj.get("StartDate"),
            "CompletionPercentage": obj.get("CompletionPercentage"),
            "IsRepeat": obj.get("IsRepeat"),
            "IsNew": obj.get("IsNew"),
            "EpisodeTitle": obj.get("EpisodeTitle"),
            "IsMovie": obj.get("IsMovie"),
            "IsSports": obj.get("IsSports"),
            "IsSeries": obj.get("IsSeries"),
            "IsLive": obj.get("IsLive"),
            "IsNews": obj.get("IsNews"),
            "IsKids": obj.get("IsKids"),
            "IsPremiere": obj.get("IsPremiere"),
            "TimerType": obj.get("TimerType"),
            "Disabled": obj.get("Disabled"),
            "ManagementId": obj.get("ManagementId"),
            "TimerId": obj.get("TimerId"),
            "CurrentProgram": BaseItemDto.from_dict(obj["CurrentProgram"]) if obj.get("CurrentProgram") is not None else None,
            "MovieCount": obj.get("MovieCount"),
            "SeriesCount": obj.get("SeriesCount"),
            "AlbumCount": obj.get("AlbumCount"),
            "SongCount": obj.get("SongCount"),
            "MusicVideoCount": obj.get("MusicVideoCount"),
            "Subviews": obj.get("Subviews"),
            "ListingsProviderId": obj.get("ListingsProviderId"),
            "ListingsChannelId": obj.get("ListingsChannelId"),
            "ListingsPath": obj.get("ListingsPath"),
            "ListingsId": obj.get("ListingsId"),
            "ListingsChannelName": obj.get("ListingsChannelName"),
            "ListingsChannelNumber": obj.get("ListingsChannelNumber"),
            "AffiliateCallSign": obj.get("AffiliateCallSign")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
BaseItemDto.model_rebuild(raise_errors=False)

