# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.image_saving_convention import ImageSavingConvention
from embyapi.models.net_sockets_address_family import NetSocketsAddressFamily
from embyapi.models.path_substitution import PathSubstitution
from embyapi.models.proxy_header_mode import ProxyHeaderMode
from typing import Optional, Set
from typing_extensions import Self

class ServerConfiguration(BaseModel):
    """
    Represents the server configuration.  
    """ # noqa: E501
    enable_upn_p: Optional[StrictBool] = Field(default=None, description="A value indicating whether \\[enable u pn p\\].", alias="EnableUPnP")
    public_port: Optional[StrictInt] = Field(default=None, description="The public mapped port.", alias="PublicPort")
    public_https_port: Optional[StrictInt] = Field(default=None, description="The public HTTPS port.", alias="PublicHttpsPort")
    http_server_port_number: Optional[StrictInt] = Field(default=None, description="The HTTP server port number.", alias="HttpServerPortNumber")
    https_port_number: Optional[StrictInt] = Field(default=None, description="The HTTPS server port number.", alias="HttpsPortNumber")
    enable_https: Optional[StrictBool] = Field(default=None, description="A value indicating whether \\[use HTTPS\\].", alias="EnableHttps")
    certificate_path: Optional[StrictStr] = Field(default=None, description="The value pointing to the file system where the ssl certiifcate is located..", alias="CertificatePath")
    certificate_password: Optional[StrictStr] = Field(default=None, alias="CertificatePassword")
    is_port_authorized: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is port authorized.", alias="IsPortAuthorized")
    auto_run_web_app: Optional[StrictBool] = Field(default=None, alias="AutoRunWebApp")
    enable_remote_access: Optional[StrictBool] = Field(default=None, alias="EnableRemoteAccess")
    log_all_query_times: Optional[StrictBool] = Field(default=None, alias="LogAllQueryTimes")
    enable_case_sensitive_item_ids: Optional[StrictBool] = Field(default=None, description="A value indicating whether \\[enable case sensitive item ids\\].", alias="EnableCaseSensitiveItemIds")
    metadata_path: Optional[StrictStr] = Field(default=None, description="The metadata path.", alias="MetadataPath")
    metadata_network_path: Optional[StrictStr] = Field(default=None, alias="MetadataNetworkPath")
    preferred_metadata_language: Optional[StrictStr] = Field(default=None, description="The preferred metadata language.", alias="PreferredMetadataLanguage")
    metadata_country_code: Optional[StrictStr] = Field(default=None, description="The metadata country code.", alias="MetadataCountryCode")
    sort_remove_words: Optional[List[StrictStr]] = Field(default=None, description="Words to be removed from strings to create a sort name", alias="SortRemoveWords")
    library_monitor_delay_seconds: Optional[StrictInt] = Field(default=None, description="The delay in seconds that we will wait after a file system change to try and discover what has been added/removed Some delay is necessary with some items because their creation is not atomic.  It involves the creation of several different directories and files.", alias="LibraryMonitorDelaySeconds")
    enable_dashboard_response_caching: Optional[StrictBool] = Field(default=None, description="A value indicating whether \\[enable dashboard response caching\\]. Allows potential contributors without visual studio to modify production dashboard code and test changes.", alias="EnableDashboardResponseCaching")
    dashboard_source_path: Optional[StrictStr] = Field(default=None, description="Allows the dashboard to be served from a custom path.", alias="DashboardSourcePath")
    image_saving_convention: Optional[ImageSavingConvention] = Field(default=None, alias="ImageSavingConvention")
    enable_automatic_restart: Optional[StrictBool] = Field(default=None, alias="EnableAutomaticRestart")
    server_name: Optional[StrictStr] = Field(default=None, alias="ServerName")
    preferred_detected_remote_address_family: Optional[NetSocketsAddressFamily] = Field(default=None, alias="PreferredDetectedRemoteAddressFamily")
    wan_ddns: Optional[StrictStr] = Field(default=None, alias="WanDdns")
    ui_culture: Optional[StrictStr] = Field(default=None, alias="UICulture")
    remote_client_bitrate_limit: Optional[StrictInt] = Field(default=None, alias="RemoteClientBitrateLimit")
    local_network_subnets: Optional[List[StrictStr]] = Field(default=None, alias="LocalNetworkSubnets")
    local_network_addresses: Optional[List[StrictStr]] = Field(default=None, alias="LocalNetworkAddresses")
    enable_external_content_in_suggestions: Optional[StrictBool] = Field(default=None, alias="EnableExternalContentInSuggestions")
    require_https: Optional[StrictBool] = Field(default=None, alias="RequireHttps")
    is_behind_proxy: Optional[StrictBool] = Field(default=None, alias="IsBehindProxy")
    remote_ip_filter: Optional[List[StrictStr]] = Field(default=None, alias="RemoteIPFilter")
    is_remote_ip_filter_blacklist: Optional[StrictBool] = Field(default=None, alias="IsRemoteIPFilterBlacklist")
    image_extraction_timeout_ms: Optional[StrictInt] = Field(default=None, alias="ImageExtractionTimeoutMs")
    path_substitutions: Optional[List[PathSubstitution]] = Field(default=None, alias="PathSubstitutions")
    uninstalled_plugins: Optional[List[StrictStr]] = Field(default=None, alias="UninstalledPlugins")
    collapse_video_folders: Optional[StrictBool] = Field(default=None, alias="CollapseVideoFolders")
    enable_original_track_titles: Optional[StrictBool] = Field(default=None, alias="EnableOriginalTrackTitles")
    vacuum_database_on_startup: Optional[StrictBool] = Field(default=None, alias="VacuumDatabaseOnStartup")
    simultaneous_stream_limit: Optional[StrictInt] = Field(default=None, alias="SimultaneousStreamLimit")
    database_cache_size_mb: Optional[StrictInt] = Field(default=None, alias="DatabaseCacheSizeMB")
    enable_sq_lite_mmio: Optional[StrictBool] = Field(default=None, alias="EnableSqLiteMmio")
    playlists_upgraded_to_m3_u: Optional[StrictBool] = Field(default=None, alias="PlaylistsUpgradedToM3U")
    image_extractor_upgraded1: Optional[StrictBool] = Field(default=None, alias="ImageExtractorUpgraded1")
    enable_people_letter_sub_folders: Optional[StrictBool] = Field(default=None, alias="EnablePeopleLetterSubFolders")
    optimize_database_on_shutdown: Optional[StrictBool] = Field(default=None, alias="OptimizeDatabaseOnShutdown")
    database_analysis_limit: Optional[StrictInt] = Field(default=None, alias="DatabaseAnalysisLimit")
    disable_async_io: Optional[StrictBool] = Field(default=None, alias="DisableAsyncIO")
    migrated_to_user_item_shares7: Optional[StrictBool] = Field(default=None, alias="MigratedToUserItemShares7")
    migrated_library_options_to_db: Optional[StrictBool] = Field(default=None, alias="MigratedLibraryOptionsToDb")
    allow_legacy_local_network_password: Optional[StrictBool] = Field(default=None, alias="AllowLegacyLocalNetworkPassword")
    enable_saved_metadata_for_people: Optional[StrictBool] = Field(default=None, alias="EnableSavedMetadataForPeople")
    tv_channels_refreshed: Optional[StrictBool] = Field(default=None, alias="TvChannelsRefreshed")
    proxy_header_mode: Optional[ProxyHeaderMode] = Field(default=None, alias="ProxyHeaderMode")
    enable_debug_level_logging: Optional[StrictBool] = Field(default=None, description="A value indicating whether \\[enable debug level logging\\].", alias="EnableDebugLevelLogging")
    revert_debug_logging: Optional[StrictStr] = Field(default=None, alias="RevertDebugLogging")
    enable_auto_update: Optional[StrictBool] = Field(default=None, description="Enable automatically and silently updating of the application", alias="EnableAutoUpdate")
    log_file_retention_days: Optional[StrictInt] = Field(default=None, description="The number of days we should retain log files", alias="LogFileRetentionDays")
    run_at_startup: Optional[StrictBool] = Field(default=None, description="A value indicating whether \\[run at startup\\].", alias="RunAtStartup")
    is_startup_wizard_completed: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is first run.", alias="IsStartupWizardCompleted")
    cache_path: Optional[StrictStr] = Field(default=None, description="The cache path.", alias="CachePath")
    __properties: ClassVar[List[str]] = ["EnableUPnP", "PublicPort", "PublicHttpsPort", "HttpServerPortNumber", "HttpsPortNumber", "EnableHttps", "CertificatePath", "CertificatePassword", "IsPortAuthorized", "AutoRunWebApp", "EnableRemoteAccess", "LogAllQueryTimes", "EnableCaseSensitiveItemIds", "MetadataPath", "MetadataNetworkPath", "PreferredMetadataLanguage", "MetadataCountryCode", "SortRemoveWords", "LibraryMonitorDelaySeconds", "EnableDashboardResponseCaching", "DashboardSourcePath", "ImageSavingConvention", "EnableAutomaticRestart", "ServerName", "PreferredDetectedRemoteAddressFamily", "WanDdns", "UICulture", "RemoteClientBitrateLimit", "LocalNetworkSubnets", "LocalNetworkAddresses", "EnableExternalContentInSuggestions", "RequireHttps", "IsBehindProxy", "RemoteIPFilter", "IsRemoteIPFilterBlacklist", "ImageExtractionTimeoutMs", "PathSubstitutions", "UninstalledPlugins", "CollapseVideoFolders", "EnableOriginalTrackTitles", "VacuumDatabaseOnStartup", "SimultaneousStreamLimit", "DatabaseCacheSizeMB", "EnableSqLiteMmio", "PlaylistsUpgradedToM3U", "ImageExtractorUpgraded1", "EnablePeopleLetterSubFolders", "OptimizeDatabaseOnShutdown", "DatabaseAnalysisLimit", "DisableAsyncIO", "MigratedToUserItemShares7", "MigratedLibraryOptionsToDb", "AllowLegacyLocalNetworkPassword", "EnableSavedMetadataForPeople", "TvChannelsRefreshed", "ProxyHeaderMode", "EnableDebugLevelLogging", "RevertDebugLogging", "EnableAutoUpdate", "LogFileRetentionDays", "RunAtStartup", "IsStartupWizardCompleted", "CachePath"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServerConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in path_substitutions (list)
        _items = []
        if self.path_substitutions:
            for _item in self.path_substitutions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['PathSubstitutions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServerConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "EnableUPnP": obj.get("EnableUPnP"),
            "PublicPort": obj.get("PublicPort"),
            "PublicHttpsPort": obj.get("PublicHttpsPort"),
            "HttpServerPortNumber": obj.get("HttpServerPortNumber"),
            "HttpsPortNumber": obj.get("HttpsPortNumber"),
            "EnableHttps": obj.get("EnableHttps"),
            "CertificatePath": obj.get("CertificatePath"),
            "CertificatePassword": obj.get("CertificatePassword"),
            "IsPortAuthorized": obj.get("IsPortAuthorized"),
            "AutoRunWebApp": obj.get("AutoRunWebApp"),
            "EnableRemoteAccess": obj.get("EnableRemoteAccess"),
            "LogAllQueryTimes": obj.get("LogAllQueryTimes"),
            "EnableCaseSensitiveItemIds": obj.get("EnableCaseSensitiveItemIds"),
            "MetadataPath": obj.get("MetadataPath"),
            "MetadataNetworkPath": obj.get("MetadataNetworkPath"),
            "PreferredMetadataLanguage": obj.get("PreferredMetadataLanguage"),
            "MetadataCountryCode": obj.get("MetadataCountryCode"),
            "SortRemoveWords": obj.get("SortRemoveWords"),
            "LibraryMonitorDelaySeconds": obj.get("LibraryMonitorDelaySeconds"),
            "EnableDashboardResponseCaching": obj.get("EnableDashboardResponseCaching"),
            "DashboardSourcePath": obj.get("DashboardSourcePath"),
            "ImageSavingConvention": obj.get("ImageSavingConvention"),
            "EnableAutomaticRestart": obj.get("EnableAutomaticRestart"),
            "ServerName": obj.get("ServerName"),
            "PreferredDetectedRemoteAddressFamily": obj.get("PreferredDetectedRemoteAddressFamily"),
            "WanDdns": obj.get("WanDdns"),
            "UICulture": obj.get("UICulture"),
            "RemoteClientBitrateLimit": obj.get("RemoteClientBitrateLimit"),
            "LocalNetworkSubnets": obj.get("LocalNetworkSubnets"),
            "LocalNetworkAddresses": obj.get("LocalNetworkAddresses"),
            "EnableExternalContentInSuggestions": obj.get("EnableExternalContentInSuggestions"),
            "RequireHttps": obj.get("RequireHttps"),
            "IsBehindProxy": obj.get("IsBehindProxy"),
            "RemoteIPFilter": obj.get("RemoteIPFilter"),
            "IsRemoteIPFilterBlacklist": obj.get("IsRemoteIPFilterBlacklist"),
            "ImageExtractionTimeoutMs": obj.get("ImageExtractionTimeoutMs"),
            "PathSubstitutions": [PathSubstitution.from_dict(_item) for _item in obj["PathSubstitutions"]] if obj.get("PathSubstitutions") is not None else None,
            "UninstalledPlugins": obj.get("UninstalledPlugins"),
            "CollapseVideoFolders": obj.get("CollapseVideoFolders"),
            "EnableOriginalTrackTitles": obj.get("EnableOriginalTrackTitles"),
            "VacuumDatabaseOnStartup": obj.get("VacuumDatabaseOnStartup"),
            "SimultaneousStreamLimit": obj.get("SimultaneousStreamLimit"),
            "DatabaseCacheSizeMB": obj.get("DatabaseCacheSizeMB"),
            "EnableSqLiteMmio": obj.get("EnableSqLiteMmio"),
            "PlaylistsUpgradedToM3U": obj.get("PlaylistsUpgradedToM3U"),
            "ImageExtractorUpgraded1": obj.get("ImageExtractorUpgraded1"),
            "EnablePeopleLetterSubFolders": obj.get("EnablePeopleLetterSubFolders"),
            "OptimizeDatabaseOnShutdown": obj.get("OptimizeDatabaseOnShutdown"),
            "DatabaseAnalysisLimit": obj.get("DatabaseAnalysisLimit"),
            "DisableAsyncIO": obj.get("DisableAsyncIO"),
            "MigratedToUserItemShares7": obj.get("MigratedToUserItemShares7"),
            "MigratedLibraryOptionsToDb": obj.get("MigratedLibraryOptionsToDb"),
            "AllowLegacyLocalNetworkPassword": obj.get("AllowLegacyLocalNetworkPassword"),
            "EnableSavedMetadataForPeople": obj.get("EnableSavedMetadataForPeople"),
            "TvChannelsRefreshed": obj.get("TvChannelsRefreshed"),
            "ProxyHeaderMode": obj.get("ProxyHeaderMode"),
            "EnableDebugLevelLogging": obj.get("EnableDebugLevelLogging"),
            "RevertDebugLogging": obj.get("RevertDebugLogging"),
            "EnableAutoUpdate": obj.get("EnableAutoUpdate"),
            "LogFileRetentionDays": obj.get("LogFileRetentionDays"),
            "RunAtStartup": obj.get("RunAtStartup"),
            "IsStartupWizardCompleted": obj.get("IsStartupWizardCompleted"),
            "CachePath": obj.get("CachePath")
        })
        return _obj


