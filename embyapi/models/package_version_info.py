# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.package_version_class import PackageVersionClass
from typing import Optional, Set
from typing_extensions import Self

class PackageVersionInfo(BaseModel):
    """
    Class PackageVersionInfo  
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name.")
    guid: Optional[StrictStr] = Field(default=None, description="The guid.")
    version_str: Optional[StrictStr] = Field(default=None, description="The version STR.", alias="versionStr")
    classification: Optional[PackageVersionClass] = None
    description: Optional[StrictStr] = Field(default=None, description="The description.")
    required_version_str: Optional[StrictStr] = Field(default=None, description="The required version STR.", alias="requiredVersionStr")
    source_url: Optional[StrictStr] = Field(default=None, description="The source URL.", alias="sourceUrl")
    checksum: Optional[StrictStr] = Field(default=None, description="The source URL.")
    target_filename: Optional[StrictStr] = Field(default=None, description="The target filename.", alias="targetFilename")
    info_url: Optional[StrictStr] = Field(default=None, alias="infoUrl")
    runtimes: Optional[StrictStr] = None
    timestamp: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["name", "guid", "versionStr", "classification", "description", "requiredVersionStr", "sourceUrl", "checksum", "targetFilename", "infoUrl", "runtimes", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageVersionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp is None and "timestamp" in self.model_fields_set:
            _dict['timestamp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageVersionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "guid": obj.get("guid"),
            "versionStr": obj.get("versionStr"),
            "classification": obj.get("classification"),
            "description": obj.get("description"),
            "requiredVersionStr": obj.get("requiredVersionStr"),
            "sourceUrl": obj.get("sourceUrl"),
            "checksum": obj.get("checksum"),
            "targetFilename": obj.get("targetFilename"),
            "infoUrl": obj.get("infoUrl"),
            "runtimes": obj.get("runtimes"),
            "timestamp": obj.get("timestamp")
        })
        return _obj


