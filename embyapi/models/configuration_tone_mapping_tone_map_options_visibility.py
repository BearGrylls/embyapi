# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.operating_system import OperatingSystem
from typing import Optional, Set
from typing_extensions import Self

class ConfigurationToneMappingToneMapOptionsVisibility(BaseModel):
    """
    ConfigurationToneMappingToneMapOptionsVisibility
    """ # noqa: E501
    show_advanced: Optional[StrictBool] = Field(default=None, alias="ShowAdvanced")
    is_software_tone_mapping_available: Optional[StrictBool] = Field(default=None, alias="IsSoftwareToneMappingAvailable")
    is_any_hardware_tone_mapping_available: Optional[StrictBool] = Field(default=None, alias="IsAnyHardwareToneMappingAvailable")
    show_nvidia_options: Optional[StrictBool] = Field(default=None, alias="ShowNvidiaOptions")
    show_quick_sync_options: Optional[StrictBool] = Field(default=None, alias="ShowQuickSyncOptions")
    show_vaapi_options: Optional[StrictBool] = Field(default=None, alias="ShowVaapiOptions")
    is_open_cl_available: Optional[StrictBool] = Field(default=None, alias="IsOpenClAvailable")
    is_open_cl_super_t_available: Optional[StrictBool] = Field(default=None, alias="IsOpenClSuperTAvailable")
    is_vaapi_native_available: Optional[StrictBool] = Field(default=None, alias="IsVaapiNativeAvailable")
    is_quick_sync_native_available: Optional[StrictBool] = Field(default=None, alias="IsQuickSyncNativeAvailable")
    operating_system: Optional[OperatingSystem] = Field(default=None, alias="OperatingSystem")
    __properties: ClassVar[List[str]] = ["ShowAdvanced", "IsSoftwareToneMappingAvailable", "IsAnyHardwareToneMappingAvailable", "ShowNvidiaOptions", "ShowQuickSyncOptions", "ShowVaapiOptions", "IsOpenClAvailable", "IsOpenClSuperTAvailable", "IsVaapiNativeAvailable", "IsQuickSyncNativeAvailable", "OperatingSystem"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigurationToneMappingToneMapOptionsVisibility from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigurationToneMappingToneMapOptionsVisibility from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ShowAdvanced": obj.get("ShowAdvanced"),
            "IsSoftwareToneMappingAvailable": obj.get("IsSoftwareToneMappingAvailable"),
            "IsAnyHardwareToneMappingAvailable": obj.get("IsAnyHardwareToneMappingAvailable"),
            "ShowNvidiaOptions": obj.get("ShowNvidiaOptions"),
            "ShowQuickSyncOptions": obj.get("ShowQuickSyncOptions"),
            "ShowVaapiOptions": obj.get("ShowVaapiOptions"),
            "IsOpenClAvailable": obj.get("IsOpenClAvailable"),
            "IsOpenClSuperTAvailable": obj.get("IsOpenClSuperTAvailable"),
            "IsVaapiNativeAvailable": obj.get("IsVaapiNativeAvailable"),
            "IsQuickSyncNativeAvailable": obj.get("IsQuickSyncNativeAvailable"),
            "OperatingSystem": obj.get("OperatingSystem")
        })
        return _obj


