# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from embyapi.models.extended_video_sub_types import ExtendedVideoSubTypes
from embyapi.models.extended_video_types import ExtendedVideoTypes
from embyapi.models.media_protocol import MediaProtocol
from embyapi.models.media_stream_type import MediaStreamType
from embyapi.models.subtitle_delivery_method import SubtitleDeliveryMethod
from embyapi.models.subtitle_location_type import SubtitleLocationType
from typing import Optional, Set
from typing_extensions import Self

class MediaStream(BaseModel):
    """
    MediaStream information.      MediaStream itens are typically included in a `MediaBrowser.Model.Dto.MediaSourceInfo` object.      `MediaBrowser.Model.Dto.MediaSourceInfo.MediaStreams`  
    """ # noqa: E501
    codec: Optional[StrictStr] = Field(default=None, description="The codec.    Probe Field: `codec_name`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`    Related Enums: `T:Emby.Media.Model.Enums.VideoMediaTypes`, `Emby.Media.Model.Enums.AudioMediaTypes`, `Emby.Media.Model.Enums.SubtitleMediaTypes`.", alias="Codec")
    codec_tag: Optional[StrictStr] = Field(default=None, description="The codec tag.    Probe Field: `codec_tag`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.", alias="CodecTag")
    language: Optional[StrictStr] = Field(default=None, description="The language.    Probe Field: `tags[\"language\"]`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.", alias="Language")
    color_transfer: Optional[StrictStr] = Field(default=None, description="The color transfer characteristics.    Probe Field: `color_transfer`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`    Related Enum: `Emby.Media.Model.Enums.ColorTransfers`.", alias="ColorTransfer")
    color_primaries: Optional[StrictStr] = Field(default=None, description="The chromaticity coordinates of the source primaries.    Probe Field: `color_primaries`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`    Related Enum: `Emby.Media.Model.Enums.ColorPrimaries`.", alias="ColorPrimaries")
    color_space: Optional[StrictStr] = Field(default=None, description="The YUV colorspace type.    Probe Field: `color_space`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`    Related Enum: `Emby.Media.Model.Enums.ColorSpaces`.", alias="ColorSpace")
    comment: Optional[StrictStr] = Field(default=None, description="The comment.    Probe Field: `tags[\"comment\"]`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.", alias="Comment")
    stream_start_time_ticks: Optional[StrictInt] = Field(default=None, description="The start time of the stream.    Probe Field: `start_time`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.    Actual type: `System.TimeSpan`.", alias="StreamStartTimeTicks")
    time_base: Optional[StrictStr] = Field(default=None, description="The time\\-base.    Probe Field: `time_base`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.    Actual type: `Emby.Media.Model.Types.Rational`.", alias="TimeBase")
    title: Optional[StrictStr] = Field(default=None, description="The title.    Probe Field: `tags[\"title\"]`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.", alias="Title")
    extradata: Optional[StrictStr] = Field(default=None, description="The extradata.    Probe Field: `extradata`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.    Currently, this value is only parsed for subtitle streams with codec `Emby.Media.Model.Enums.SubtitleMediaTypes.dvb_teletext`.", alias="Extradata")
    video_range: Optional[StrictStr] = Field(default=None, alias="VideoRange")
    display_title: Optional[StrictStr] = Field(default=None, description="The display title.    Custom property set by the application.", alias="DisplayTitle")
    display_language: Optional[StrictStr] = Field(default=None, description="The display language.    Custom property set by the application.", alias="DisplayLanguage")
    nal_length_size: Optional[StrictStr] = Field(default=None, description="The nal length size.    Probe Field: `nal_length_size`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video` of type `Emby.Media.Model.Enums.VideoMediaTypes.h264`.    Actual type: `System.Int32`.", alias="NalLengthSize")
    is_interlaced: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is interlaced.    Probe Field: `field_order` \\!\\= `progressive`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.", alias="IsInterlaced")
    is_avc: Optional[StrictBool] = Field(default=None, alias="IsAVC")
    channel_layout: Optional[StrictStr] = Field(default=None, description="The channel layout.    Probe Field: `channel_layout`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`    Related Enum: `MediaBrowser.Model.Entities.MediaStream.ChannelLayout`.", alias="ChannelLayout")
    bit_rate: Optional[StrictInt] = Field(default=None, description="The bit rate.    Probe Field: `bit_rate`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`.    THIS VALUE IS PROCESSED BY CUSTOM LOGIC AND DOES NOT NECESSARILY MATCH FFPROBE RESULTS\\!", alias="BitRate")
    bit_depth: Optional[StrictInt] = Field(default=None, description="The bit depth.    Probe Field: `bits_per_sample` or `bits_per_raw_sample`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`.", alias="BitDepth")
    ref_frames: Optional[StrictInt] = Field(default=None, description="The reference frames.    Probe Field: `refs`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.", alias="RefFrames")
    rotation: Optional[StrictInt] = Field(default=None, alias="Rotation")
    channels: Optional[StrictInt] = Field(default=None, description="The audio channel count.    Probe Field: `channels`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`.", alias="Channels")
    sample_rate: Optional[StrictInt] = Field(default=None, description="The sample rate.    Probe Field: `sample_rate`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Audio`    Related Enum: `Emby.Media.Model.Enums.SampleRates`.", alias="SampleRate")
    is_default: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is default.    Probe Field: `disposition[\"default\"]`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.", alias="IsDefault")
    is_forced: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is forced.    Probe Field: `disposition[\"forced\"]`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.", alias="IsForced")
    is_hearing_impaired: Optional[StrictBool] = Field(default=None, alias="IsHearingImpaired")
    height: Optional[StrictInt] = Field(default=None, description="The height.    Probe Field: `height`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.", alias="Height")
    width: Optional[StrictInt] = Field(default=None, description="The width.    Probe Field: `width`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.", alias="Width")
    average_frame_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The average frame rate..    Probe Field: `avg_frame_rate`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.    Actual type: `Emby.Media.Model.Types.Rational`.", alias="AverageFrameRate")
    real_frame_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The real frame rate..    Probe Field: `r_frame_rate`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.    Actual type: `Emby.Media.Model.Types.Rational`.", alias="RealFrameRate")
    profile: Optional[StrictStr] = Field(default=None, description="The profile.    Probe Field: `profile`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`    Related Enums: `Emby.Media.Model.Enums.AacProfiles`, `Emby.Media.Model.Enums.AvcProfiles`, `Emby.Media.Model.Enums.H263Profiles`, `Emby.Media.Model.Enums.HevcProfiles`, `Emby.Media.Model.Enums.Mpeg2Profiles`,`Emby.Media.Model.Enums.Vc1Profiles`, `Emby.Media.Model.Enums.Mpeg4Profiles`, `Emby.Media.Model.Enums.Vp8Profiles`, `Emby.Media.Model.Enums.Vp9Profiles`.", alias="Profile")
    type: Optional[MediaStreamType] = Field(default=None, alias="Type")
    aspect_ratio: Optional[StrictStr] = Field(default=None, description="The aspect ratio.    Probe Field: `display_aspect_ratio`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.    Actual type: `Emby.Media.Model.Types.Rational`.", alias="AspectRatio")
    index: Optional[StrictInt] = Field(default=None, description="The index of the stream inside its container.    Probe Field: `index`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`, `MediaBrowser.Model.Entities.MediaStreamType.Audio`, `MediaBrowser.Model.Entities.MediaStreamType.Subtitle`.", alias="Index")
    is_external: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is external.    Custom property set by the application.", alias="IsExternal")
    delivery_method: Optional[SubtitleDeliveryMethod] = Field(default=None, alias="DeliveryMethod")
    delivery_url: Optional[StrictStr] = Field(default=None, description="The delivery URL.    Custom property set by the application.", alias="DeliveryUrl")
    is_external_url: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is external URL.    Custom property set by the application.", alias="IsExternalUrl")
    is_text_subtitle_stream: Optional[StrictBool] = Field(default=None, alias="IsTextSubtitleStream")
    supports_external_stream: Optional[StrictBool] = Field(default=None, description="A value indicating whether \\[supports external stream\\].", alias="SupportsExternalStream")
    path: Optional[StrictStr] = Field(default=None, description="The filename.", alias="Path")
    protocol: Optional[MediaProtocol] = Field(default=None, alias="Protocol")
    pixel_format: Optional[StrictStr] = Field(default=None, description="The pixel format.    Probe Field: `pix_fmt`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`.    Actual type: `MediaBrowser.Model.Entities.MediaStream.PixelFormat`.", alias="PixelFormat")
    level: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The codec level.    Probe Field: `level`    Applies to: `MediaBrowser.Model.Entities.MediaStreamType.Video`    Related Enums: `Emby.Media.Model.Enums.AvcLevels`, `Emby.Media.Model.Enums.H263Levels`, `Emby.Media.Model.Enums.HevcLevels`, `Emby.Media.Model.Enums.Mpeg2Levels`,`Emby.Media.Model.Enums.Vc1Levels`, `Emby.Media.Model.Enums.Mpeg4Levels`, `Emby.Media.Model.Enums.Vp8Levels`, `Emby.Media.Model.Enums.Vp9Levels`.", alias="Level")
    is_anamorphic: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is anamorphic.", alias="IsAnamorphic")
    extended_video_type: Optional[ExtendedVideoTypes] = Field(default=None, alias="ExtendedVideoType")
    extended_video_sub_type: Optional[ExtendedVideoSubTypes] = Field(default=None, alias="ExtendedVideoSubType")
    extended_video_sub_type_description: Optional[StrictStr] = Field(default=None, description="The extended video sub\\-type description.", alias="ExtendedVideoSubTypeDescription")
    item_id: Optional[StrictStr] = Field(default=None, description="Used only by our Windows app. Not used by Emby Server.", alias="ItemId")
    server_id: Optional[StrictStr] = Field(default=None, description="Used only by our Windows app. Not used by Emby Server.", alias="ServerId")
    attachment_size: Optional[StrictInt] = Field(default=None, description="The size of the attachment.", alias="AttachmentSize")
    mime_type: Optional[StrictStr] = Field(default=None, description="The type of the MIME.", alias="MimeType")
    subtitle_location_type: Optional[SubtitleLocationType] = Field(default=None, alias="SubtitleLocationType")
    __properties: ClassVar[List[str]] = ["Codec", "CodecTag", "Language", "ColorTransfer", "ColorPrimaries", "ColorSpace", "Comment", "StreamStartTimeTicks", "TimeBase", "Title", "Extradata", "VideoRange", "DisplayTitle", "DisplayLanguage", "NalLengthSize", "IsInterlaced", "IsAVC", "ChannelLayout", "BitRate", "BitDepth", "RefFrames", "Rotation", "Channels", "SampleRate", "IsDefault", "IsForced", "IsHearingImpaired", "Height", "Width", "AverageFrameRate", "RealFrameRate", "Profile", "Type", "AspectRatio", "Index", "IsExternal", "DeliveryMethod", "DeliveryUrl", "IsExternalUrl", "IsTextSubtitleStream", "SupportsExternalStream", "Path", "Protocol", "PixelFormat", "Level", "IsAnamorphic", "ExtendedVideoType", "ExtendedVideoSubType", "ExtendedVideoSubTypeDescription", "ItemId", "ServerId", "AttachmentSize", "MimeType", "SubtitleLocationType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MediaStream from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if stream_start_time_ticks (nullable) is None
        # and model_fields_set contains the field
        if self.stream_start_time_ticks is None and "stream_start_time_ticks" in self.model_fields_set:
            _dict['StreamStartTimeTicks'] = None

        # set to None if is_avc (nullable) is None
        # and model_fields_set contains the field
        if self.is_avc is None and "is_avc" in self.model_fields_set:
            _dict['IsAVC'] = None

        # set to None if bit_rate (nullable) is None
        # and model_fields_set contains the field
        if self.bit_rate is None and "bit_rate" in self.model_fields_set:
            _dict['BitRate'] = None

        # set to None if bit_depth (nullable) is None
        # and model_fields_set contains the field
        if self.bit_depth is None and "bit_depth" in self.model_fields_set:
            _dict['BitDepth'] = None

        # set to None if ref_frames (nullable) is None
        # and model_fields_set contains the field
        if self.ref_frames is None and "ref_frames" in self.model_fields_set:
            _dict['RefFrames'] = None

        # set to None if rotation (nullable) is None
        # and model_fields_set contains the field
        if self.rotation is None and "rotation" in self.model_fields_set:
            _dict['Rotation'] = None

        # set to None if channels (nullable) is None
        # and model_fields_set contains the field
        if self.channels is None and "channels" in self.model_fields_set:
            _dict['Channels'] = None

        # set to None if sample_rate (nullable) is None
        # and model_fields_set contains the field
        if self.sample_rate is None and "sample_rate" in self.model_fields_set:
            _dict['SampleRate'] = None

        # set to None if height (nullable) is None
        # and model_fields_set contains the field
        if self.height is None and "height" in self.model_fields_set:
            _dict['Height'] = None

        # set to None if width (nullable) is None
        # and model_fields_set contains the field
        if self.width is None and "width" in self.model_fields_set:
            _dict['Width'] = None

        # set to None if average_frame_rate (nullable) is None
        # and model_fields_set contains the field
        if self.average_frame_rate is None and "average_frame_rate" in self.model_fields_set:
            _dict['AverageFrameRate'] = None

        # set to None if real_frame_rate (nullable) is None
        # and model_fields_set contains the field
        if self.real_frame_rate is None and "real_frame_rate" in self.model_fields_set:
            _dict['RealFrameRate'] = None

        # set to None if is_external_url (nullable) is None
        # and model_fields_set contains the field
        if self.is_external_url is None and "is_external_url" in self.model_fields_set:
            _dict['IsExternalUrl'] = None

        # set to None if level (nullable) is None
        # and model_fields_set contains the field
        if self.level is None and "level" in self.model_fields_set:
            _dict['Level'] = None

        # set to None if is_anamorphic (nullable) is None
        # and model_fields_set contains the field
        if self.is_anamorphic is None and "is_anamorphic" in self.model_fields_set:
            _dict['IsAnamorphic'] = None

        # set to None if attachment_size (nullable) is None
        # and model_fields_set contains the field
        if self.attachment_size is None and "attachment_size" in self.model_fields_set:
            _dict['AttachmentSize'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MediaStream from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Codec": obj.get("Codec"),
            "CodecTag": obj.get("CodecTag"),
            "Language": obj.get("Language"),
            "ColorTransfer": obj.get("ColorTransfer"),
            "ColorPrimaries": obj.get("ColorPrimaries"),
            "ColorSpace": obj.get("ColorSpace"),
            "Comment": obj.get("Comment"),
            "StreamStartTimeTicks": obj.get("StreamStartTimeTicks"),
            "TimeBase": obj.get("TimeBase"),
            "Title": obj.get("Title"),
            "Extradata": obj.get("Extradata"),
            "VideoRange": obj.get("VideoRange"),
            "DisplayTitle": obj.get("DisplayTitle"),
            "DisplayLanguage": obj.get("DisplayLanguage"),
            "NalLengthSize": obj.get("NalLengthSize"),
            "IsInterlaced": obj.get("IsInterlaced"),
            "IsAVC": obj.get("IsAVC"),
            "ChannelLayout": obj.get("ChannelLayout"),
            "BitRate": obj.get("BitRate"),
            "BitDepth": obj.get("BitDepth"),
            "RefFrames": obj.get("RefFrames"),
            "Rotation": obj.get("Rotation"),
            "Channels": obj.get("Channels"),
            "SampleRate": obj.get("SampleRate"),
            "IsDefault": obj.get("IsDefault"),
            "IsForced": obj.get("IsForced"),
            "IsHearingImpaired": obj.get("IsHearingImpaired"),
            "Height": obj.get("Height"),
            "Width": obj.get("Width"),
            "AverageFrameRate": obj.get("AverageFrameRate"),
            "RealFrameRate": obj.get("RealFrameRate"),
            "Profile": obj.get("Profile"),
            "Type": obj.get("Type"),
            "AspectRatio": obj.get("AspectRatio"),
            "Index": obj.get("Index"),
            "IsExternal": obj.get("IsExternal"),
            "DeliveryMethod": obj.get("DeliveryMethod"),
            "DeliveryUrl": obj.get("DeliveryUrl"),
            "IsExternalUrl": obj.get("IsExternalUrl"),
            "IsTextSubtitleStream": obj.get("IsTextSubtitleStream"),
            "SupportsExternalStream": obj.get("SupportsExternalStream"),
            "Path": obj.get("Path"),
            "Protocol": obj.get("Protocol"),
            "PixelFormat": obj.get("PixelFormat"),
            "Level": obj.get("Level"),
            "IsAnamorphic": obj.get("IsAnamorphic"),
            "ExtendedVideoType": obj.get("ExtendedVideoType"),
            "ExtendedVideoSubType": obj.get("ExtendedVideoSubType"),
            "ExtendedVideoSubTypeDescription": obj.get("ExtendedVideoSubTypeDescription"),
            "ItemId": obj.get("ItemId"),
            "ServerId": obj.get("ServerId"),
            "AttachmentSize": obj.get("AttachmentSize"),
            "MimeType": obj.get("MimeType"),
            "SubtitleLocationType": obj.get("SubtitleLocationType")
        })
        return _obj


