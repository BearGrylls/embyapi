# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LiveTvTunerHostInfo(BaseModel):
    """
    LiveTvTunerHostInfo
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    url: Optional[StrictStr] = Field(default=None, alias="Url")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    device_id: Optional[StrictStr] = Field(default=None, alias="DeviceId")
    friendly_name: Optional[StrictStr] = Field(default=None, alias="FriendlyName")
    setup_url: Optional[StrictStr] = Field(default=None, alias="SetupUrl")
    import_favorites_only: Optional[StrictBool] = Field(default=None, alias="ImportFavoritesOnly")
    prefer_epg_channel_images: Optional[StrictBool] = Field(default=None, alias="PreferEpgChannelImages")
    prefer_epg_channel_numbers: Optional[StrictBool] = Field(default=None, alias="PreferEpgChannelNumbers")
    allow_hw_transcoding: Optional[StrictBool] = Field(default=None, alias="AllowHWTranscoding")
    allow_mapping_by_number: Optional[StrictBool] = Field(default=None, alias="AllowMappingByNumber")
    import_guide_data: Optional[StrictBool] = Field(default=None, alias="ImportGuideData")
    source: Optional[StrictStr] = Field(default=None, alias="Source")
    tuner_count: Optional[StrictInt] = Field(default=None, alias="TunerCount")
    user_agent: Optional[StrictStr] = Field(default=None, alias="UserAgent")
    referrer: Optional[StrictStr] = Field(default=None, alias="Referrer")
    provider_options: Optional[StrictStr] = Field(default=None, alias="ProviderOptions")
    data_version: Optional[StrictInt] = Field(default=None, alias="DataVersion")
    __properties: ClassVar[List[str]] = ["Id", "Url", "Type", "DeviceId", "FriendlyName", "SetupUrl", "ImportFavoritesOnly", "PreferEpgChannelImages", "PreferEpgChannelNumbers", "AllowHWTranscoding", "AllowMappingByNumber", "ImportGuideData", "Source", "TunerCount", "UserAgent", "Referrer", "ProviderOptions", "DataVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiveTvTunerHostInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiveTvTunerHostInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id"),
            "Url": obj.get("Url"),
            "Type": obj.get("Type"),
            "DeviceId": obj.get("DeviceId"),
            "FriendlyName": obj.get("FriendlyName"),
            "SetupUrl": obj.get("SetupUrl"),
            "ImportFavoritesOnly": obj.get("ImportFavoritesOnly"),
            "PreferEpgChannelImages": obj.get("PreferEpgChannelImages"),
            "PreferEpgChannelNumbers": obj.get("PreferEpgChannelNumbers"),
            "AllowHWTranscoding": obj.get("AllowHWTranscoding"),
            "AllowMappingByNumber": obj.get("AllowMappingByNumber"),
            "ImportGuideData": obj.get("ImportGuideData"),
            "Source": obj.get("Source"),
            "TunerCount": obj.get("TunerCount"),
            "UserAgent": obj.get("UserAgent"),
            "Referrer": obj.get("Referrer"),
            "ProviderOptions": obj.get("ProviderOptions"),
            "DataVersion": obj.get("DataVersion")
        })
        return _obj


