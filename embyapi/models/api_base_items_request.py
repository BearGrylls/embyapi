# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.day_of_week import DayOfWeek
from embyapi.models.library_item_link_type import LibraryItemLinkType
from embyapi.models.live_tv_keyword_type import LiveTvKeywordType
from typing import Optional, Set
from typing_extensions import Self

class ApiBaseItemsRequest(BaseModel):
    """
    ApiBaseItemsRequest
    """ # noqa: E501
    is4_k: Optional[StrictBool] = Field(default=None, alias="Is4K")
    enable_total_record_count: Optional[StrictBool] = Field(default=None, alias="EnableTotalRecordCount")
    recording_keyword: Optional[StrictStr] = Field(default=None, alias="RecordingKeyword")
    recording_keyword_type: Optional[LiveTvKeywordType] = Field(default=None, alias="RecordingKeywordType")
    random_seed: Optional[StrictInt] = Field(default=None, alias="RandomSeed")
    genre_ids: Optional[StrictStr] = Field(default=None, alias="GenreIds")
    collection_ids: Optional[StrictStr] = Field(default=None, alias="CollectionIds")
    tag_ids: Optional[StrictStr] = Field(default=None, alias="TagIds")
    exclude_tag_ids: Optional[StrictStr] = Field(default=None, alias="ExcludeTagIds")
    exclude_artist_ids: Optional[StrictStr] = Field(default=None, alias="ExcludeArtistIds")
    album_artist_ids: Optional[StrictStr] = Field(default=None, alias="AlbumArtistIds")
    contributing_artist_ids: Optional[StrictStr] = Field(default=None, alias="ContributingArtistIds")
    album_ids: Optional[StrictStr] = Field(default=None, alias="AlbumIds")
    outer_ids: Optional[StrictStr] = Field(default=None, alias="OuterIds")
    list_item_ids: Optional[StrictStr] = Field(default=None, alias="ListItemIds")
    audio_languages: Optional[StrictStr] = Field(default=None, alias="AudioLanguages")
    subtitle_languages: Optional[StrictStr] = Field(default=None, alias="SubtitleLanguages")
    can_edit_items: Optional[StrictBool] = Field(default=None, alias="CanEditItems")
    group_items_into: Optional[LibraryItemLinkType] = Field(default=None, alias="GroupItemsInto")
    min_width: Optional[StrictInt] = Field(default=None, alias="MinWidth")
    min_height: Optional[StrictInt] = Field(default=None, alias="MinHeight")
    max_width: Optional[StrictInt] = Field(default=None, alias="MaxWidth")
    max_height: Optional[StrictInt] = Field(default=None, alias="MaxHeight")
    group_programs_by_series: Optional[StrictBool] = Field(default=None, alias="GroupProgramsBySeries")
    air_days: Optional[List[DayOfWeek]] = Field(default=None, alias="AirDays")
    is_airing: Optional[StrictBool] = Field(default=None, alias="IsAiring")
    has_aired: Optional[StrictBool] = Field(default=None, alias="HasAired")
    __properties: ClassVar[List[str]] = ["Is4K", "EnableTotalRecordCount", "RecordingKeyword", "RecordingKeywordType", "RandomSeed", "GenreIds", "CollectionIds", "TagIds", "ExcludeTagIds", "ExcludeArtistIds", "AlbumArtistIds", "ContributingArtistIds", "AlbumIds", "OuterIds", "ListItemIds", "AudioLanguages", "SubtitleLanguages", "CanEditItems", "GroupItemsInto", "MinWidth", "MinHeight", "MaxWidth", "MaxHeight", "GroupProgramsBySeries", "AirDays", "IsAiring", "HasAired"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiBaseItemsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if is4_k (nullable) is None
        # and model_fields_set contains the field
        if self.is4_k is None and "is4_k" in self.model_fields_set:
            _dict['Is4K'] = None

        # set to None if can_edit_items (nullable) is None
        # and model_fields_set contains the field
        if self.can_edit_items is None and "can_edit_items" in self.model_fields_set:
            _dict['CanEditItems'] = None

        # set to None if min_width (nullable) is None
        # and model_fields_set contains the field
        if self.min_width is None and "min_width" in self.model_fields_set:
            _dict['MinWidth'] = None

        # set to None if min_height (nullable) is None
        # and model_fields_set contains the field
        if self.min_height is None and "min_height" in self.model_fields_set:
            _dict['MinHeight'] = None

        # set to None if max_width (nullable) is None
        # and model_fields_set contains the field
        if self.max_width is None and "max_width" in self.model_fields_set:
            _dict['MaxWidth'] = None

        # set to None if max_height (nullable) is None
        # and model_fields_set contains the field
        if self.max_height is None and "max_height" in self.model_fields_set:
            _dict['MaxHeight'] = None

        # set to None if is_airing (nullable) is None
        # and model_fields_set contains the field
        if self.is_airing is None and "is_airing" in self.model_fields_set:
            _dict['IsAiring'] = None

        # set to None if has_aired (nullable) is None
        # and model_fields_set contains the field
        if self.has_aired is None and "has_aired" in self.model_fields_set:
            _dict['HasAired'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiBaseItemsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Is4K": obj.get("Is4K"),
            "EnableTotalRecordCount": obj.get("EnableTotalRecordCount"),
            "RecordingKeyword": obj.get("RecordingKeyword"),
            "RecordingKeywordType": obj.get("RecordingKeywordType"),
            "RandomSeed": obj.get("RandomSeed"),
            "GenreIds": obj.get("GenreIds"),
            "CollectionIds": obj.get("CollectionIds"),
            "TagIds": obj.get("TagIds"),
            "ExcludeTagIds": obj.get("ExcludeTagIds"),
            "ExcludeArtistIds": obj.get("ExcludeArtistIds"),
            "AlbumArtistIds": obj.get("AlbumArtistIds"),
            "ContributingArtistIds": obj.get("ContributingArtistIds"),
            "AlbumIds": obj.get("AlbumIds"),
            "OuterIds": obj.get("OuterIds"),
            "ListItemIds": obj.get("ListItemIds"),
            "AudioLanguages": obj.get("AudioLanguages"),
            "SubtitleLanguages": obj.get("SubtitleLanguages"),
            "CanEditItems": obj.get("CanEditItems"),
            "GroupItemsInto": obj.get("GroupItemsInto"),
            "MinWidth": obj.get("MinWidth"),
            "MinHeight": obj.get("MinHeight"),
            "MaxWidth": obj.get("MaxWidth"),
            "MaxHeight": obj.get("MaxHeight"),
            "GroupProgramsBySeries": obj.get("GroupProgramsBySeries"),
            "AirDays": obj.get("AirDays"),
            "IsAiring": obj.get("IsAiring"),
            "HasAired": obj.get("HasAired")
        })
        return _obj


