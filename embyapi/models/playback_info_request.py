# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.device_profile import DeviceProfile
from embyapi.models.media_protocol import MediaProtocol
from typing import Optional, Set
from typing_extensions import Self

class PlaybackInfoRequest(BaseModel):
    """
    PlaybackInfoRequest
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    user_id: Optional[StrictStr] = Field(default=None, alias="UserId")
    max_streaming_bitrate: Optional[StrictInt] = Field(default=None, alias="MaxStreamingBitrate")
    start_time_ticks: Optional[StrictInt] = Field(default=None, alias="StartTimeTicks")
    audio_stream_index: Optional[StrictInt] = Field(default=None, alias="AudioStreamIndex")
    subtitle_stream_index: Optional[StrictInt] = Field(default=None, alias="SubtitleStreamIndex")
    max_audio_channels: Optional[StrictInt] = Field(default=None, alias="MaxAudioChannels")
    media_source_id: Optional[StrictStr] = Field(default=None, alias="MediaSourceId")
    live_stream_id: Optional[StrictStr] = Field(default=None, alias="LiveStreamId")
    device_profile: Optional[DeviceProfile] = Field(default=None, alias="DeviceProfile")
    enable_direct_play: Optional[StrictBool] = Field(default=None, alias="EnableDirectPlay")
    enable_direct_stream: Optional[StrictBool] = Field(default=None, alias="EnableDirectStream")
    enable_transcoding: Optional[StrictBool] = Field(default=None, alias="EnableTranscoding")
    allow_interlaced_video_stream_copy: Optional[StrictBool] = Field(default=None, alias="AllowInterlacedVideoStreamCopy")
    allow_video_stream_copy: Optional[StrictBool] = Field(default=None, alias="AllowVideoStreamCopy")
    allow_audio_stream_copy: Optional[StrictBool] = Field(default=None, alias="AllowAudioStreamCopy")
    is_playback: Optional[StrictBool] = Field(default=None, alias="IsPlayback")
    auto_open_live_stream: Optional[StrictBool] = Field(default=None, alias="AutoOpenLiveStream")
    direct_play_protocols: Optional[List[MediaProtocol]] = Field(default=None, alias="DirectPlayProtocols")
    current_play_session_id: Optional[StrictStr] = Field(default=None, alias="CurrentPlaySessionId")
    __properties: ClassVar[List[str]] = ["Id", "UserId", "MaxStreamingBitrate", "StartTimeTicks", "AudioStreamIndex", "SubtitleStreamIndex", "MaxAudioChannels", "MediaSourceId", "LiveStreamId", "DeviceProfile", "EnableDirectPlay", "EnableDirectStream", "EnableTranscoding", "AllowInterlacedVideoStreamCopy", "AllowVideoStreamCopy", "AllowAudioStreamCopy", "IsPlayback", "AutoOpenLiveStream", "DirectPlayProtocols", "CurrentPlaySessionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlaybackInfoRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device_profile
        if self.device_profile:
            _dict['DeviceProfile'] = self.device_profile.to_dict()
        # set to None if max_streaming_bitrate (nullable) is None
        # and model_fields_set contains the field
        if self.max_streaming_bitrate is None and "max_streaming_bitrate" in self.model_fields_set:
            _dict['MaxStreamingBitrate'] = None

        # set to None if start_time_ticks (nullable) is None
        # and model_fields_set contains the field
        if self.start_time_ticks is None and "start_time_ticks" in self.model_fields_set:
            _dict['StartTimeTicks'] = None

        # set to None if audio_stream_index (nullable) is None
        # and model_fields_set contains the field
        if self.audio_stream_index is None and "audio_stream_index" in self.model_fields_set:
            _dict['AudioStreamIndex'] = None

        # set to None if subtitle_stream_index (nullable) is None
        # and model_fields_set contains the field
        if self.subtitle_stream_index is None and "subtitle_stream_index" in self.model_fields_set:
            _dict['SubtitleStreamIndex'] = None

        # set to None if max_audio_channels (nullable) is None
        # and model_fields_set contains the field
        if self.max_audio_channels is None and "max_audio_channels" in self.model_fields_set:
            _dict['MaxAudioChannels'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlaybackInfoRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id"),
            "UserId": obj.get("UserId"),
            "MaxStreamingBitrate": obj.get("MaxStreamingBitrate"),
            "StartTimeTicks": obj.get("StartTimeTicks"),
            "AudioStreamIndex": obj.get("AudioStreamIndex"),
            "SubtitleStreamIndex": obj.get("SubtitleStreamIndex"),
            "MaxAudioChannels": obj.get("MaxAudioChannels"),
            "MediaSourceId": obj.get("MediaSourceId"),
            "LiveStreamId": obj.get("LiveStreamId"),
            "DeviceProfile": DeviceProfile.from_dict(obj["DeviceProfile"]) if obj.get("DeviceProfile") is not None else None,
            "EnableDirectPlay": obj.get("EnableDirectPlay"),
            "EnableDirectStream": obj.get("EnableDirectStream"),
            "EnableTranscoding": obj.get("EnableTranscoding"),
            "AllowInterlacedVideoStreamCopy": obj.get("AllowInterlacedVideoStreamCopy"),
            "AllowVideoStreamCopy": obj.get("AllowVideoStreamCopy"),
            "AllowAudioStreamCopy": obj.get("AllowAudioStreamCopy"),
            "IsPlayback": obj.get("IsPlayback"),
            "AutoOpenLiveStream": obj.get("AutoOpenLiveStream"),
            "DirectPlayProtocols": obj.get("DirectPlayProtocols"),
            "CurrentPlaySessionId": obj.get("CurrentPlaySessionId")
        })
        return _obj


