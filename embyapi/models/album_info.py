# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.globalization_culture_dto import GlobalizationCultureDto
from embyapi.models.song_info import SongInfo
from typing import Optional, Set
from typing_extensions import Self

class AlbumInfo(BaseModel):
    """
    AlbumInfo
    """ # noqa: E501
    album_artists: Optional[List[StrictStr]] = Field(default=None, description="The album artist.", alias="AlbumArtists")
    song_infos: Optional[List[SongInfo]] = Field(default=None, alias="SongInfos")
    name: Optional[StrictStr] = Field(default=None, description="The name.", alias="Name")
    metadata_language: Optional[StrictStr] = Field(default=None, description="The metadata language.", alias="MetadataLanguage")
    metadata_country_code: Optional[StrictStr] = Field(default=None, description="The metadata country code.", alias="MetadataCountryCode")
    metadata_languages: Optional[List[GlobalizationCultureDto]] = Field(default=None, alias="MetadataLanguages")
    provider_ids: Optional[Dict[str, StrictStr]] = Field(default=None, alias="ProviderIds")
    year: Optional[StrictInt] = Field(default=None, description="The year.", alias="Year")
    index_number: Optional[StrictInt] = Field(default=None, alias="IndexNumber")
    parent_index_number: Optional[StrictInt] = Field(default=None, alias="ParentIndexNumber")
    premiere_date: Optional[datetime] = Field(default=None, alias="PremiereDate")
    is_automated: Optional[StrictBool] = Field(default=None, alias="IsAutomated")
    enable_adult_metadata: Optional[StrictBool] = Field(default=None, alias="EnableAdultMetadata")
    __properties: ClassVar[List[str]] = ["AlbumArtists", "SongInfos", "Name", "MetadataLanguage", "MetadataCountryCode", "MetadataLanguages", "ProviderIds", "Year", "IndexNumber", "ParentIndexNumber", "PremiereDate", "IsAutomated", "EnableAdultMetadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlbumInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in song_infos (list)
        _items = []
        if self.song_infos:
            for _item in self.song_infos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['SongInfos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metadata_languages (list)
        _items = []
        if self.metadata_languages:
            for _item in self.metadata_languages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['MetadataLanguages'] = _items
        # set to None if year (nullable) is None
        # and model_fields_set contains the field
        if self.year is None and "year" in self.model_fields_set:
            _dict['Year'] = None

        # set to None if index_number (nullable) is None
        # and model_fields_set contains the field
        if self.index_number is None and "index_number" in self.model_fields_set:
            _dict['IndexNumber'] = None

        # set to None if parent_index_number (nullable) is None
        # and model_fields_set contains the field
        if self.parent_index_number is None and "parent_index_number" in self.model_fields_set:
            _dict['ParentIndexNumber'] = None

        # set to None if premiere_date (nullable) is None
        # and model_fields_set contains the field
        if self.premiere_date is None and "premiere_date" in self.model_fields_set:
            _dict['PremiereDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlbumInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AlbumArtists": obj.get("AlbumArtists"),
            "SongInfos": [SongInfo.from_dict(_item) for _item in obj["SongInfos"]] if obj.get("SongInfos") is not None else None,
            "Name": obj.get("Name"),
            "MetadataLanguage": obj.get("MetadataLanguage"),
            "MetadataCountryCode": obj.get("MetadataCountryCode"),
            "MetadataLanguages": [GlobalizationCultureDto.from_dict(_item) for _item in obj["MetadataLanguages"]] if obj.get("MetadataLanguages") is not None else None,
            "ProviderIds": obj.get("ProviderIds"),
            "Year": obj.get("Year"),
            "IndexNumber": obj.get("IndexNumber"),
            "ParentIndexNumber": obj.get("ParentIndexNumber"),
            "PremiereDate": obj.get("PremiereDate"),
            "IsAutomated": obj.get("IsAutomated"),
            "EnableAdultMetadata": obj.get("EnableAdultMetadata")
        })
        return _obj


