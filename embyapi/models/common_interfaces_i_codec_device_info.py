# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.common_interfaces_i_codec_device_capabilities import CommonInterfacesICodecDeviceCapabilities
from embyapi.models.secondary_frameworks import SecondaryFrameworks
from embyapi.models.version import Version
from typing import Optional, Set
from typing_extensions import Self

class CommonInterfacesICodecDeviceInfo(BaseModel):
    """
    CommonInterfacesICodecDeviceInfo
    """ # noqa: E501
    capabilities: Optional[CommonInterfacesICodecDeviceCapabilities] = Field(default=None, alias="Capabilities")
    adapter: Optional[StrictInt] = Field(default=None, alias="Adapter")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    desription: Optional[StrictStr] = Field(default=None, alias="Desription")
    driver: Optional[StrictStr] = Field(default=None, alias="Driver")
    driver_version: Optional[Version] = Field(default=None, alias="DriverVersion")
    api_version: Optional[Version] = Field(default=None, alias="ApiVersion")
    vendor_id: Optional[StrictInt] = Field(default=None, alias="VendorId")
    device_id: Optional[StrictInt] = Field(default=None, alias="DeviceId")
    device_identifier: Optional[StrictStr] = Field(default=None, alias="DeviceIdentifier")
    hardware_context_framework: Optional[SecondaryFrameworks] = Field(default=None, alias="HardwareContextFramework")
    dev_path: Optional[StrictStr] = Field(default=None, alias="DevPath")
    drm_node: Optional[StrictStr] = Field(default=None, alias="DrmNode")
    vendor_name: Optional[StrictStr] = Field(default=None, alias="VendorName")
    device_name: Optional[StrictStr] = Field(default=None, alias="DeviceName")
    __properties: ClassVar[List[str]] = ["Capabilities", "Adapter", "Name", "Desription", "Driver", "DriverVersion", "ApiVersion", "VendorId", "DeviceId", "DeviceIdentifier", "HardwareContextFramework", "DevPath", "DrmNode", "VendorName", "DeviceName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommonInterfacesICodecDeviceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of capabilities
        if self.capabilities:
            _dict['Capabilities'] = self.capabilities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of driver_version
        if self.driver_version:
            _dict['DriverVersion'] = self.driver_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of api_version
        if self.api_version:
            _dict['ApiVersion'] = self.api_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommonInterfacesICodecDeviceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Capabilities": CommonInterfacesICodecDeviceCapabilities.from_dict(obj["Capabilities"]) if obj.get("Capabilities") is not None else None,
            "Adapter": obj.get("Adapter"),
            "Name": obj.get("Name"),
            "Desription": obj.get("Desription"),
            "Driver": obj.get("Driver"),
            "DriverVersion": Version.from_dict(obj["DriverVersion"]) if obj.get("DriverVersion") is not None else None,
            "ApiVersion": Version.from_dict(obj["ApiVersion"]) if obj.get("ApiVersion") is not None else None,
            "VendorId": obj.get("VendorId"),
            "DeviceId": obj.get("DeviceId"),
            "DeviceIdentifier": obj.get("DeviceIdentifier"),
            "HardwareContextFramework": obj.get("HardwareContextFramework"),
            "DevPath": obj.get("DevPath"),
            "DrmNode": obj.get("DrmNode"),
            "VendorName": obj.get("VendorName"),
            "DeviceName": obj.get("DeviceName")
        })
        return _obj


