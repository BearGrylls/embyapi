# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.common_plugins_i_plugin import CommonPluginsIPlugin
from embyapi.models.plugins_configuration_page_type import PluginsConfigurationPageType
from typing import Optional, Set
from typing_extensions import Self

class ApiConfigurationPageInfo(BaseModel):
    """
    ApiConfigurationPageInfo
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    enable_in_main_menu: Optional[StrictBool] = Field(default=None, alias="EnableInMainMenu")
    enable_in_user_menu: Optional[StrictBool] = Field(default=None, alias="EnableInUserMenu")
    feature_id: Optional[StrictStr] = Field(default=None, alias="FeatureId")
    menu_section: Optional[StrictStr] = Field(default=None, alias="MenuSection")
    menu_icon: Optional[StrictStr] = Field(default=None, alias="MenuIcon")
    display_name: Optional[StrictStr] = Field(default=None, alias="DisplayName")
    configuration_page_type: Optional[PluginsConfigurationPageType] = Field(default=None, alias="ConfigurationPageType")
    plugin_id: Optional[StrictStr] = Field(default=None, alias="PluginId")
    href: Optional[StrictStr] = Field(default=None, alias="Href")
    nav_menu_id: Optional[StrictStr] = Field(default=None, alias="NavMenuId")
    plugin: Optional[CommonPluginsIPlugin] = Field(default=None, alias="Plugin")
    translations: Optional[List[StrictStr]] = Field(default=None, alias="Translations")
    __properties: ClassVar[List[str]] = ["Name", "EnableInMainMenu", "EnableInUserMenu", "FeatureId", "MenuSection", "MenuIcon", "DisplayName", "ConfigurationPageType", "PluginId", "Href", "NavMenuId", "Plugin", "Translations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiConfigurationPageInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of plugin
        if self.plugin:
            _dict['Plugin'] = self.plugin.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiConfigurationPageInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Name": obj.get("Name"),
            "EnableInMainMenu": obj.get("EnableInMainMenu"),
            "EnableInUserMenu": obj.get("EnableInUserMenu"),
            "FeatureId": obj.get("FeatureId"),
            "MenuSection": obj.get("MenuSection"),
            "MenuIcon": obj.get("MenuIcon"),
            "DisplayName": obj.get("DisplayName"),
            "ConfigurationPageType": obj.get("ConfigurationPageType"),
            "PluginId": obj.get("PluginId"),
            "Href": obj.get("Href"),
            "NavMenuId": obj.get("NavMenuId"),
            "Plugin": CommonPluginsIPlugin.from_dict(obj["Plugin"]) if obj.get("Plugin") is not None else None,
            "Translations": obj.get("Translations")
        })
        return _obj


