# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.dlna_profiles_http_header_info import DlnaProfilesHttpHeaderInfo
from typing import Optional, Set
from typing_extensions import Self

class DlnaProfilesDeviceIdentification(BaseModel):
    """
    DlnaProfilesDeviceIdentification
    """ # noqa: E501
    friendly_name: Optional[StrictStr] = Field(default=None, alias="FriendlyName")
    model_number: Optional[StrictStr] = Field(default=None, alias="ModelNumber")
    serial_number: Optional[StrictStr] = Field(default=None, alias="SerialNumber")
    model_name: Optional[StrictStr] = Field(default=None, alias="ModelName")
    model_description: Optional[StrictStr] = Field(default=None, alias="ModelDescription")
    device_description: Optional[StrictStr] = Field(default=None, alias="DeviceDescription")
    model_url: Optional[StrictStr] = Field(default=None, alias="ModelUrl")
    manufacturer: Optional[StrictStr] = Field(default=None, alias="Manufacturer")
    manufacturer_url: Optional[StrictStr] = Field(default=None, alias="ManufacturerUrl")
    headers: Optional[List[DlnaProfilesHttpHeaderInfo]] = Field(default=None, alias="Headers")
    __properties: ClassVar[List[str]] = ["FriendlyName", "ModelNumber", "SerialNumber", "ModelName", "ModelDescription", "DeviceDescription", "ModelUrl", "Manufacturer", "ManufacturerUrl", "Headers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DlnaProfilesDeviceIdentification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in headers (list)
        _items = []
        if self.headers:
            for _item in self.headers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Headers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DlnaProfilesDeviceIdentification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FriendlyName": obj.get("FriendlyName"),
            "ModelNumber": obj.get("ModelNumber"),
            "SerialNumber": obj.get("SerialNumber"),
            "ModelName": obj.get("ModelName"),
            "ModelDescription": obj.get("ModelDescription"),
            "DeviceDescription": obj.get("DeviceDescription"),
            "ModelUrl": obj.get("ModelUrl"),
            "Manufacturer": obj.get("Manufacturer"),
            "ManufacturerUrl": obj.get("ManufacturerUrl"),
            "Headers": [DlnaProfilesHttpHeaderInfo.from_dict(_item) for _item in obj["Headers"]] if obj.get("Headers") is not None else None
        })
        return _obj


