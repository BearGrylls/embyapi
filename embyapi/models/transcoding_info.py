# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from embyapi.models.process_run_metrics_process_statistics import ProcessRunMetricsProcessStatistics
from embyapi.models.transcode_reason import TranscodeReason
from embyapi.models.transcoding_vp_step_info import TranscodingVpStepInfo
from embyapi.models.tuple_double_double import TupleDoubleDouble
from typing import Optional, Set
from typing_extensions import Self

class TranscodingInfo(BaseModel):
    """
    TranscodingInfo
    """ # noqa: E501
    audio_codec: Optional[StrictStr] = Field(default=None, alias="AudioCodec")
    video_codec: Optional[StrictStr] = Field(default=None, alias="VideoCodec")
    sub_protocol: Optional[StrictStr] = Field(default=None, alias="SubProtocol")
    container: Optional[StrictStr] = Field(default=None, alias="Container")
    is_video_direct: Optional[StrictBool] = Field(default=None, alias="IsVideoDirect")
    is_audio_direct: Optional[StrictBool] = Field(default=None, alias="IsAudioDirect")
    bitrate: Optional[StrictInt] = Field(default=None, alias="Bitrate")
    audio_bitrate: Optional[StrictInt] = Field(default=None, alias="AudioBitrate")
    video_bitrate: Optional[StrictInt] = Field(default=None, alias="VideoBitrate")
    framerate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Framerate")
    completion_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="CompletionPercentage")
    transcoding_position_ticks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TranscodingPositionTicks")
    transcoding_start_position_ticks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TranscodingStartPositionTicks")
    width: Optional[StrictInt] = Field(default=None, alias="Width")
    height: Optional[StrictInt] = Field(default=None, alias="Height")
    audio_channels: Optional[StrictInt] = Field(default=None, alias="AudioChannels")
    transcode_reasons: Optional[List[TranscodeReason]] = Field(default=None, alias="TranscodeReasons")
    current_cpu_usage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Deprecated, please use ProcessStatistics instead", alias="CurrentCpuUsage")
    average_cpu_usage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Deprecated, please use ProcessStatistics instead", alias="AverageCpuUsage")
    cpu_history: Optional[List[TupleDoubleDouble]] = Field(default=None, description="Deprecated, please use ProcessStatistics instead", alias="CpuHistory")
    process_statistics: Optional[ProcessRunMetricsProcessStatistics] = Field(default=None, alias="ProcessStatistics")
    current_throttle: Optional[StrictInt] = Field(default=None, alias="CurrentThrottle")
    video_decoder: Optional[StrictStr] = Field(default=None, alias="VideoDecoder")
    video_decoder_is_hardware: Optional[StrictBool] = Field(default=None, alias="VideoDecoderIsHardware")
    video_decoder_media_type: Optional[StrictStr] = Field(default=None, alias="VideoDecoderMediaType")
    video_decoder_hw_accel: Optional[StrictStr] = Field(default=None, alias="VideoDecoderHwAccel")
    video_encoder: Optional[StrictStr] = Field(default=None, alias="VideoEncoder")
    video_encoder_is_hardware: Optional[StrictBool] = Field(default=None, alias="VideoEncoderIsHardware")
    video_encoder_media_type: Optional[StrictStr] = Field(default=None, alias="VideoEncoderMediaType")
    video_encoder_hw_accel: Optional[StrictStr] = Field(default=None, alias="VideoEncoderHwAccel")
    video_pipeline_info: Optional[List[TranscodingVpStepInfo]] = Field(default=None, alias="VideoPipelineInfo")
    subtitle_pipeline_infos: Optional[List[List[TranscodingVpStepInfo]]] = Field(default=None, alias="SubtitlePipelineInfos")
    __properties: ClassVar[List[str]] = ["AudioCodec", "VideoCodec", "SubProtocol", "Container", "IsVideoDirect", "IsAudioDirect", "Bitrate", "AudioBitrate", "VideoBitrate", "Framerate", "CompletionPercentage", "TranscodingPositionTicks", "TranscodingStartPositionTicks", "Width", "Height", "AudioChannels", "TranscodeReasons", "CurrentCpuUsage", "AverageCpuUsage", "CpuHistory", "ProcessStatistics", "CurrentThrottle", "VideoDecoder", "VideoDecoderIsHardware", "VideoDecoderMediaType", "VideoDecoderHwAccel", "VideoEncoder", "VideoEncoderIsHardware", "VideoEncoderMediaType", "VideoEncoderHwAccel", "VideoPipelineInfo", "SubtitlePipelineInfos"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranscodingInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cpu_history (list)
        _items = []
        if self.cpu_history:
            for _item in self.cpu_history:
                if _item:
                    _items.append(_item.to_dict())
            _dict['CpuHistory'] = _items
        # override the default output from pydantic by calling `to_dict()` of process_statistics
        if self.process_statistics:
            _dict['ProcessStatistics'] = self.process_statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in video_pipeline_info (list)
        _items = []
        if self.video_pipeline_info:
            for _item in self.video_pipeline_info:
                if _item:
                    _items.append(_item.to_dict())
            _dict['VideoPipelineInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subtitle_pipeline_infos (list of list)
        _items = []
        if self.subtitle_pipeline_infos:
            for _item in self.subtitle_pipeline_infos:
                if _item:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item if _inner_item is not None]
                    )
            _dict['SubtitlePipelineInfos'] = _items
        # set to None if bitrate (nullable) is None
        # and model_fields_set contains the field
        if self.bitrate is None and "bitrate" in self.model_fields_set:
            _dict['Bitrate'] = None

        # set to None if audio_bitrate (nullable) is None
        # and model_fields_set contains the field
        if self.audio_bitrate is None and "audio_bitrate" in self.model_fields_set:
            _dict['AudioBitrate'] = None

        # set to None if video_bitrate (nullable) is None
        # and model_fields_set contains the field
        if self.video_bitrate is None and "video_bitrate" in self.model_fields_set:
            _dict['VideoBitrate'] = None

        # set to None if framerate (nullable) is None
        # and model_fields_set contains the field
        if self.framerate is None and "framerate" in self.model_fields_set:
            _dict['Framerate'] = None

        # set to None if completion_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.completion_percentage is None and "completion_percentage" in self.model_fields_set:
            _dict['CompletionPercentage'] = None

        # set to None if transcoding_position_ticks (nullable) is None
        # and model_fields_set contains the field
        if self.transcoding_position_ticks is None and "transcoding_position_ticks" in self.model_fields_set:
            _dict['TranscodingPositionTicks'] = None

        # set to None if transcoding_start_position_ticks (nullable) is None
        # and model_fields_set contains the field
        if self.transcoding_start_position_ticks is None and "transcoding_start_position_ticks" in self.model_fields_set:
            _dict['TranscodingStartPositionTicks'] = None

        # set to None if width (nullable) is None
        # and model_fields_set contains the field
        if self.width is None and "width" in self.model_fields_set:
            _dict['Width'] = None

        # set to None if height (nullable) is None
        # and model_fields_set contains the field
        if self.height is None and "height" in self.model_fields_set:
            _dict['Height'] = None

        # set to None if audio_channels (nullable) is None
        # and model_fields_set contains the field
        if self.audio_channels is None and "audio_channels" in self.model_fields_set:
            _dict['AudioChannels'] = None

        # set to None if current_cpu_usage (nullable) is None
        # and model_fields_set contains the field
        if self.current_cpu_usage is None and "current_cpu_usage" in self.model_fields_set:
            _dict['CurrentCpuUsage'] = None

        # set to None if average_cpu_usage (nullable) is None
        # and model_fields_set contains the field
        if self.average_cpu_usage is None and "average_cpu_usage" in self.model_fields_set:
            _dict['AverageCpuUsage'] = None

        # set to None if current_throttle (nullable) is None
        # and model_fields_set contains the field
        if self.current_throttle is None and "current_throttle" in self.model_fields_set:
            _dict['CurrentThrottle'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranscodingInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AudioCodec": obj.get("AudioCodec"),
            "VideoCodec": obj.get("VideoCodec"),
            "SubProtocol": obj.get("SubProtocol"),
            "Container": obj.get("Container"),
            "IsVideoDirect": obj.get("IsVideoDirect"),
            "IsAudioDirect": obj.get("IsAudioDirect"),
            "Bitrate": obj.get("Bitrate"),
            "AudioBitrate": obj.get("AudioBitrate"),
            "VideoBitrate": obj.get("VideoBitrate"),
            "Framerate": obj.get("Framerate"),
            "CompletionPercentage": obj.get("CompletionPercentage"),
            "TranscodingPositionTicks": obj.get("TranscodingPositionTicks"),
            "TranscodingStartPositionTicks": obj.get("TranscodingStartPositionTicks"),
            "Width": obj.get("Width"),
            "Height": obj.get("Height"),
            "AudioChannels": obj.get("AudioChannels"),
            "TranscodeReasons": obj.get("TranscodeReasons"),
            "CurrentCpuUsage": obj.get("CurrentCpuUsage"),
            "AverageCpuUsage": obj.get("AverageCpuUsage"),
            "CpuHistory": [TupleDoubleDouble.from_dict(_item) for _item in obj["CpuHistory"]] if obj.get("CpuHistory") is not None else None,
            "ProcessStatistics": ProcessRunMetricsProcessStatistics.from_dict(obj["ProcessStatistics"]) if obj.get("ProcessStatistics") is not None else None,
            "CurrentThrottle": obj.get("CurrentThrottle"),
            "VideoDecoder": obj.get("VideoDecoder"),
            "VideoDecoderIsHardware": obj.get("VideoDecoderIsHardware"),
            "VideoDecoderMediaType": obj.get("VideoDecoderMediaType"),
            "VideoDecoderHwAccel": obj.get("VideoDecoderHwAccel"),
            "VideoEncoder": obj.get("VideoEncoder"),
            "VideoEncoderIsHardware": obj.get("VideoEncoderIsHardware"),
            "VideoEncoderMediaType": obj.get("VideoEncoderMediaType"),
            "VideoEncoderHwAccel": obj.get("VideoEncoderHwAccel"),
            "VideoPipelineInfo": [TranscodingVpStepInfo.from_dict(_item) for _item in obj["VideoPipelineInfo"]] if obj.get("VideoPipelineInfo") is not None else None,
            "SubtitlePipelineInfos": [
                    [TranscodingVpStepInfo.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj["SubtitlePipelineInfos"]
                ] if obj.get("SubtitlePipelineInfos") is not None else None
        })
        return _obj


