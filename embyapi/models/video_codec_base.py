# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.bit_rate import BitRate
from embyapi.models.codec_directions import CodecDirections
from embyapi.models.codec_kinds import CodecKinds
from embyapi.models.color_formats import ColorFormats
from embyapi.models.common_interfaces_i_codec_device_info import CommonInterfacesICodecDeviceInfo
from embyapi.models.profile_level_information import ProfileLevelInformation
from embyapi.models.secondary_frameworks import SecondaryFrameworks
from embyapi.models.video_media_types import VideoMediaTypes
from typing import Optional, Set
from typing_extensions import Self

class VideoCodecBase(BaseModel):
    """
    VideoCodecBase
    """ # noqa: E501
    codec_device_info: Optional[CommonInterfacesICodecDeviceInfo] = Field(default=None, alias="CodecDeviceInfo")
    codec_kind: Optional[CodecKinds] = Field(default=None, alias="CodecKind")
    media_type_name: Optional[StrictStr] = Field(default=None, alias="MediaTypeName")
    video_media_type: Optional[VideoMediaTypes] = Field(default=None, alias="VideoMediaType")
    min_width: Optional[StrictInt] = Field(default=None, alias="MinWidth")
    max_width: Optional[StrictInt] = Field(default=None, alias="MaxWidth")
    min_height: Optional[StrictInt] = Field(default=None, alias="MinHeight")
    max_height: Optional[StrictInt] = Field(default=None, alias="MaxHeight")
    width_alignment: Optional[StrictInt] = Field(default=None, alias="WidthAlignment")
    height_alignment: Optional[StrictInt] = Field(default=None, alias="HeightAlignment")
    max_bit_rate: Optional[BitRate] = Field(default=None, alias="MaxBitRate")
    supported_color_formats: Optional[List[ColorFormats]] = Field(default=None, alias="SupportedColorFormats")
    supported_color_format_strings: Optional[List[StrictStr]] = Field(default=None, alias="SupportedColorFormatStrings")
    profile_and_level_information: Optional[List[ProfileLevelInformation]] = Field(default=None, alias="ProfileAndLevelInformation")
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    direction: Optional[CodecDirections] = Field(default=None, alias="Direction")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    description: Optional[StrictStr] = Field(default=None, alias="Description")
    framework_codec: Optional[StrictStr] = Field(default=None, alias="FrameworkCodec")
    is_hardware_codec: Optional[StrictBool] = Field(default=None, alias="IsHardwareCodec")
    secondary_framework: Optional[SecondaryFrameworks] = Field(default=None, alias="SecondaryFramework")
    secondary_framework_codec: Optional[StrictStr] = Field(default=None, alias="SecondaryFrameworkCodec")
    max_instance_count: Optional[StrictInt] = Field(default=None, alias="MaxInstanceCount")
    is_enabled_by_default: Optional[StrictBool] = Field(default=None, alias="IsEnabledByDefault")
    default_priority: Optional[StrictInt] = Field(default=None, alias="DefaultPriority")
    __properties: ClassVar[List[str]] = ["CodecDeviceInfo", "CodecKind", "MediaTypeName", "VideoMediaType", "MinWidth", "MaxWidth", "MinHeight", "MaxHeight", "WidthAlignment", "HeightAlignment", "MaxBitRate", "SupportedColorFormats", "SupportedColorFormatStrings", "ProfileAndLevelInformation", "Id", "Direction", "Name", "Description", "FrameworkCodec", "IsHardwareCodec", "SecondaryFramework", "SecondaryFrameworkCodec", "MaxInstanceCount", "IsEnabledByDefault", "DefaultPriority"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoCodecBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of codec_device_info
        if self.codec_device_info:
            _dict['CodecDeviceInfo'] = self.codec_device_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_bit_rate
        if self.max_bit_rate:
            _dict['MaxBitRate'] = self.max_bit_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in profile_and_level_information (list)
        _items = []
        if self.profile_and_level_information:
            for _item in self.profile_and_level_information:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ProfileAndLevelInformation'] = _items
        # set to None if min_width (nullable) is None
        # and model_fields_set contains the field
        if self.min_width is None and "min_width" in self.model_fields_set:
            _dict['MinWidth'] = None

        # set to None if max_width (nullable) is None
        # and model_fields_set contains the field
        if self.max_width is None and "max_width" in self.model_fields_set:
            _dict['MaxWidth'] = None

        # set to None if min_height (nullable) is None
        # and model_fields_set contains the field
        if self.min_height is None and "min_height" in self.model_fields_set:
            _dict['MinHeight'] = None

        # set to None if max_height (nullable) is None
        # and model_fields_set contains the field
        if self.max_height is None and "max_height" in self.model_fields_set:
            _dict['MaxHeight'] = None

        # set to None if width_alignment (nullable) is None
        # and model_fields_set contains the field
        if self.width_alignment is None and "width_alignment" in self.model_fields_set:
            _dict['WidthAlignment'] = None

        # set to None if height_alignment (nullable) is None
        # and model_fields_set contains the field
        if self.height_alignment is None and "height_alignment" in self.model_fields_set:
            _dict['HeightAlignment'] = None

        # set to None if max_instance_count (nullable) is None
        # and model_fields_set contains the field
        if self.max_instance_count is None and "max_instance_count" in self.model_fields_set:
            _dict['MaxInstanceCount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoCodecBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CodecDeviceInfo": CommonInterfacesICodecDeviceInfo.from_dict(obj["CodecDeviceInfo"]) if obj.get("CodecDeviceInfo") is not None else None,
            "CodecKind": obj.get("CodecKind"),
            "MediaTypeName": obj.get("MediaTypeName"),
            "VideoMediaType": obj.get("VideoMediaType"),
            "MinWidth": obj.get("MinWidth"),
            "MaxWidth": obj.get("MaxWidth"),
            "MinHeight": obj.get("MinHeight"),
            "MaxHeight": obj.get("MaxHeight"),
            "WidthAlignment": obj.get("WidthAlignment"),
            "HeightAlignment": obj.get("HeightAlignment"),
            "MaxBitRate": BitRate.from_dict(obj["MaxBitRate"]) if obj.get("MaxBitRate") is not None else None,
            "SupportedColorFormats": obj.get("SupportedColorFormats"),
            "SupportedColorFormatStrings": obj.get("SupportedColorFormatStrings"),
            "ProfileAndLevelInformation": [ProfileLevelInformation.from_dict(_item) for _item in obj["ProfileAndLevelInformation"]] if obj.get("ProfileAndLevelInformation") is not None else None,
            "Id": obj.get("Id"),
            "Direction": obj.get("Direction"),
            "Name": obj.get("Name"),
            "Description": obj.get("Description"),
            "FrameworkCodec": obj.get("FrameworkCodec"),
            "IsHardwareCodec": obj.get("IsHardwareCodec"),
            "SecondaryFramework": obj.get("SecondaryFramework"),
            "SecondaryFrameworkCodec": obj.get("SecondaryFrameworkCodec"),
            "MaxInstanceCount": obj.get("MaxInstanceCount"),
            "IsEnabledByDefault": obj.get("IsEnabledByDefault"),
            "DefaultPriority": obj.get("DefaultPriority")
        })
        return _obj


