# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from embyapi.models.package_target_system import PackageTargetSystem
from embyapi.models.package_version_info import PackageVersionInfo
from typing import Optional, Set
from typing_extensions import Self

class PackageInfo(BaseModel):
    """
    Class PackageInfo  
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The internal id of this package.")
    name: Optional[StrictStr] = Field(default=None, description="The name.")
    short_description: Optional[StrictStr] = Field(default=None, description="The short description.", alias="shortDescription")
    overview: Optional[StrictStr] = Field(default=None, description="The overview.")
    is_premium: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is premium.", alias="isPremium")
    adult: Optional[StrictBool] = Field(default=None, description="A value indicating whether this instance is adult only content.")
    rich_desc_url: Optional[StrictStr] = Field(default=None, description="The rich desc URL.", alias="richDescUrl")
    thumb_image: Optional[StrictStr] = Field(default=None, description="The thumb image.", alias="thumbImage")
    preview_image: Optional[StrictStr] = Field(default=None, description="The preview image.", alias="previewImage")
    type: Optional[StrictStr] = Field(default=None, description="The type.")
    target_filename: Optional[StrictStr] = Field(default=None, description="The target filename.", alias="targetFilename")
    owner: Optional[StrictStr] = Field(default=None, description="The owner.")
    category: Optional[StrictStr] = Field(default=None, description="The category.")
    tile_color: Optional[StrictStr] = Field(default=None, description="The catalog tile color.", alias="tileColor")
    feature_id: Optional[StrictStr] = Field(default=None, description="The feature id of this package (if premium).", alias="featureId")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The price for this package (if premium).")
    target_system: Optional[PackageTargetSystem] = Field(default=None, alias="targetSystem")
    guid: Optional[StrictStr] = Field(default=None, description="The guid of the assembly associated with this package (if a plug\\-in). This is used to identify the proper item for automatic updates.")
    is_registered: Optional[StrictBool] = Field(default=None, description="Whether or not this package is registered.", alias="isRegistered")
    exp_date: Optional[datetime] = Field(default=None, description="The expiration date for this package.", alias="expDate")
    versions: Optional[List[PackageVersionInfo]] = Field(default=None, description="The versions.")
    enable_in_app_store: Optional[StrictBool] = Field(default=None, description="A value indicating whether \\[enable in application store\\].", alias="enableInAppStore")
    installs: Optional[StrictInt] = Field(default=None, description="The installs.")
    __properties: ClassVar[List[str]] = ["id", "name", "shortDescription", "overview", "isPremium", "adult", "richDescUrl", "thumbImage", "previewImage", "type", "targetFilename", "owner", "category", "tileColor", "featureId", "price", "targetSystem", "guid", "isRegistered", "expDate", "versions", "enableInAppStore", "installs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PackageInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in versions (list)
        _items = []
        if self.versions:
            for _item in self.versions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['versions'] = _items
        # set to None if price (nullable) is None
        # and model_fields_set contains the field
        if self.price is None and "price" in self.model_fields_set:
            _dict['price'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PackageInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "shortDescription": obj.get("shortDescription"),
            "overview": obj.get("overview"),
            "isPremium": obj.get("isPremium"),
            "adult": obj.get("adult"),
            "richDescUrl": obj.get("richDescUrl"),
            "thumbImage": obj.get("thumbImage"),
            "previewImage": obj.get("previewImage"),
            "type": obj.get("type"),
            "targetFilename": obj.get("targetFilename"),
            "owner": obj.get("owner"),
            "category": obj.get("category"),
            "tileColor": obj.get("tileColor"),
            "featureId": obj.get("featureId"),
            "price": obj.get("price"),
            "targetSystem": obj.get("targetSystem"),
            "guid": obj.get("guid"),
            "isRegistered": obj.get("isRegistered"),
            "expDate": obj.get("expDate"),
            "versions": [PackageVersionInfo.from_dict(_item) for _item in obj["versions"]] if obj.get("versions") is not None else None,
            "enableInAppStore": obj.get("enableInAppStore"),
            "installs": obj.get("installs")
        })
        return _obj


