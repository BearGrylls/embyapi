# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.bit_rate import BitRate
from embyapi.models.resolution_with_rate import ResolutionWithRate
from typing import Optional, Set
from typing_extensions import Self

class LevelInformation(BaseModel):
    """
    Class for unified presentation of all information associated with a specific codec level.  
    """ # noqa: E501
    short_name: Optional[StrictStr] = Field(default=None, description="The enum member name of the level.", alias="ShortName")
    description: Optional[StrictStr] = Field(default=None, description="The common name of the level.", alias="Description")
    ordinal: Optional[StrictInt] = Field(default=None, description="A value indicating the level's ranking relative to other levels.", alias="Ordinal")
    max_bit_rate: Optional[BitRate] = Field(default=None, alias="MaxBitRate")
    max_bit_rate_display: Optional[StrictStr] = Field(default=None, description="A display value of the `Emby.Media.Model.Types.LevelInformation.MaxBitRate` property.", alias="MaxBitRateDisplay")
    id: Optional[StrictStr] = Field(default=None, description="A unique identifier.", alias="Id")
    resolution_rates: Optional[List[ResolutionWithRate]] = Field(default=None, description="Examples for the maximum supported combinations of resolution and rate for this level.", alias="ResolutionRates")
    resolution_rate_strings: Optional[List[StrictStr]] = Field(default=None, description="Examples for the maximum supported combinations of resolution and rate for this level as string values.", alias="ResolutionRateStrings")
    resolution_rates_display: Optional[StrictStr] = Field(default=None, description="A single string from the `Emby.Media.Model.Types.LevelInformation.ResolutionRateStrings` list.", alias="ResolutionRatesDisplay")
    __properties: ClassVar[List[str]] = ["ShortName", "Description", "Ordinal", "MaxBitRate", "MaxBitRateDisplay", "Id", "ResolutionRates", "ResolutionRateStrings", "ResolutionRatesDisplay"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LevelInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of max_bit_rate
        if self.max_bit_rate:
            _dict['MaxBitRate'] = self.max_bit_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resolution_rates (list)
        _items = []
        if self.resolution_rates:
            for _item in self.resolution_rates:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ResolutionRates'] = _items
        # set to None if ordinal (nullable) is None
        # and model_fields_set contains the field
        if self.ordinal is None and "ordinal" in self.model_fields_set:
            _dict['Ordinal'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LevelInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ShortName": obj.get("ShortName"),
            "Description": obj.get("Description"),
            "Ordinal": obj.get("Ordinal"),
            "MaxBitRate": BitRate.from_dict(obj["MaxBitRate"]) if obj.get("MaxBitRate") is not None else None,
            "MaxBitRateDisplay": obj.get("MaxBitRateDisplay"),
            "Id": obj.get("Id"),
            "ResolutionRates": [ResolutionWithRate.from_dict(_item) for _item in obj["ResolutionRates"]] if obj.get("ResolutionRates") is not None else None,
            "ResolutionRateStrings": obj.get("ResolutionRateStrings"),
            "ResolutionRatesDisplay": obj.get("ResolutionRatesDisplay")
        })
        return _obj


