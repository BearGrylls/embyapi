# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.dlna_profile_type import DlnaProfileType
from embyapi.models.encoding_context import EncodingContext
from embyapi.models.transcode_seek_info import TranscodeSeekInfo
from typing import Optional, Set
from typing_extensions import Self

class TranscodingProfile(BaseModel):
    """
    TranscodingProfile
    """ # noqa: E501
    container: Optional[StrictStr] = Field(default=None, alias="Container")
    type: Optional[DlnaProfileType] = Field(default=None, alias="Type")
    video_codec: Optional[StrictStr] = Field(default=None, alias="VideoCodec")
    audio_codec: Optional[StrictStr] = Field(default=None, alias="AudioCodec")
    protocol: Optional[StrictStr] = Field(default=None, alias="Protocol")
    estimate_content_length: Optional[StrictBool] = Field(default=None, alias="EstimateContentLength")
    enable_mpegts_m2_ts_mode: Optional[StrictBool] = Field(default=None, alias="EnableMpegtsM2TsMode")
    transcode_seek_info: Optional[TranscodeSeekInfo] = Field(default=None, alias="TranscodeSeekInfo")
    copy_timestamps: Optional[StrictBool] = Field(default=None, alias="CopyTimestamps")
    context: Optional[EncodingContext] = Field(default=None, alias="Context")
    max_audio_channels: Optional[StrictStr] = Field(default=None, alias="MaxAudioChannels")
    min_segments: Optional[StrictInt] = Field(default=None, alias="MinSegments")
    segment_length: Optional[StrictInt] = Field(default=None, alias="SegmentLength")
    break_on_non_key_frames: Optional[StrictBool] = Field(default=None, alias="BreakOnNonKeyFrames")
    allow_interlaced_video_stream_copy: Optional[StrictBool] = Field(default=None, alias="AllowInterlacedVideoStreamCopy")
    manifest_subtitles: Optional[StrictStr] = Field(default=None, alias="ManifestSubtitles")
    max_manifest_subtitles: Optional[StrictInt] = Field(default=None, alias="MaxManifestSubtitles")
    max_width: Optional[StrictInt] = Field(default=None, alias="MaxWidth")
    max_height: Optional[StrictInt] = Field(default=None, alias="MaxHeight")
    fill_empty_subtitle_segments: Optional[StrictBool] = Field(default=None, alias="FillEmptySubtitleSegments")
    __properties: ClassVar[List[str]] = ["Container", "Type", "VideoCodec", "AudioCodec", "Protocol", "EstimateContentLength", "EnableMpegtsM2TsMode", "TranscodeSeekInfo", "CopyTimestamps", "Context", "MaxAudioChannels", "MinSegments", "SegmentLength", "BreakOnNonKeyFrames", "AllowInterlacedVideoStreamCopy", "ManifestSubtitles", "MaxManifestSubtitles", "MaxWidth", "MaxHeight", "FillEmptySubtitleSegments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranscodingProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranscodingProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Container": obj.get("Container"),
            "Type": obj.get("Type"),
            "VideoCodec": obj.get("VideoCodec"),
            "AudioCodec": obj.get("AudioCodec"),
            "Protocol": obj.get("Protocol"),
            "EstimateContentLength": obj.get("EstimateContentLength"),
            "EnableMpegtsM2TsMode": obj.get("EnableMpegtsM2TsMode"),
            "TranscodeSeekInfo": obj.get("TranscodeSeekInfo"),
            "CopyTimestamps": obj.get("CopyTimestamps"),
            "Context": obj.get("Context"),
            "MaxAudioChannels": obj.get("MaxAudioChannels"),
            "MinSegments": obj.get("MinSegments"),
            "SegmentLength": obj.get("SegmentLength"),
            "BreakOnNonKeyFrames": obj.get("BreakOnNonKeyFrames"),
            "AllowInterlacedVideoStreamCopy": obj.get("AllowInterlacedVideoStreamCopy"),
            "ManifestSubtitles": obj.get("ManifestSubtitles"),
            "MaxManifestSubtitles": obj.get("MaxManifestSubtitles"),
            "MaxWidth": obj.get("MaxWidth"),
            "MaxHeight": obj.get("MaxHeight"),
            "FillEmptySubtitleSegments": obj.get("FillEmptySubtitleSegments")
        })
        return _obj


