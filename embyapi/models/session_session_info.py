# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.base_item_dto import BaseItemDto
from embyapi.models.player_state_info import PlayerStateInfo
from embyapi.models.session_user_info import SessionUserInfo
from embyapi.models.transcoding_info import TranscodingInfo
from typing import Optional, Set
from typing_extensions import Self

class SessionSessionInfo(BaseModel):
    """
    Class SessionInfo  
    """ # noqa: E501
    play_state: Optional[PlayerStateInfo] = Field(default=None, alias="PlayState")
    additional_users: Optional[List[SessionUserInfo]] = Field(default=None, alias="AdditionalUsers")
    remote_end_point: Optional[StrictStr] = Field(default=None, description="The remote end point.", alias="RemoteEndPoint")
    protocol: Optional[StrictStr] = Field(default=None, alias="Protocol")
    playable_media_types: Optional[List[StrictStr]] = Field(default=None, description="The playable media types.", alias="PlayableMediaTypes")
    playlist_item_id: Optional[StrictStr] = Field(default=None, alias="PlaylistItemId")
    playlist_index: Optional[StrictInt] = Field(default=None, alias="PlaylistIndex")
    playlist_length: Optional[StrictInt] = Field(default=None, alias="PlaylistLength")
    id: Optional[StrictStr] = Field(default=None, description="The id.", alias="Id")
    server_id: Optional[StrictStr] = Field(default=None, alias="ServerId")
    user_id: Optional[StrictStr] = Field(default=None, description="The user id.", alias="UserId")
    user_name: Optional[StrictStr] = Field(default=None, description="The username.", alias="UserName")
    user_primary_image_tag: Optional[StrictStr] = Field(default=None, alias="UserPrimaryImageTag")
    client: Optional[StrictStr] = Field(default=None, description="The type of the client.", alias="Client")
    last_activity_date: Optional[datetime] = Field(default=None, description="The last activity date.", alias="LastActivityDate")
    device_name: Optional[StrictStr] = Field(default=None, description="The name of the device.", alias="DeviceName")
    device_type: Optional[StrictStr] = Field(default=None, alias="DeviceType")
    now_playing_item: Optional[BaseItemDto] = Field(default=None, alias="NowPlayingItem")
    internal_device_id: Optional[StrictInt] = Field(default=None, alias="InternalDeviceId")
    device_id: Optional[StrictStr] = Field(default=None, description="The device id.", alias="DeviceId")
    application_version: Optional[StrictStr] = Field(default=None, description="The application version.", alias="ApplicationVersion")
    app_icon_url: Optional[StrictStr] = Field(default=None, description="The application icon URL.", alias="AppIconUrl")
    supported_commands: Optional[List[StrictStr]] = Field(default=None, description="The supported commands.", alias="SupportedCommands")
    transcoding_info: Optional[TranscodingInfo] = Field(default=None, alias="TranscodingInfo")
    supports_remote_control: Optional[StrictBool] = Field(default=None, alias="SupportsRemoteControl")
    __properties: ClassVar[List[str]] = ["PlayState", "AdditionalUsers", "RemoteEndPoint", "Protocol", "PlayableMediaTypes", "PlaylistItemId", "PlaylistIndex", "PlaylistLength", "Id", "ServerId", "UserId", "UserName", "UserPrimaryImageTag", "Client", "LastActivityDate", "DeviceName", "DeviceType", "NowPlayingItem", "InternalDeviceId", "DeviceId", "ApplicationVersion", "AppIconUrl", "SupportedCommands", "TranscodingInfo", "SupportsRemoteControl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SessionSessionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of play_state
        if self.play_state:
            _dict['PlayState'] = self.play_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in additional_users (list)
        _items = []
        if self.additional_users:
            for _item in self.additional_users:
                if _item:
                    _items.append(_item.to_dict())
            _dict['AdditionalUsers'] = _items
        # override the default output from pydantic by calling `to_dict()` of now_playing_item
        if self.now_playing_item:
            _dict['NowPlayingItem'] = self.now_playing_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transcoding_info
        if self.transcoding_info:
            _dict['TranscodingInfo'] = self.transcoding_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SessionSessionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "PlayState": PlayerStateInfo.from_dict(obj["PlayState"]) if obj.get("PlayState") is not None else None,
            "AdditionalUsers": [SessionUserInfo.from_dict(_item) for _item in obj["AdditionalUsers"]] if obj.get("AdditionalUsers") is not None else None,
            "RemoteEndPoint": obj.get("RemoteEndPoint"),
            "Protocol": obj.get("Protocol"),
            "PlayableMediaTypes": obj.get("PlayableMediaTypes"),
            "PlaylistItemId": obj.get("PlaylistItemId"),
            "PlaylistIndex": obj.get("PlaylistIndex"),
            "PlaylistLength": obj.get("PlaylistLength"),
            "Id": obj.get("Id"),
            "ServerId": obj.get("ServerId"),
            "UserId": obj.get("UserId"),
            "UserName": obj.get("UserName"),
            "UserPrimaryImageTag": obj.get("UserPrimaryImageTag"),
            "Client": obj.get("Client"),
            "LastActivityDate": obj.get("LastActivityDate"),
            "DeviceName": obj.get("DeviceName"),
            "DeviceType": obj.get("DeviceType"),
            "NowPlayingItem": BaseItemDto.from_dict(obj["NowPlayingItem"]) if obj.get("NowPlayingItem") is not None else None,
            "InternalDeviceId": obj.get("InternalDeviceId"),
            "DeviceId": obj.get("DeviceId"),
            "ApplicationVersion": obj.get("ApplicationVersion"),
            "AppIconUrl": obj.get("AppIconUrl"),
            "SupportedCommands": obj.get("SupportedCommands"),
            "TranscodingInfo": TranscodingInfo.from_dict(obj["TranscodingInfo"]) if obj.get("TranscodingInfo") is not None else None,
            "SupportsRemoteControl": obj.get("SupportsRemoteControl")
        })
        return _obj


