# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from embyapi.models.task_completion_status import TaskCompletionStatus
from typing import Optional, Set
from typing_extensions import Self

class TaskResult(BaseModel):
    """
    Class TaskExecutionInfo  
    """ # noqa: E501
    start_time_utc: Optional[datetime] = Field(default=None, description="The start time UTC.", alias="StartTimeUtc")
    end_time_utc: Optional[datetime] = Field(default=None, description="The end time UTC.", alias="EndTimeUtc")
    status: Optional[TaskCompletionStatus] = Field(default=None, alias="Status")
    name: Optional[StrictStr] = Field(default=None, description="The name.", alias="Name")
    key: Optional[StrictStr] = Field(default=None, description="The key.", alias="Key")
    id: Optional[StrictStr] = Field(default=None, description="The id.", alias="Id")
    error_message: Optional[StrictStr] = Field(default=None, description="The error message.", alias="ErrorMessage")
    long_error_message: Optional[StrictStr] = Field(default=None, description="The long error message.", alias="LongErrorMessage")
    __properties: ClassVar[List[str]] = ["StartTimeUtc", "EndTimeUtc", "Status", "Name", "Key", "Id", "ErrorMessage", "LongErrorMessage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "StartTimeUtc": obj.get("StartTimeUtc"),
            "EndTimeUtc": obj.get("EndTimeUtc"),
            "Status": obj.get("Status"),
            "Name": obj.get("Name"),
            "Key": obj.get("Key"),
            "Id": obj.get("Id"),
            "ErrorMessage": obj.get("ErrorMessage"),
            "LongErrorMessage": obj.get("LongErrorMessage")
        })
        return _obj


