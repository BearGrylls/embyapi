# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from embyapi.models.remote_subtitle_info import RemoteSubtitleInfo
from embyapi.models.subtitles_subtitle_download_result import SubtitlesSubtitleDownloadResult

from embyapi.api_client import ApiClient, RequestSerialized
from embyapi.api_response import ApiResponse
from embyapi.rest import RESTResponseType


class SubtitleServiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_items_by_id_subtitles_by_index(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Deletes an external subtitle file

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_items_by_id_subtitles_by_index_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_items_by_id_subtitles_by_index_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Deletes an external subtitle file

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_items_by_id_subtitles_by_index_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_items_by_id_subtitles_by_index_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deletes an external subtitle file

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_items_by_id_subtitles_by_index_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_items_by_id_subtitles_by_index_serialize(
        self,
        id,
        media_source_id,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if media_source_id is not None:
            
            _query_params.append(('MediaSourceId', media_source_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Items/{Id}/Subtitles/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_videos_by_id_subtitles_by_index(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Deletes an external subtitle file

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_videos_by_id_subtitles_by_index_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_videos_by_id_subtitles_by_index_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Deletes an external subtitle file

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_videos_by_id_subtitles_by_index_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_videos_by_id_subtitles_by_index_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deletes an external subtitle file

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_videos_by_id_subtitles_by_index_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_videos_by_id_subtitles_by_index_serialize(
        self,
        id,
        media_source_id,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if media_source_id is not None:
            
            _query_params.append(('MediaSourceId', media_source_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Videos/{Id}/Subtitles/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_items_by_id_by_mediasourceid_subtitles_by_index_by_startpositionticks_stream_by_format(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        format: Annotated[StrictStr, Field(description="Format")],
        start_position_ticks: Annotated[StrictInt, Field(description="StartPositionTicks")],
        end_position_ticks: Annotated[Optional[StrictInt], Field(description="EndPositionTicks")] = None,
        copy_timestamps: Annotated[Optional[StrictBool], Field(description="CopyTimestamps")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Gets subtitles in a specified format.

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param format: Format (required)
        :type format: str
        :param start_position_ticks: StartPositionTicks (required)
        :type start_position_ticks: int
        :param end_position_ticks: EndPositionTicks
        :type end_position_ticks: int
        :param copy_timestamps: CopyTimestamps
        :type copy_timestamps: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_by_mediasourceid_subtitles_by_index_by_startpositionticks_stream_by_format_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            format=format,
            start_position_ticks=start_position_ticks,
            end_position_ticks=end_position_ticks,
            copy_timestamps=copy_timestamps,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_items_by_id_by_mediasourceid_subtitles_by_index_by_startpositionticks_stream_by_format_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        format: Annotated[StrictStr, Field(description="Format")],
        start_position_ticks: Annotated[StrictInt, Field(description="StartPositionTicks")],
        end_position_ticks: Annotated[Optional[StrictInt], Field(description="EndPositionTicks")] = None,
        copy_timestamps: Annotated[Optional[StrictBool], Field(description="CopyTimestamps")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Gets subtitles in a specified format.

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param format: Format (required)
        :type format: str
        :param start_position_ticks: StartPositionTicks (required)
        :type start_position_ticks: int
        :param end_position_ticks: EndPositionTicks
        :type end_position_ticks: int
        :param copy_timestamps: CopyTimestamps
        :type copy_timestamps: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_by_mediasourceid_subtitles_by_index_by_startpositionticks_stream_by_format_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            format=format,
            start_position_ticks=start_position_ticks,
            end_position_ticks=end_position_ticks,
            copy_timestamps=copy_timestamps,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_items_by_id_by_mediasourceid_subtitles_by_index_by_startpositionticks_stream_by_format_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        format: Annotated[StrictStr, Field(description="Format")],
        start_position_ticks: Annotated[StrictInt, Field(description="StartPositionTicks")],
        end_position_ticks: Annotated[Optional[StrictInt], Field(description="EndPositionTicks")] = None,
        copy_timestamps: Annotated[Optional[StrictBool], Field(description="CopyTimestamps")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets subtitles in a specified format.

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param format: Format (required)
        :type format: str
        :param start_position_ticks: StartPositionTicks (required)
        :type start_position_ticks: int
        :param end_position_ticks: EndPositionTicks
        :type end_position_ticks: int
        :param copy_timestamps: CopyTimestamps
        :type copy_timestamps: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_by_mediasourceid_subtitles_by_index_by_startpositionticks_stream_by_format_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            format=format,
            start_position_ticks=start_position_ticks,
            end_position_ticks=end_position_ticks,
            copy_timestamps=copy_timestamps,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_items_by_id_by_mediasourceid_subtitles_by_index_by_startpositionticks_stream_by_format_serialize(
        self,
        id,
        media_source_id,
        index,
        format,
        start_position_ticks,
        end_position_ticks,
        copy_timestamps,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if media_source_id is not None:
            _path_params['MediaSourceId'] = media_source_id
        if index is not None:
            _path_params['Index'] = index
        if format is not None:
            _path_params['Format'] = format
        if start_position_ticks is not None:
            _path_params['StartPositionTicks'] = start_position_ticks
        # process the query parameters
        if end_position_ticks is not None:
            
            _query_params.append(('EndPositionTicks', end_position_ticks))
            
        if copy_timestamps is not None:
            
            _query_params.append(('CopyTimestamps', copy_timestamps))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Items/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_items_by_id_by_mediasourceid_subtitles_by_index_stream_by_format(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        format: Annotated[StrictStr, Field(description="Format")],
        start_position_ticks: Annotated[Optional[StrictInt], Field(description="StartPositionTicks")] = None,
        end_position_ticks: Annotated[Optional[StrictInt], Field(description="EndPositionTicks")] = None,
        copy_timestamps: Annotated[Optional[StrictBool], Field(description="CopyTimestamps")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Gets subtitles in a specified format.

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param format: Format (required)
        :type format: str
        :param start_position_ticks: StartPositionTicks
        :type start_position_ticks: int
        :param end_position_ticks: EndPositionTicks
        :type end_position_ticks: int
        :param copy_timestamps: CopyTimestamps
        :type copy_timestamps: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_by_mediasourceid_subtitles_by_index_stream_by_format_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            format=format,
            start_position_ticks=start_position_ticks,
            end_position_ticks=end_position_ticks,
            copy_timestamps=copy_timestamps,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_items_by_id_by_mediasourceid_subtitles_by_index_stream_by_format_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        format: Annotated[StrictStr, Field(description="Format")],
        start_position_ticks: Annotated[Optional[StrictInt], Field(description="StartPositionTicks")] = None,
        end_position_ticks: Annotated[Optional[StrictInt], Field(description="EndPositionTicks")] = None,
        copy_timestamps: Annotated[Optional[StrictBool], Field(description="CopyTimestamps")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Gets subtitles in a specified format.

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param format: Format (required)
        :type format: str
        :param start_position_ticks: StartPositionTicks
        :type start_position_ticks: int
        :param end_position_ticks: EndPositionTicks
        :type end_position_ticks: int
        :param copy_timestamps: CopyTimestamps
        :type copy_timestamps: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_by_mediasourceid_subtitles_by_index_stream_by_format_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            format=format,
            start_position_ticks=start_position_ticks,
            end_position_ticks=end_position_ticks,
            copy_timestamps=copy_timestamps,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_items_by_id_by_mediasourceid_subtitles_by_index_stream_by_format_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        format: Annotated[StrictStr, Field(description="Format")],
        start_position_ticks: Annotated[Optional[StrictInt], Field(description="StartPositionTicks")] = None,
        end_position_ticks: Annotated[Optional[StrictInt], Field(description="EndPositionTicks")] = None,
        copy_timestamps: Annotated[Optional[StrictBool], Field(description="CopyTimestamps")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets subtitles in a specified format.

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param format: Format (required)
        :type format: str
        :param start_position_ticks: StartPositionTicks
        :type start_position_ticks: int
        :param end_position_ticks: EndPositionTicks
        :type end_position_ticks: int
        :param copy_timestamps: CopyTimestamps
        :type copy_timestamps: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_by_mediasourceid_subtitles_by_index_stream_by_format_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            format=format,
            start_position_ticks=start_position_ticks,
            end_position_ticks=end_position_ticks,
            copy_timestamps=copy_timestamps,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_items_by_id_by_mediasourceid_subtitles_by_index_stream_by_format_serialize(
        self,
        id,
        media_source_id,
        index,
        format,
        start_position_ticks,
        end_position_ticks,
        copy_timestamps,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if media_source_id is not None:
            _path_params['MediaSourceId'] = media_source_id
        if index is not None:
            _path_params['Index'] = index
        if format is not None:
            _path_params['Format'] = format
        # process the query parameters
        if start_position_ticks is not None:
            
            _query_params.append(('StartPositionTicks', start_position_ticks))
            
        if end_position_ticks is not None:
            
            _query_params.append(('EndPositionTicks', end_position_ticks))
            
        if copy_timestamps is not None:
            
            _query_params.append(('CopyTimestamps', copy_timestamps))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Items/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_items_by_id_remotesearch_subtitles_by_language(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        language: Annotated[StrictStr, Field(description="Language")],
        is_perfect_match: Annotated[Optional[StrictBool], Field(description="IsPerfectMatch")] = None,
        is_forced: Annotated[Optional[StrictBool], Field(description="IsForced")] = None,
        is_hearing_impaired: Annotated[Optional[StrictBool], Field(description="IsHearingImpaired")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[RemoteSubtitleInfo]:
        """get_items_by_id_remotesearch_subtitles_by_language

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param language: Language (required)
        :type language: str
        :param is_perfect_match: IsPerfectMatch
        :type is_perfect_match: bool
        :param is_forced: IsForced
        :type is_forced: bool
        :param is_hearing_impaired: IsHearingImpaired
        :type is_hearing_impaired: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_remotesearch_subtitles_by_language_serialize(
            id=id,
            media_source_id=media_source_id,
            language=language,
            is_perfect_match=is_perfect_match,
            is_forced=is_forced,
            is_hearing_impaired=is_hearing_impaired,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RemoteSubtitleInfo]",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_items_by_id_remotesearch_subtitles_by_language_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        language: Annotated[StrictStr, Field(description="Language")],
        is_perfect_match: Annotated[Optional[StrictBool], Field(description="IsPerfectMatch")] = None,
        is_forced: Annotated[Optional[StrictBool], Field(description="IsForced")] = None,
        is_hearing_impaired: Annotated[Optional[StrictBool], Field(description="IsHearingImpaired")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[RemoteSubtitleInfo]]:
        """get_items_by_id_remotesearch_subtitles_by_language

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param language: Language (required)
        :type language: str
        :param is_perfect_match: IsPerfectMatch
        :type is_perfect_match: bool
        :param is_forced: IsForced
        :type is_forced: bool
        :param is_hearing_impaired: IsHearingImpaired
        :type is_hearing_impaired: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_remotesearch_subtitles_by_language_serialize(
            id=id,
            media_source_id=media_source_id,
            language=language,
            is_perfect_match=is_perfect_match,
            is_forced=is_forced,
            is_hearing_impaired=is_hearing_impaired,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RemoteSubtitleInfo]",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_items_by_id_remotesearch_subtitles_by_language_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        language: Annotated[StrictStr, Field(description="Language")],
        is_perfect_match: Annotated[Optional[StrictBool], Field(description="IsPerfectMatch")] = None,
        is_forced: Annotated[Optional[StrictBool], Field(description="IsForced")] = None,
        is_hearing_impaired: Annotated[Optional[StrictBool], Field(description="IsHearingImpaired")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_items_by_id_remotesearch_subtitles_by_language

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param language: Language (required)
        :type language: str
        :param is_perfect_match: IsPerfectMatch
        :type is_perfect_match: bool
        :param is_forced: IsForced
        :type is_forced: bool
        :param is_hearing_impaired: IsHearingImpaired
        :type is_hearing_impaired: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_remotesearch_subtitles_by_language_serialize(
            id=id,
            media_source_id=media_source_id,
            language=language,
            is_perfect_match=is_perfect_match,
            is_forced=is_forced,
            is_hearing_impaired=is_hearing_impaired,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[RemoteSubtitleInfo]",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_items_by_id_remotesearch_subtitles_by_language_serialize(
        self,
        id,
        media_source_id,
        language,
        is_perfect_match,
        is_forced,
        is_hearing_impaired,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if language is not None:
            _path_params['Language'] = language
        # process the query parameters
        if media_source_id is not None:
            
            _query_params.append(('MediaSourceId', media_source_id))
            
        if is_perfect_match is not None:
            
            _query_params.append(('IsPerfectMatch', is_perfect_match))
            
        if is_forced is not None:
            
            _query_params.append(('IsForced', is_forced))
            
        if is_hearing_impaired is not None:
            
            _query_params.append(('IsHearingImpaired', is_hearing_impaired))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/xml'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Items/{Id}/RemoteSearch/Subtitles/{Language}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_providers_subtitles_subtitles_by_id(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_providers_subtitles_subtitles_by_id

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_providers_subtitles_subtitles_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_providers_subtitles_subtitles_by_id_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_providers_subtitles_subtitles_by_id

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_providers_subtitles_subtitles_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_providers_subtitles_subtitles_by_id_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_providers_subtitles_subtitles_by_id

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_providers_subtitles_subtitles_by_id_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_providers_subtitles_subtitles_by_id_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Providers/Subtitles/Subtitles/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_videos_by_id_by_mediasourceid_subtitles_by_index_by_startpositionticks_stream_by_format(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        format: Annotated[StrictStr, Field(description="Format")],
        start_position_ticks: Annotated[StrictInt, Field(description="StartPositionTicks")],
        end_position_ticks: Annotated[Optional[StrictInt], Field(description="EndPositionTicks")] = None,
        copy_timestamps: Annotated[Optional[StrictBool], Field(description="CopyTimestamps")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Gets subtitles in a specified format.

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param format: Format (required)
        :type format: str
        :param start_position_ticks: StartPositionTicks (required)
        :type start_position_ticks: int
        :param end_position_ticks: EndPositionTicks
        :type end_position_ticks: int
        :param copy_timestamps: CopyTimestamps
        :type copy_timestamps: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_videos_by_id_by_mediasourceid_subtitles_by_index_by_startpositionticks_stream_by_format_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            format=format,
            start_position_ticks=start_position_ticks,
            end_position_ticks=end_position_ticks,
            copy_timestamps=copy_timestamps,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_videos_by_id_by_mediasourceid_subtitles_by_index_by_startpositionticks_stream_by_format_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        format: Annotated[StrictStr, Field(description="Format")],
        start_position_ticks: Annotated[StrictInt, Field(description="StartPositionTicks")],
        end_position_ticks: Annotated[Optional[StrictInt], Field(description="EndPositionTicks")] = None,
        copy_timestamps: Annotated[Optional[StrictBool], Field(description="CopyTimestamps")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Gets subtitles in a specified format.

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param format: Format (required)
        :type format: str
        :param start_position_ticks: StartPositionTicks (required)
        :type start_position_ticks: int
        :param end_position_ticks: EndPositionTicks
        :type end_position_ticks: int
        :param copy_timestamps: CopyTimestamps
        :type copy_timestamps: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_videos_by_id_by_mediasourceid_subtitles_by_index_by_startpositionticks_stream_by_format_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            format=format,
            start_position_ticks=start_position_ticks,
            end_position_ticks=end_position_ticks,
            copy_timestamps=copy_timestamps,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_videos_by_id_by_mediasourceid_subtitles_by_index_by_startpositionticks_stream_by_format_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        format: Annotated[StrictStr, Field(description="Format")],
        start_position_ticks: Annotated[StrictInt, Field(description="StartPositionTicks")],
        end_position_ticks: Annotated[Optional[StrictInt], Field(description="EndPositionTicks")] = None,
        copy_timestamps: Annotated[Optional[StrictBool], Field(description="CopyTimestamps")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets subtitles in a specified format.

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param format: Format (required)
        :type format: str
        :param start_position_ticks: StartPositionTicks (required)
        :type start_position_ticks: int
        :param end_position_ticks: EndPositionTicks
        :type end_position_ticks: int
        :param copy_timestamps: CopyTimestamps
        :type copy_timestamps: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_videos_by_id_by_mediasourceid_subtitles_by_index_by_startpositionticks_stream_by_format_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            format=format,
            start_position_ticks=start_position_ticks,
            end_position_ticks=end_position_ticks,
            copy_timestamps=copy_timestamps,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_videos_by_id_by_mediasourceid_subtitles_by_index_by_startpositionticks_stream_by_format_serialize(
        self,
        id,
        media_source_id,
        index,
        format,
        start_position_ticks,
        end_position_ticks,
        copy_timestamps,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if media_source_id is not None:
            _path_params['MediaSourceId'] = media_source_id
        if index is not None:
            _path_params['Index'] = index
        if format is not None:
            _path_params['Format'] = format
        if start_position_ticks is not None:
            _path_params['StartPositionTicks'] = start_position_ticks
        # process the query parameters
        if end_position_ticks is not None:
            
            _query_params.append(('EndPositionTicks', end_position_ticks))
            
        if copy_timestamps is not None:
            
            _query_params.append(('CopyTimestamps', copy_timestamps))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_videos_by_id_by_mediasourceid_subtitles_by_index_stream_by_format(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        format: Annotated[StrictStr, Field(description="Format")],
        start_position_ticks: Annotated[Optional[StrictInt], Field(description="StartPositionTicks")] = None,
        end_position_ticks: Annotated[Optional[StrictInt], Field(description="EndPositionTicks")] = None,
        copy_timestamps: Annotated[Optional[StrictBool], Field(description="CopyTimestamps")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Gets subtitles in a specified format.

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param format: Format (required)
        :type format: str
        :param start_position_ticks: StartPositionTicks
        :type start_position_ticks: int
        :param end_position_ticks: EndPositionTicks
        :type end_position_ticks: int
        :param copy_timestamps: CopyTimestamps
        :type copy_timestamps: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_videos_by_id_by_mediasourceid_subtitles_by_index_stream_by_format_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            format=format,
            start_position_ticks=start_position_ticks,
            end_position_ticks=end_position_ticks,
            copy_timestamps=copy_timestamps,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_videos_by_id_by_mediasourceid_subtitles_by_index_stream_by_format_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        format: Annotated[StrictStr, Field(description="Format")],
        start_position_ticks: Annotated[Optional[StrictInt], Field(description="StartPositionTicks")] = None,
        end_position_ticks: Annotated[Optional[StrictInt], Field(description="EndPositionTicks")] = None,
        copy_timestamps: Annotated[Optional[StrictBool], Field(description="CopyTimestamps")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Gets subtitles in a specified format.

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param format: Format (required)
        :type format: str
        :param start_position_ticks: StartPositionTicks
        :type start_position_ticks: int
        :param end_position_ticks: EndPositionTicks
        :type end_position_ticks: int
        :param copy_timestamps: CopyTimestamps
        :type copy_timestamps: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_videos_by_id_by_mediasourceid_subtitles_by_index_stream_by_format_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            format=format,
            start_position_ticks=start_position_ticks,
            end_position_ticks=end_position_ticks,
            copy_timestamps=copy_timestamps,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_videos_by_id_by_mediasourceid_subtitles_by_index_stream_by_format_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        format: Annotated[StrictStr, Field(description="Format")],
        start_position_ticks: Annotated[Optional[StrictInt], Field(description="StartPositionTicks")] = None,
        end_position_ticks: Annotated[Optional[StrictInt], Field(description="EndPositionTicks")] = None,
        copy_timestamps: Annotated[Optional[StrictBool], Field(description="CopyTimestamps")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets subtitles in a specified format.

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param format: Format (required)
        :type format: str
        :param start_position_ticks: StartPositionTicks
        :type start_position_ticks: int
        :param end_position_ticks: EndPositionTicks
        :type end_position_ticks: int
        :param copy_timestamps: CopyTimestamps
        :type copy_timestamps: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_videos_by_id_by_mediasourceid_subtitles_by_index_stream_by_format_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            format=format,
            start_position_ticks=start_position_ticks,
            end_position_ticks=end_position_ticks,
            copy_timestamps=copy_timestamps,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_videos_by_id_by_mediasourceid_subtitles_by_index_stream_by_format_serialize(
        self,
        id,
        media_source_id,
        index,
        format,
        start_position_ticks,
        end_position_ticks,
        copy_timestamps,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if media_source_id is not None:
            _path_params['MediaSourceId'] = media_source_id
        if index is not None:
            _path_params['Index'] = index
        if format is not None:
            _path_params['Format'] = format
        # process the query parameters
        if start_position_ticks is not None:
            
            _query_params.append(('StartPositionTicks', start_position_ticks))
            
        if end_position_ticks is not None:
            
            _query_params.append(('EndPositionTicks', end_position_ticks))
            
        if copy_timestamps is not None:
            
            _query_params.append(('CopyTimestamps', copy_timestamps))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_items_by_id_remotesearch_subtitles_by_subtitleid(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        subtitle_id: Annotated[StrictStr, Field(description="SubtitleId")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SubtitlesSubtitleDownloadResult:
        """post_items_by_id_remotesearch_subtitles_by_subtitleid

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param subtitle_id: SubtitleId (required)
        :type subtitle_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_remotesearch_subtitles_by_subtitleid_serialize(
            id=id,
            media_source_id=media_source_id,
            subtitle_id=subtitle_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SubtitlesSubtitleDownloadResult",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_items_by_id_remotesearch_subtitles_by_subtitleid_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        subtitle_id: Annotated[StrictStr, Field(description="SubtitleId")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SubtitlesSubtitleDownloadResult]:
        """post_items_by_id_remotesearch_subtitles_by_subtitleid

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param subtitle_id: SubtitleId (required)
        :type subtitle_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_remotesearch_subtitles_by_subtitleid_serialize(
            id=id,
            media_source_id=media_source_id,
            subtitle_id=subtitle_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SubtitlesSubtitleDownloadResult",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_items_by_id_remotesearch_subtitles_by_subtitleid_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        subtitle_id: Annotated[StrictStr, Field(description="SubtitleId")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_items_by_id_remotesearch_subtitles_by_subtitleid

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param subtitle_id: SubtitleId (required)
        :type subtitle_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_remotesearch_subtitles_by_subtitleid_serialize(
            id=id,
            media_source_id=media_source_id,
            subtitle_id=subtitle_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SubtitlesSubtitleDownloadResult",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_items_by_id_remotesearch_subtitles_by_subtitleid_serialize(
        self,
        id,
        media_source_id,
        subtitle_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if subtitle_id is not None:
            _path_params['SubtitleId'] = subtitle_id
        # process the query parameters
        if media_source_id is not None:
            
            _query_params.append(('MediaSourceId', media_source_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/xml'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Items/{Id}/RemoteSearch/Subtitles/{SubtitleId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_items_by_id_subtitles_by_index_delete(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Deletes an external subtitle file

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_subtitles_by_index_delete_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_items_by_id_subtitles_by_index_delete_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Deletes an external subtitle file

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_subtitles_by_index_delete_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_items_by_id_subtitles_by_index_delete_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deletes an external subtitle file

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_subtitles_by_index_delete_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_items_by_id_subtitles_by_index_delete_serialize(
        self,
        id,
        media_source_id,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if media_source_id is not None:
            
            _query_params.append(('MediaSourceId', media_source_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Items/{Id}/Subtitles/{Index}/Delete',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_videos_by_id_subtitles_by_index_delete(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Deletes an external subtitle file

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_videos_by_id_subtitles_by_index_delete_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_videos_by_id_subtitles_by_index_delete_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Deletes an external subtitle file

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_videos_by_id_subtitles_by_index_delete_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_videos_by_id_subtitles_by_index_delete_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="MediaSourceId")],
        index: Annotated[StrictInt, Field(description="The subtitle stream index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Deletes an external subtitle file

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param media_source_id: MediaSourceId (required)
        :type media_source_id: str
        :param index: The subtitle stream index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_videos_by_id_subtitles_by_index_delete_serialize(
            id=id,
            media_source_id=media_source_id,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_videos_by_id_subtitles_by_index_delete_serialize(
        self,
        id,
        media_source_id,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if media_source_id is not None:
            
            _query_params.append(('MediaSourceId', media_source_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Videos/{Id}/Subtitles/{Index}/Delete',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


