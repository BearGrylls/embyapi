# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from embyapi.models.query_result_base_item_dto import QueryResultBaseItemDto

from embyapi.api_client import ApiClient, RequestSerialized
from embyapi.api_response import ApiResponse
from embyapi.rest import RESTResponseType


class InstantMixServiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_albums_by_id_instantmix(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QueryResultBaseItemDto:
        """Creates an instant playlist based on a given album

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_albums_by_id_instantmix_serialize(
            id=id,
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_albums_by_id_instantmix_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QueryResultBaseItemDto]:
        """Creates an instant playlist based on a given album

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_albums_by_id_instantmix_serialize(
            id=id,
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_albums_by_id_instantmix_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates an instant playlist based on a given album

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_albums_by_id_instantmix_serialize(
            id=id,
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_albums_by_id_instantmix_serialize(
        self,
        id,
        include_item_types,
        enable_images,
        enable_user_data,
        image_type_limit,
        enable_image_types,
        user_id,
        limit,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        if include_item_types is not None:
            
            _query_params.append(('IncludeItemTypes', include_item_types))
            
        if enable_images is not None:
            
            _query_params.append(('EnableImages', enable_images))
            
        if enable_user_data is not None:
            
            _query_params.append(('EnableUserData', enable_user_data))
            
        if image_type_limit is not None:
            
            _query_params.append(('ImageTypeLimit', image_type_limit))
            
        if enable_image_types is not None:
            
            _query_params.append(('EnableImageTypes', enable_image_types))
            
        if user_id is not None:
            
            _query_params.append(('UserId', user_id))
            
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if fields is not None:
            
            _query_params.append(('Fields', fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/xml'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Albums/{Id}/InstantMix',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_artists_instantmix(
        self,
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QueryResultBaseItemDto:
        """Creates an instant playlist based on a given artist

        Requires authentication as user

        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_artists_instantmix_serialize(
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_artists_instantmix_with_http_info(
        self,
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QueryResultBaseItemDto]:
        """Creates an instant playlist based on a given artist

        Requires authentication as user

        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_artists_instantmix_serialize(
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_artists_instantmix_without_preload_content(
        self,
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates an instant playlist based on a given artist

        Requires authentication as user

        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_artists_instantmix_serialize(
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_artists_instantmix_serialize(
        self,
        include_item_types,
        enable_images,
        enable_user_data,
        image_type_limit,
        enable_image_types,
        user_id,
        limit,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if include_item_types is not None:
            
            _query_params.append(('IncludeItemTypes', include_item_types))
            
        if enable_images is not None:
            
            _query_params.append(('EnableImages', enable_images))
            
        if enable_user_data is not None:
            
            _query_params.append(('EnableUserData', enable_user_data))
            
        if image_type_limit is not None:
            
            _query_params.append(('ImageTypeLimit', image_type_limit))
            
        if enable_image_types is not None:
            
            _query_params.append(('EnableImageTypes', enable_image_types))
            
        if user_id is not None:
            
            _query_params.append(('UserId', user_id))
            
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if fields is not None:
            
            _query_params.append(('Fields', fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/xml'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Artists/InstantMix',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_audiobooks_nextup(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        start_index: Annotated[Optional[StrictInt], Field(description="Optional. The record index to start at. All items with a lower index will be dropped from the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        album_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by series id")] = None,
        parent_id: Annotated[Optional[StrictStr], Field(description="Specify this to localize the search to a specific item or folder. Omit to use the root")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QueryResultBaseItemDto:
        """Gets a list of next up episodes

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param start_index: Optional. The record index to start at. All items with a lower index will be dropped from the results.
        :type start_index: int
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param album_id: Optional. Filter by series id
        :type album_id: str
        :param parent_id: Specify this to localize the search to a specific item or folder. Omit to use the root
        :type parent_id: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_audiobooks_nextup_serialize(
            user_id=user_id,
            start_index=start_index,
            limit=limit,
            fields=fields,
            album_id=album_id,
            parent_id=parent_id,
            enable_images=enable_images,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            enable_user_data=enable_user_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_audiobooks_nextup_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        start_index: Annotated[Optional[StrictInt], Field(description="Optional. The record index to start at. All items with a lower index will be dropped from the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        album_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by series id")] = None,
        parent_id: Annotated[Optional[StrictStr], Field(description="Specify this to localize the search to a specific item or folder. Omit to use the root")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QueryResultBaseItemDto]:
        """Gets a list of next up episodes

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param start_index: Optional. The record index to start at. All items with a lower index will be dropped from the results.
        :type start_index: int
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param album_id: Optional. Filter by series id
        :type album_id: str
        :param parent_id: Specify this to localize the search to a specific item or folder. Omit to use the root
        :type parent_id: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_audiobooks_nextup_serialize(
            user_id=user_id,
            start_index=start_index,
            limit=limit,
            fields=fields,
            album_id=album_id,
            parent_id=parent_id,
            enable_images=enable_images,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            enable_user_data=enable_user_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_audiobooks_nextup_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        start_index: Annotated[Optional[StrictInt], Field(description="Optional. The record index to start at. All items with a lower index will be dropped from the results.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        album_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by series id")] = None,
        parent_id: Annotated[Optional[StrictStr], Field(description="Specify this to localize the search to a specific item or folder. Omit to use the root")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets a list of next up episodes

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param start_index: Optional. The record index to start at. All items with a lower index will be dropped from the results.
        :type start_index: int
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param album_id: Optional. Filter by series id
        :type album_id: str
        :param parent_id: Specify this to localize the search to a specific item or folder. Omit to use the root
        :type parent_id: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_audiobooks_nextup_serialize(
            user_id=user_id,
            start_index=start_index,
            limit=limit,
            fields=fields,
            album_id=album_id,
            parent_id=parent_id,
            enable_images=enable_images,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            enable_user_data=enable_user_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_audiobooks_nextup_serialize(
        self,
        user_id,
        start_index,
        limit,
        fields,
        album_id,
        parent_id,
        enable_images,
        image_type_limit,
        enable_image_types,
        enable_user_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if user_id is not None:
            
            _query_params.append(('UserId', user_id))
            
        if start_index is not None:
            
            _query_params.append(('StartIndex', start_index))
            
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if fields is not None:
            
            _query_params.append(('Fields', fields))
            
        if album_id is not None:
            
            _query_params.append(('AlbumId', album_id))
            
        if parent_id is not None:
            
            _query_params.append(('ParentId', parent_id))
            
        if enable_images is not None:
            
            _query_params.append(('EnableImages', enable_images))
            
        if image_type_limit is not None:
            
            _query_params.append(('ImageTypeLimit', image_type_limit))
            
        if enable_image_types is not None:
            
            _query_params.append(('EnableImageTypes', enable_image_types))
            
        if enable_user_data is not None:
            
            _query_params.append(('EnableUserData', enable_user_data))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/xml'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/AudioBooks/NextUp',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_items_by_id_instantmix(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QueryResultBaseItemDto:
        """Creates an instant playlist based on a given item

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_instantmix_serialize(
            id=id,
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_items_by_id_instantmix_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QueryResultBaseItemDto]:
        """Creates an instant playlist based on a given item

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_instantmix_serialize(
            id=id,
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_items_by_id_instantmix_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates an instant playlist based on a given item

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_instantmix_serialize(
            id=id,
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_items_by_id_instantmix_serialize(
        self,
        id,
        include_item_types,
        enable_images,
        enable_user_data,
        image_type_limit,
        enable_image_types,
        user_id,
        limit,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        if include_item_types is not None:
            
            _query_params.append(('IncludeItemTypes', include_item_types))
            
        if enable_images is not None:
            
            _query_params.append(('EnableImages', enable_images))
            
        if enable_user_data is not None:
            
            _query_params.append(('EnableUserData', enable_user_data))
            
        if image_type_limit is not None:
            
            _query_params.append(('ImageTypeLimit', image_type_limit))
            
        if enable_image_types is not None:
            
            _query_params.append(('EnableImageTypes', enable_image_types))
            
        if user_id is not None:
            
            _query_params.append(('UserId', user_id))
            
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if fields is not None:
            
            _query_params.append(('Fields', fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/xml'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Items/{Id}/InstantMix',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_musicgenres_by_name_instantmix(
        self,
        name: Annotated[StrictStr, Field(description="The genre name")],
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QueryResultBaseItemDto:
        """Creates an instant playlist based on a music genre

        Requires authentication as user

        :param name: The genre name (required)
        :type name: str
        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_musicgenres_by_name_instantmix_serialize(
            name=name,
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_musicgenres_by_name_instantmix_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="The genre name")],
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QueryResultBaseItemDto]:
        """Creates an instant playlist based on a music genre

        Requires authentication as user

        :param name: The genre name (required)
        :type name: str
        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_musicgenres_by_name_instantmix_serialize(
            name=name,
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_musicgenres_by_name_instantmix_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="The genre name")],
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates an instant playlist based on a music genre

        Requires authentication as user

        :param name: The genre name (required)
        :type name: str
        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_musicgenres_by_name_instantmix_serialize(
            name=name,
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_musicgenres_by_name_instantmix_serialize(
        self,
        name,
        include_item_types,
        enable_images,
        enable_user_data,
        image_type_limit,
        enable_image_types,
        user_id,
        limit,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        # process the query parameters
        if include_item_types is not None:
            
            _query_params.append(('IncludeItemTypes', include_item_types))
            
        if enable_images is not None:
            
            _query_params.append(('EnableImages', enable_images))
            
        if enable_user_data is not None:
            
            _query_params.append(('EnableUserData', enable_user_data))
            
        if image_type_limit is not None:
            
            _query_params.append(('ImageTypeLimit', image_type_limit))
            
        if enable_image_types is not None:
            
            _query_params.append(('EnableImageTypes', enable_image_types))
            
        if user_id is not None:
            
            _query_params.append(('UserId', user_id))
            
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if fields is not None:
            
            _query_params.append(('Fields', fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/xml'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/MusicGenres/{Name}/InstantMix',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_musicgenres_instantmix(
        self,
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QueryResultBaseItemDto:
        """Creates an instant playlist based on a music genre

        Requires authentication as user

        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_musicgenres_instantmix_serialize(
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_musicgenres_instantmix_with_http_info(
        self,
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QueryResultBaseItemDto]:
        """Creates an instant playlist based on a music genre

        Requires authentication as user

        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_musicgenres_instantmix_serialize(
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_musicgenres_instantmix_without_preload_content(
        self,
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates an instant playlist based on a music genre

        Requires authentication as user

        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_musicgenres_instantmix_serialize(
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_musicgenres_instantmix_serialize(
        self,
        include_item_types,
        enable_images,
        enable_user_data,
        image_type_limit,
        enable_image_types,
        user_id,
        limit,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if include_item_types is not None:
            
            _query_params.append(('IncludeItemTypes', include_item_types))
            
        if enable_images is not None:
            
            _query_params.append(('EnableImages', enable_images))
            
        if enable_user_data is not None:
            
            _query_params.append(('EnableUserData', enable_user_data))
            
        if image_type_limit is not None:
            
            _query_params.append(('ImageTypeLimit', image_type_limit))
            
        if enable_image_types is not None:
            
            _query_params.append(('EnableImageTypes', enable_image_types))
            
        if user_id is not None:
            
            _query_params.append(('UserId', user_id))
            
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if fields is not None:
            
            _query_params.append(('Fields', fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/xml'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/MusicGenres/InstantMix',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_playlists_by_id_instantmix(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QueryResultBaseItemDto:
        """Creates an instant playlist based on a given playlist

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_playlists_by_id_instantmix_serialize(
            id=id,
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_playlists_by_id_instantmix_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QueryResultBaseItemDto]:
        """Creates an instant playlist based on a given playlist

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_playlists_by_id_instantmix_serialize(
            id=id,
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_playlists_by_id_instantmix_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates an instant playlist based on a given playlist

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_playlists_by_id_instantmix_serialize(
            id=id,
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_playlists_by_id_instantmix_serialize(
        self,
        id,
        include_item_types,
        enable_images,
        enable_user_data,
        image_type_limit,
        enable_image_types,
        user_id,
        limit,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        if include_item_types is not None:
            
            _query_params.append(('IncludeItemTypes', include_item_types))
            
        if enable_images is not None:
            
            _query_params.append(('EnableImages', enable_images))
            
        if enable_user_data is not None:
            
            _query_params.append(('EnableUserData', enable_user_data))
            
        if image_type_limit is not None:
            
            _query_params.append(('ImageTypeLimit', image_type_limit))
            
        if enable_image_types is not None:
            
            _query_params.append(('EnableImageTypes', enable_image_types))
            
        if user_id is not None:
            
            _query_params.append(('UserId', user_id))
            
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if fields is not None:
            
            _query_params.append(('Fields', fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/xml'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Playlists/{Id}/InstantMix',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_songs_by_id_instantmix(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QueryResultBaseItemDto:
        """Creates an instant playlist based on a given song

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_songs_by_id_instantmix_serialize(
            id=id,
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_songs_by_id_instantmix_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QueryResultBaseItemDto]:
        """Creates an instant playlist based on a given song

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_songs_by_id_instantmix_serialize(
            id=id,
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_songs_by_id_instantmix_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        include_item_types: Annotated[Optional[StrictStr], Field(description="Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.")] = None,
        enable_images: Annotated[Optional[StrictBool], Field(description="Optional, include image information in output")] = None,
        enable_user_data: Annotated[Optional[StrictBool], Field(description="Optional, include user data")] = None,
        image_type_limit: Annotated[Optional[StrictInt], Field(description="Optional, the max number of images to return, per image type")] = None,
        enable_image_types: Annotated[Optional[StrictStr], Field(description="Optional. The image types to include in the output.")] = None,
        user_id: Annotated[Optional[StrictStr], Field(description="Optional. Filter by user id, and attach user data")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Optional. The maximum number of records to return")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Creates an instant playlist based on a given song

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param include_item_types: Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
        :type include_item_types: str
        :param enable_images: Optional, include image information in output
        :type enable_images: bool
        :param enable_user_data: Optional, include user data
        :type enable_user_data: bool
        :param image_type_limit: Optional, the max number of images to return, per image type
        :type image_type_limit: int
        :param enable_image_types: Optional. The image types to include in the output.
        :type enable_image_types: str
        :param user_id: Optional. Filter by user id, and attach user data
        :type user_id: str
        :param limit: Optional. The maximum number of records to return
        :type limit: int
        :param fields: Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
        :type fields: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_songs_by_id_instantmix_serialize(
            id=id,
            include_item_types=include_item_types,
            enable_images=enable_images,
            enable_user_data=enable_user_data,
            image_type_limit=image_type_limit,
            enable_image_types=enable_image_types,
            user_id=user_id,
            limit=limit,
            fields=fields,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "QueryResultBaseItemDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_songs_by_id_instantmix_serialize(
        self,
        id,
        include_item_types,
        enable_images,
        enable_user_data,
        image_type_limit,
        enable_image_types,
        user_id,
        limit,
        fields,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        if include_item_types is not None:
            
            _query_params.append(('IncludeItemTypes', include_item_types))
            
        if enable_images is not None:
            
            _query_params.append(('EnableImages', enable_images))
            
        if enable_user_data is not None:
            
            _query_params.append(('EnableUserData', enable_user_data))
            
        if image_type_limit is not None:
            
            _query_params.append(('ImageTypeLimit', image_type_limit))
            
        if enable_image_types is not None:
            
            _query_params.append(('EnableImageTypes', enable_image_types))
            
        if user_id is not None:
            
            _query_params.append(('UserId', user_id))
            
        if limit is not None:
            
            _query_params.append(('Limit', limit))
            
        if fields is not None:
            
            _query_params.append(('Fields', fields))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/xml'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Songs/{Id}/InstantMix',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


