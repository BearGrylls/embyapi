# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from embyapi.models.api_on_playback_progress import ApiOnPlaybackProgress
from embyapi.models.play_method import PlayMethod
from embyapi.models.playback_progress_info import PlaybackProgressInfo
from embyapi.models.playback_start_info import PlaybackStartInfo
from embyapi.models.playback_stop_info import PlaybackStopInfo
from embyapi.models.repeat_mode import RepeatMode
from embyapi.models.user_item_data_dto import UserItemDataDto

from embyapi.api_client import ApiClient, RequestSerialized
from embyapi.api_response import ApiResponse
from embyapi.rest import RESTResponseType


class PlaystateServiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_users_by_userid_playeditems_by_id(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UserItemDataDto:
        """Marks an item as unplayed

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_users_by_userid_playeditems_by_id_serialize(
            user_id=user_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserItemDataDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_users_by_userid_playeditems_by_id_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UserItemDataDto]:
        """Marks an item as unplayed

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_users_by_userid_playeditems_by_id_serialize(
            user_id=user_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserItemDataDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_users_by_userid_playeditems_by_id_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Marks an item as unplayed

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_users_by_userid_playeditems_by_id_serialize(
            user_id=user_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserItemDataDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_users_by_userid_playeditems_by_id_serialize(
        self,
        user_id,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['UserId'] = user_id
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/xml'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Users/{UserId}/PlayedItems/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_users_by_userid_playingitems_by_id(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="The id of the MediaSource")],
        next_media_type: Annotated[StrictStr, Field(description="The next media type that will play")],
        position_ticks: Annotated[Optional[StrictInt], Field(description="Optional. The position, in ticks, where playback stopped. 1ms = 10000 ticks.")] = None,
        live_stream_id: Optional[StrictStr] = None,
        play_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Reports that a user has stopped playing an item

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param media_source_id: The id of the MediaSource (required)
        :type media_source_id: str
        :param next_media_type: The next media type that will play (required)
        :type next_media_type: str
        :param position_ticks: Optional. The position, in ticks, where playback stopped. 1ms = 10000 ticks.
        :type position_ticks: int
        :param live_stream_id:
        :type live_stream_id: str
        :param play_session_id:
        :type play_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_users_by_userid_playingitems_by_id_serialize(
            user_id=user_id,
            id=id,
            media_source_id=media_source_id,
            next_media_type=next_media_type,
            position_ticks=position_ticks,
            live_stream_id=live_stream_id,
            play_session_id=play_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_users_by_userid_playingitems_by_id_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="The id of the MediaSource")],
        next_media_type: Annotated[StrictStr, Field(description="The next media type that will play")],
        position_ticks: Annotated[Optional[StrictInt], Field(description="Optional. The position, in ticks, where playback stopped. 1ms = 10000 ticks.")] = None,
        live_stream_id: Optional[StrictStr] = None,
        play_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Reports that a user has stopped playing an item

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param media_source_id: The id of the MediaSource (required)
        :type media_source_id: str
        :param next_media_type: The next media type that will play (required)
        :type next_media_type: str
        :param position_ticks: Optional. The position, in ticks, where playback stopped. 1ms = 10000 ticks.
        :type position_ticks: int
        :param live_stream_id:
        :type live_stream_id: str
        :param play_session_id:
        :type play_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_users_by_userid_playingitems_by_id_serialize(
            user_id=user_id,
            id=id,
            media_source_id=media_source_id,
            next_media_type=next_media_type,
            position_ticks=position_ticks,
            live_stream_id=live_stream_id,
            play_session_id=play_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_users_by_userid_playingitems_by_id_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="The id of the MediaSource")],
        next_media_type: Annotated[StrictStr, Field(description="The next media type that will play")],
        position_ticks: Annotated[Optional[StrictInt], Field(description="Optional. The position, in ticks, where playback stopped. 1ms = 10000 ticks.")] = None,
        live_stream_id: Optional[StrictStr] = None,
        play_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Reports that a user has stopped playing an item

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param media_source_id: The id of the MediaSource (required)
        :type media_source_id: str
        :param next_media_type: The next media type that will play (required)
        :type next_media_type: str
        :param position_ticks: Optional. The position, in ticks, where playback stopped. 1ms = 10000 ticks.
        :type position_ticks: int
        :param live_stream_id:
        :type live_stream_id: str
        :param play_session_id:
        :type play_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_users_by_userid_playingitems_by_id_serialize(
            user_id=user_id,
            id=id,
            media_source_id=media_source_id,
            next_media_type=next_media_type,
            position_ticks=position_ticks,
            live_stream_id=live_stream_id,
            play_session_id=play_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_users_by_userid_playingitems_by_id_serialize(
        self,
        user_id,
        id,
        media_source_id,
        next_media_type,
        position_ticks,
        live_stream_id,
        play_session_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['UserId'] = user_id
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        if media_source_id is not None:
            
            _query_params.append(('MediaSourceId', media_source_id))
            
        if next_media_type is not None:
            
            _query_params.append(('NextMediaType', next_media_type))
            
        if position_ticks is not None:
            
            _query_params.append(('PositionTicks', position_ticks))
            
        if live_stream_id is not None:
            
            _query_params.append(('LiveStreamId', live_stream_id))
            
        if play_session_id is not None:
            
            _query_params.append(('PlaySessionId', play_session_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Users/{UserId}/PlayingItems/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_sessions_playing(
        self,
        playback_start_info: Annotated[PlaybackStartInfo, Field(description="PlaybackStartInfo: ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Reports playback has started within a session

        Requires authentication as user

        :param playback_start_info: PlaybackStartInfo:  (required)
        :type playback_start_info: PlaybackStartInfo
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_sessions_playing_serialize(
            playback_start_info=playback_start_info,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_sessions_playing_with_http_info(
        self,
        playback_start_info: Annotated[PlaybackStartInfo, Field(description="PlaybackStartInfo: ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Reports playback has started within a session

        Requires authentication as user

        :param playback_start_info: PlaybackStartInfo:  (required)
        :type playback_start_info: PlaybackStartInfo
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_sessions_playing_serialize(
            playback_start_info=playback_start_info,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_sessions_playing_without_preload_content(
        self,
        playback_start_info: Annotated[PlaybackStartInfo, Field(description="PlaybackStartInfo: ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Reports playback has started within a session

        Requires authentication as user

        :param playback_start_info: PlaybackStartInfo:  (required)
        :type playback_start_info: PlaybackStartInfo
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_sessions_playing_serialize(
            playback_start_info=playback_start_info,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_sessions_playing_serialize(
        self,
        playback_start_info,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if playback_start_info is not None:
            _body_params = playback_start_info



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/xml'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Sessions/Playing',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_sessions_playing_ping(
        self,
        play_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Pings a playback session

        Requires authentication as user

        :param play_session_id:
        :type play_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_sessions_playing_ping_serialize(
            play_session_id=play_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_sessions_playing_ping_with_http_info(
        self,
        play_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Pings a playback session

        Requires authentication as user

        :param play_session_id:
        :type play_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_sessions_playing_ping_serialize(
            play_session_id=play_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_sessions_playing_ping_without_preload_content(
        self,
        play_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Pings a playback session

        Requires authentication as user

        :param play_session_id:
        :type play_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_sessions_playing_ping_serialize(
            play_session_id=play_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_sessions_playing_ping_serialize(
        self,
        play_session_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if play_session_id is not None:
            
            _query_params.append(('PlaySessionId', play_session_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Sessions/Playing/Ping',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_sessions_playing_progress(
        self,
        playback_progress_info: Annotated[PlaybackProgressInfo, Field(description="PlaybackProgressInfo: ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Reports playback progress within a session

        Requires authentication as user

        :param playback_progress_info: PlaybackProgressInfo:  (required)
        :type playback_progress_info: PlaybackProgressInfo
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_sessions_playing_progress_serialize(
            playback_progress_info=playback_progress_info,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_sessions_playing_progress_with_http_info(
        self,
        playback_progress_info: Annotated[PlaybackProgressInfo, Field(description="PlaybackProgressInfo: ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Reports playback progress within a session

        Requires authentication as user

        :param playback_progress_info: PlaybackProgressInfo:  (required)
        :type playback_progress_info: PlaybackProgressInfo
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_sessions_playing_progress_serialize(
            playback_progress_info=playback_progress_info,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_sessions_playing_progress_without_preload_content(
        self,
        playback_progress_info: Annotated[PlaybackProgressInfo, Field(description="PlaybackProgressInfo: ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Reports playback progress within a session

        Requires authentication as user

        :param playback_progress_info: PlaybackProgressInfo:  (required)
        :type playback_progress_info: PlaybackProgressInfo
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_sessions_playing_progress_serialize(
            playback_progress_info=playback_progress_info,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_sessions_playing_progress_serialize(
        self,
        playback_progress_info,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if playback_progress_info is not None:
            _body_params = playback_progress_info



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/xml'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Sessions/Playing/Progress',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_sessions_playing_stopped(
        self,
        playback_stop_info: Annotated[PlaybackStopInfo, Field(description="PlaybackStopInfo: ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Reports playback has stopped within a session

        Requires authentication as user

        :param playback_stop_info: PlaybackStopInfo:  (required)
        :type playback_stop_info: PlaybackStopInfo
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_sessions_playing_stopped_serialize(
            playback_stop_info=playback_stop_info,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_sessions_playing_stopped_with_http_info(
        self,
        playback_stop_info: Annotated[PlaybackStopInfo, Field(description="PlaybackStopInfo: ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Reports playback has stopped within a session

        Requires authentication as user

        :param playback_stop_info: PlaybackStopInfo:  (required)
        :type playback_stop_info: PlaybackStopInfo
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_sessions_playing_stopped_serialize(
            playback_stop_info=playback_stop_info,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_sessions_playing_stopped_without_preload_content(
        self,
        playback_stop_info: Annotated[PlaybackStopInfo, Field(description="PlaybackStopInfo: ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Reports playback has stopped within a session

        Requires authentication as user

        :param playback_stop_info: PlaybackStopInfo:  (required)
        :type playback_stop_info: PlaybackStopInfo
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_sessions_playing_stopped_serialize(
            playback_stop_info=playback_stop_info,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_sessions_playing_stopped_serialize(
        self,
        playback_stop_info,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if playback_stop_info is not None:
            _body_params = playback_stop_info



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/xml'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Sessions/Playing/Stopped',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_users_by_userid_items_by_itemid_userdata(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        item_id: StrictStr,
        user_item_data_dto: Annotated[UserItemDataDto, Field(description="UserItemDataDto: ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Updates userdata for an item

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param item_id: (required)
        :type item_id: str
        :param user_item_data_dto: UserItemDataDto:  (required)
        :type user_item_data_dto: UserItemDataDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_items_by_itemid_userdata_serialize(
            user_id=user_id,
            item_id=item_id,
            user_item_data_dto=user_item_data_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_users_by_userid_items_by_itemid_userdata_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        item_id: StrictStr,
        user_item_data_dto: Annotated[UserItemDataDto, Field(description="UserItemDataDto: ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Updates userdata for an item

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param item_id: (required)
        :type item_id: str
        :param user_item_data_dto: UserItemDataDto:  (required)
        :type user_item_data_dto: UserItemDataDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_items_by_itemid_userdata_serialize(
            user_id=user_id,
            item_id=item_id,
            user_item_data_dto=user_item_data_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_users_by_userid_items_by_itemid_userdata_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        item_id: StrictStr,
        user_item_data_dto: Annotated[UserItemDataDto, Field(description="UserItemDataDto: ")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Updates userdata for an item

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param item_id: (required)
        :type item_id: str
        :param user_item_data_dto: UserItemDataDto:  (required)
        :type user_item_data_dto: UserItemDataDto
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_items_by_itemid_userdata_serialize(
            user_id=user_id,
            item_id=item_id,
            user_item_data_dto=user_item_data_dto,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_users_by_userid_items_by_itemid_userdata_serialize(
        self,
        user_id,
        item_id,
        user_item_data_dto,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['UserId'] = user_id
        if item_id is not None:
            _path_params['ItemId'] = item_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if user_item_data_dto is not None:
            _body_params = user_item_data_dto



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/xml'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Users/{UserId}/Items/{ItemId}/UserData',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_users_by_userid_playeditems_by_id(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        date_played: Annotated[Optional[StrictStr], Field(description="The date the item was played (if any). Format = yyyyMMddHHmmss")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UserItemDataDto:
        """Marks an item as played

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param date_played: The date the item was played (if any). Format = yyyyMMddHHmmss
        :type date_played: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_playeditems_by_id_serialize(
            user_id=user_id,
            id=id,
            date_played=date_played,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserItemDataDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_users_by_userid_playeditems_by_id_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        date_played: Annotated[Optional[StrictStr], Field(description="The date the item was played (if any). Format = yyyyMMddHHmmss")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UserItemDataDto]:
        """Marks an item as played

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param date_played: The date the item was played (if any). Format = yyyyMMddHHmmss
        :type date_played: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_playeditems_by_id_serialize(
            user_id=user_id,
            id=id,
            date_played=date_played,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserItemDataDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_users_by_userid_playeditems_by_id_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        date_played: Annotated[Optional[StrictStr], Field(description="The date the item was played (if any). Format = yyyyMMddHHmmss")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Marks an item as played

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param date_played: The date the item was played (if any). Format = yyyyMMddHHmmss
        :type date_played: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_playeditems_by_id_serialize(
            user_id=user_id,
            id=id,
            date_played=date_played,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserItemDataDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_users_by_userid_playeditems_by_id_serialize(
        self,
        user_id,
        id,
        date_played,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['UserId'] = user_id
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        if date_played is not None:
            
            _query_params.append(('DatePlayed', date_played))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/xml'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Users/{UserId}/PlayedItems/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_users_by_userid_playeditems_by_id_delete(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UserItemDataDto:
        """Marks an item as unplayed

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_playeditems_by_id_delete_serialize(
            user_id=user_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserItemDataDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_users_by_userid_playeditems_by_id_delete_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UserItemDataDto]:
        """Marks an item as unplayed

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_playeditems_by_id_delete_serialize(
            user_id=user_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserItemDataDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_users_by_userid_playeditems_by_id_delete_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Marks an item as unplayed

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_playeditems_by_id_delete_serialize(
            user_id=user_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UserItemDataDto",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_users_by_userid_playeditems_by_id_delete_serialize(
        self,
        user_id,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['UserId'] = user_id
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/xml'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Users/{UserId}/PlayedItems/{Id}/Delete',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_users_by_userid_playingitems_by_id(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="The id of the MediaSource")],
        can_seek: Annotated[Optional[StrictBool], Field(description="Indicates if the client can seek")] = None,
        audio_stream_index: Optional[StrictInt] = None,
        subtitle_stream_index: Optional[StrictInt] = None,
        play_method: Optional[PlayMethod] = None,
        live_stream_id: Optional[StrictStr] = None,
        play_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Reports that a user has begun playing an item

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param media_source_id: The id of the MediaSource (required)
        :type media_source_id: str
        :param can_seek: Indicates if the client can seek
        :type can_seek: bool
        :param audio_stream_index:
        :type audio_stream_index: int
        :param subtitle_stream_index:
        :type subtitle_stream_index: int
        :param play_method:
        :type play_method: PlayMethod
        :param live_stream_id:
        :type live_stream_id: str
        :param play_session_id:
        :type play_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_playingitems_by_id_serialize(
            user_id=user_id,
            id=id,
            media_source_id=media_source_id,
            can_seek=can_seek,
            audio_stream_index=audio_stream_index,
            subtitle_stream_index=subtitle_stream_index,
            play_method=play_method,
            live_stream_id=live_stream_id,
            play_session_id=play_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_users_by_userid_playingitems_by_id_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="The id of the MediaSource")],
        can_seek: Annotated[Optional[StrictBool], Field(description="Indicates if the client can seek")] = None,
        audio_stream_index: Optional[StrictInt] = None,
        subtitle_stream_index: Optional[StrictInt] = None,
        play_method: Optional[PlayMethod] = None,
        live_stream_id: Optional[StrictStr] = None,
        play_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Reports that a user has begun playing an item

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param media_source_id: The id of the MediaSource (required)
        :type media_source_id: str
        :param can_seek: Indicates if the client can seek
        :type can_seek: bool
        :param audio_stream_index:
        :type audio_stream_index: int
        :param subtitle_stream_index:
        :type subtitle_stream_index: int
        :param play_method:
        :type play_method: PlayMethod
        :param live_stream_id:
        :type live_stream_id: str
        :param play_session_id:
        :type play_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_playingitems_by_id_serialize(
            user_id=user_id,
            id=id,
            media_source_id=media_source_id,
            can_seek=can_seek,
            audio_stream_index=audio_stream_index,
            subtitle_stream_index=subtitle_stream_index,
            play_method=play_method,
            live_stream_id=live_stream_id,
            play_session_id=play_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_users_by_userid_playingitems_by_id_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="The id of the MediaSource")],
        can_seek: Annotated[Optional[StrictBool], Field(description="Indicates if the client can seek")] = None,
        audio_stream_index: Optional[StrictInt] = None,
        subtitle_stream_index: Optional[StrictInt] = None,
        play_method: Optional[PlayMethod] = None,
        live_stream_id: Optional[StrictStr] = None,
        play_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Reports that a user has begun playing an item

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param media_source_id: The id of the MediaSource (required)
        :type media_source_id: str
        :param can_seek: Indicates if the client can seek
        :type can_seek: bool
        :param audio_stream_index:
        :type audio_stream_index: int
        :param subtitle_stream_index:
        :type subtitle_stream_index: int
        :param play_method:
        :type play_method: PlayMethod
        :param live_stream_id:
        :type live_stream_id: str
        :param play_session_id:
        :type play_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_playingitems_by_id_serialize(
            user_id=user_id,
            id=id,
            media_source_id=media_source_id,
            can_seek=can_seek,
            audio_stream_index=audio_stream_index,
            subtitle_stream_index=subtitle_stream_index,
            play_method=play_method,
            live_stream_id=live_stream_id,
            play_session_id=play_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_users_by_userid_playingitems_by_id_serialize(
        self,
        user_id,
        id,
        media_source_id,
        can_seek,
        audio_stream_index,
        subtitle_stream_index,
        play_method,
        live_stream_id,
        play_session_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['UserId'] = user_id
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        if media_source_id is not None:
            
            _query_params.append(('MediaSourceId', media_source_id))
            
        if can_seek is not None:
            
            _query_params.append(('CanSeek', can_seek))
            
        if audio_stream_index is not None:
            
            _query_params.append(('AudioStreamIndex', audio_stream_index))
            
        if subtitle_stream_index is not None:
            
            _query_params.append(('SubtitleStreamIndex', subtitle_stream_index))
            
        if play_method is not None:
            
            _query_params.append(('PlayMethod', play_method.value))
            
        if live_stream_id is not None:
            
            _query_params.append(('LiveStreamId', live_stream_id))
            
        if play_session_id is not None:
            
            _query_params.append(('PlaySessionId', play_session_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Users/{UserId}/PlayingItems/{Id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_users_by_userid_playingitems_by_id_delete(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="The id of the MediaSource")],
        next_media_type: Annotated[StrictStr, Field(description="The next media type that will play")],
        position_ticks: Annotated[Optional[StrictInt], Field(description="Optional. The position, in ticks, where playback stopped. 1ms = 10000 ticks.")] = None,
        live_stream_id: Optional[StrictStr] = None,
        play_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Reports that a user has stopped playing an item

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param media_source_id: The id of the MediaSource (required)
        :type media_source_id: str
        :param next_media_type: The next media type that will play (required)
        :type next_media_type: str
        :param position_ticks: Optional. The position, in ticks, where playback stopped. 1ms = 10000 ticks.
        :type position_ticks: int
        :param live_stream_id:
        :type live_stream_id: str
        :param play_session_id:
        :type play_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_playingitems_by_id_delete_serialize(
            user_id=user_id,
            id=id,
            media_source_id=media_source_id,
            next_media_type=next_media_type,
            position_ticks=position_ticks,
            live_stream_id=live_stream_id,
            play_session_id=play_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_users_by_userid_playingitems_by_id_delete_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="The id of the MediaSource")],
        next_media_type: Annotated[StrictStr, Field(description="The next media type that will play")],
        position_ticks: Annotated[Optional[StrictInt], Field(description="Optional. The position, in ticks, where playback stopped. 1ms = 10000 ticks.")] = None,
        live_stream_id: Optional[StrictStr] = None,
        play_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Reports that a user has stopped playing an item

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param media_source_id: The id of the MediaSource (required)
        :type media_source_id: str
        :param next_media_type: The next media type that will play (required)
        :type next_media_type: str
        :param position_ticks: Optional. The position, in ticks, where playback stopped. 1ms = 10000 ticks.
        :type position_ticks: int
        :param live_stream_id:
        :type live_stream_id: str
        :param play_session_id:
        :type play_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_playingitems_by_id_delete_serialize(
            user_id=user_id,
            id=id,
            media_source_id=media_source_id,
            next_media_type=next_media_type,
            position_ticks=position_ticks,
            live_stream_id=live_stream_id,
            play_session_id=play_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_users_by_userid_playingitems_by_id_delete_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="The id of the MediaSource")],
        next_media_type: Annotated[StrictStr, Field(description="The next media type that will play")],
        position_ticks: Annotated[Optional[StrictInt], Field(description="Optional. The position, in ticks, where playback stopped. 1ms = 10000 ticks.")] = None,
        live_stream_id: Optional[StrictStr] = None,
        play_session_id: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Reports that a user has stopped playing an item

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param media_source_id: The id of the MediaSource (required)
        :type media_source_id: str
        :param next_media_type: The next media type that will play (required)
        :type next_media_type: str
        :param position_ticks: Optional. The position, in ticks, where playback stopped. 1ms = 10000 ticks.
        :type position_ticks: int
        :param live_stream_id:
        :type live_stream_id: str
        :param play_session_id:
        :type play_session_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_playingitems_by_id_delete_serialize(
            user_id=user_id,
            id=id,
            media_source_id=media_source_id,
            next_media_type=next_media_type,
            position_ticks=position_ticks,
            live_stream_id=live_stream_id,
            play_session_id=play_session_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_users_by_userid_playingitems_by_id_delete_serialize(
        self,
        user_id,
        id,
        media_source_id,
        next_media_type,
        position_ticks,
        live_stream_id,
        play_session_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['UserId'] = user_id
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        if media_source_id is not None:
            
            _query_params.append(('MediaSourceId', media_source_id))
            
        if next_media_type is not None:
            
            _query_params.append(('NextMediaType', next_media_type))
            
        if position_ticks is not None:
            
            _query_params.append(('PositionTicks', position_ticks))
            
        if live_stream_id is not None:
            
            _query_params.append(('LiveStreamId', live_stream_id))
            
        if play_session_id is not None:
            
            _query_params.append(('PlaySessionId', play_session_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Users/{UserId}/PlayingItems/{Id}/Delete',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_users_by_userid_playingitems_by_id_progress(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="The id of the MediaSource")],
        api_on_playback_progress: Annotated[ApiOnPlaybackProgress, Field(description="OnPlaybackProgress")],
        position_ticks: Annotated[Optional[StrictInt], Field(description="Optional. The current position, in ticks. 1ms = 10000 ticks.")] = None,
        is_paused: Annotated[Optional[StrictBool], Field(description="Indicates if the player is paused.")] = None,
        is_muted: Annotated[Optional[StrictBool], Field(description="Indicates if the player is muted.")] = None,
        audio_stream_index: Optional[StrictInt] = None,
        subtitle_stream_index: Optional[StrictInt] = None,
        volume_level: Annotated[Optional[StrictInt], Field(description="Scale of 0-100")] = None,
        play_method: Optional[PlayMethod] = None,
        live_stream_id: Optional[StrictStr] = None,
        play_session_id: Optional[StrictStr] = None,
        repeat_mode: Optional[RepeatMode] = None,
        subtitle_offset: Optional[StrictInt] = None,
        playback_rate: Optional[Union[StrictFloat, StrictInt]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Reports a user's playback progress

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param media_source_id: The id of the MediaSource (required)
        :type media_source_id: str
        :param api_on_playback_progress: OnPlaybackProgress (required)
        :type api_on_playback_progress: ApiOnPlaybackProgress
        :param position_ticks: Optional. The current position, in ticks. 1ms = 10000 ticks.
        :type position_ticks: int
        :param is_paused: Indicates if the player is paused.
        :type is_paused: bool
        :param is_muted: Indicates if the player is muted.
        :type is_muted: bool
        :param audio_stream_index:
        :type audio_stream_index: int
        :param subtitle_stream_index:
        :type subtitle_stream_index: int
        :param volume_level: Scale of 0-100
        :type volume_level: int
        :param play_method:
        :type play_method: PlayMethod
        :param live_stream_id:
        :type live_stream_id: str
        :param play_session_id:
        :type play_session_id: str
        :param repeat_mode:
        :type repeat_mode: RepeatMode
        :param subtitle_offset:
        :type subtitle_offset: int
        :param playback_rate:
        :type playback_rate: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_playingitems_by_id_progress_serialize(
            user_id=user_id,
            id=id,
            media_source_id=media_source_id,
            api_on_playback_progress=api_on_playback_progress,
            position_ticks=position_ticks,
            is_paused=is_paused,
            is_muted=is_muted,
            audio_stream_index=audio_stream_index,
            subtitle_stream_index=subtitle_stream_index,
            volume_level=volume_level,
            play_method=play_method,
            live_stream_id=live_stream_id,
            play_session_id=play_session_id,
            repeat_mode=repeat_mode,
            subtitle_offset=subtitle_offset,
            playback_rate=playback_rate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_users_by_userid_playingitems_by_id_progress_with_http_info(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="The id of the MediaSource")],
        api_on_playback_progress: Annotated[ApiOnPlaybackProgress, Field(description="OnPlaybackProgress")],
        position_ticks: Annotated[Optional[StrictInt], Field(description="Optional. The current position, in ticks. 1ms = 10000 ticks.")] = None,
        is_paused: Annotated[Optional[StrictBool], Field(description="Indicates if the player is paused.")] = None,
        is_muted: Annotated[Optional[StrictBool], Field(description="Indicates if the player is muted.")] = None,
        audio_stream_index: Optional[StrictInt] = None,
        subtitle_stream_index: Optional[StrictInt] = None,
        volume_level: Annotated[Optional[StrictInt], Field(description="Scale of 0-100")] = None,
        play_method: Optional[PlayMethod] = None,
        live_stream_id: Optional[StrictStr] = None,
        play_session_id: Optional[StrictStr] = None,
        repeat_mode: Optional[RepeatMode] = None,
        subtitle_offset: Optional[StrictInt] = None,
        playback_rate: Optional[Union[StrictFloat, StrictInt]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Reports a user's playback progress

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param media_source_id: The id of the MediaSource (required)
        :type media_source_id: str
        :param api_on_playback_progress: OnPlaybackProgress (required)
        :type api_on_playback_progress: ApiOnPlaybackProgress
        :param position_ticks: Optional. The current position, in ticks. 1ms = 10000 ticks.
        :type position_ticks: int
        :param is_paused: Indicates if the player is paused.
        :type is_paused: bool
        :param is_muted: Indicates if the player is muted.
        :type is_muted: bool
        :param audio_stream_index:
        :type audio_stream_index: int
        :param subtitle_stream_index:
        :type subtitle_stream_index: int
        :param volume_level: Scale of 0-100
        :type volume_level: int
        :param play_method:
        :type play_method: PlayMethod
        :param live_stream_id:
        :type live_stream_id: str
        :param play_session_id:
        :type play_session_id: str
        :param repeat_mode:
        :type repeat_mode: RepeatMode
        :param subtitle_offset:
        :type subtitle_offset: int
        :param playback_rate:
        :type playback_rate: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_playingitems_by_id_progress_serialize(
            user_id=user_id,
            id=id,
            media_source_id=media_source_id,
            api_on_playback_progress=api_on_playback_progress,
            position_ticks=position_ticks,
            is_paused=is_paused,
            is_muted=is_muted,
            audio_stream_index=audio_stream_index,
            subtitle_stream_index=subtitle_stream_index,
            volume_level=volume_level,
            play_method=play_method,
            live_stream_id=live_stream_id,
            play_session_id=play_session_id,
            repeat_mode=repeat_mode,
            subtitle_offset=subtitle_offset,
            playback_rate=playback_rate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_users_by_userid_playingitems_by_id_progress_without_preload_content(
        self,
        user_id: Annotated[StrictStr, Field(description="User Id")],
        id: Annotated[StrictStr, Field(description="Item Id")],
        media_source_id: Annotated[StrictStr, Field(description="The id of the MediaSource")],
        api_on_playback_progress: Annotated[ApiOnPlaybackProgress, Field(description="OnPlaybackProgress")],
        position_ticks: Annotated[Optional[StrictInt], Field(description="Optional. The current position, in ticks. 1ms = 10000 ticks.")] = None,
        is_paused: Annotated[Optional[StrictBool], Field(description="Indicates if the player is paused.")] = None,
        is_muted: Annotated[Optional[StrictBool], Field(description="Indicates if the player is muted.")] = None,
        audio_stream_index: Optional[StrictInt] = None,
        subtitle_stream_index: Optional[StrictInt] = None,
        volume_level: Annotated[Optional[StrictInt], Field(description="Scale of 0-100")] = None,
        play_method: Optional[PlayMethod] = None,
        live_stream_id: Optional[StrictStr] = None,
        play_session_id: Optional[StrictStr] = None,
        repeat_mode: Optional[RepeatMode] = None,
        subtitle_offset: Optional[StrictInt] = None,
        playback_rate: Optional[Union[StrictFloat, StrictInt]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Reports a user's playback progress

        Requires authentication as user

        :param user_id: User Id (required)
        :type user_id: str
        :param id: Item Id (required)
        :type id: str
        :param media_source_id: The id of the MediaSource (required)
        :type media_source_id: str
        :param api_on_playback_progress: OnPlaybackProgress (required)
        :type api_on_playback_progress: ApiOnPlaybackProgress
        :param position_ticks: Optional. The current position, in ticks. 1ms = 10000 ticks.
        :type position_ticks: int
        :param is_paused: Indicates if the player is paused.
        :type is_paused: bool
        :param is_muted: Indicates if the player is muted.
        :type is_muted: bool
        :param audio_stream_index:
        :type audio_stream_index: int
        :param subtitle_stream_index:
        :type subtitle_stream_index: int
        :param volume_level: Scale of 0-100
        :type volume_level: int
        :param play_method:
        :type play_method: PlayMethod
        :param live_stream_id:
        :type live_stream_id: str
        :param play_session_id:
        :type play_session_id: str
        :param repeat_mode:
        :type repeat_mode: RepeatMode
        :param subtitle_offset:
        :type subtitle_offset: int
        :param playback_rate:
        :type playback_rate: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_userid_playingitems_by_id_progress_serialize(
            user_id=user_id,
            id=id,
            media_source_id=media_source_id,
            api_on_playback_progress=api_on_playback_progress,
            position_ticks=position_ticks,
            is_paused=is_paused,
            is_muted=is_muted,
            audio_stream_index=audio_stream_index,
            subtitle_stream_index=subtitle_stream_index,
            volume_level=volume_level,
            play_method=play_method,
            live_stream_id=live_stream_id,
            play_session_id=play_session_id,
            repeat_mode=repeat_mode,
            subtitle_offset=subtitle_offset,
            playback_rate=playback_rate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_users_by_userid_playingitems_by_id_progress_serialize(
        self,
        user_id,
        id,
        media_source_id,
        api_on_playback_progress,
        position_ticks,
        is_paused,
        is_muted,
        audio_stream_index,
        subtitle_stream_index,
        volume_level,
        play_method,
        live_stream_id,
        play_session_id,
        repeat_mode,
        subtitle_offset,
        playback_rate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if user_id is not None:
            _path_params['UserId'] = user_id
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        if media_source_id is not None:
            
            _query_params.append(('MediaSourceId', media_source_id))
            
        if position_ticks is not None:
            
            _query_params.append(('PositionTicks', position_ticks))
            
        if is_paused is not None:
            
            _query_params.append(('IsPaused', is_paused))
            
        if is_muted is not None:
            
            _query_params.append(('IsMuted', is_muted))
            
        if audio_stream_index is not None:
            
            _query_params.append(('AudioStreamIndex', audio_stream_index))
            
        if subtitle_stream_index is not None:
            
            _query_params.append(('SubtitleStreamIndex', subtitle_stream_index))
            
        if volume_level is not None:
            
            _query_params.append(('VolumeLevel', volume_level))
            
        if play_method is not None:
            
            _query_params.append(('PlayMethod', play_method.value))
            
        if live_stream_id is not None:
            
            _query_params.append(('LiveStreamId', live_stream_id))
            
        if play_session_id is not None:
            
            _query_params.append(('PlaySessionId', play_session_id))
            
        if repeat_mode is not None:
            
            _query_params.append(('RepeatMode', repeat_mode.value))
            
        if subtitle_offset is not None:
            
            _query_params.append(('SubtitleOffset', subtitle_offset))
            
        if playback_rate is not None:
            
            _query_params.append(('PlaybackRate', playback_rate))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if api_on_playback_progress is not None:
            _body_params = api_on_playback_progress



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/xml'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Users/{UserId}/PlayingItems/{Id}/Progress',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


