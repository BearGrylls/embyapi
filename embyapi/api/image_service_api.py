# coding: utf-8

"""
    Emby Server REST API

    Explore the Emby Server API

    The version of the OpenAPI document: 4.8.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr
from typing import List, Optional, Union
from typing_extensions import Annotated
from embyapi.models.image_info import ImageInfo
from embyapi.models.image_type import ImageType

from embyapi.api_client import ApiClient, RequestSerialized
from embyapi.api_response import ApiResponse
from embyapi.rest import RESTResponseType


class ImageServiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_items_by_id_images_by_type(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete_items_by_id_images_by_type

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_items_by_id_images_by_type_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_items_by_id_images_by_type_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete_items_by_id_images_by_type

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_items_by_id_images_by_type_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_items_by_id_images_by_type_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_items_by_id_images_by_type

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_items_by_id_images_by_type_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_items_by_id_images_by_type_serialize(
        self,
        id,
        type,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Items/{Id}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_items_by_id_images_by_type_by_index(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete_items_by_id_images_by_type_by_index

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_items_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_items_by_id_images_by_type_by_index_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete_items_by_id_images_by_type_by_index

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_items_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_items_by_id_images_by_type_by_index_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_items_by_id_images_by_type_by_index

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_items_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_items_by_id_images_by_type_by_index_serialize(
        self,
        id,
        type,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Items/{Id}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_users_by_id_images_by_type(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete_users_by_id_images_by_type

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_users_by_id_images_by_type_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_users_by_id_images_by_type_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete_users_by_id_images_by_type

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_users_by_id_images_by_type_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_users_by_id_images_by_type_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_users_by_id_images_by_type

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_users_by_id_images_by_type_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_users_by_id_images_by_type_serialize(
        self,
        id,
        type,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Users/{Id}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_users_by_id_images_by_type_by_index(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """delete_users_by_id_images_by_type_by_index

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_users_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_users_by_id_images_by_type_by_index_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """delete_users_by_id_images_by_type_by_index

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_users_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_users_by_id_images_by_type_by_index_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_users_by_id_images_by_type_by_index

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_users_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_users_by_id_images_by_type_by_index_serialize(
        self,
        id,
        type,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/Users/{Id}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_artists_by_name_images_by_type(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_artists_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_artists_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_artists_by_name_images_by_type_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_artists_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_artists_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_artists_by_name_images_by_type_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_artists_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_artists_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_artists_by_name_images_by_type_serialize(
        self,
        name,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Artists/{Name}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_artists_by_name_images_by_type_by_index(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_artists_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_artists_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_artists_by_name_images_by_type_by_index_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_artists_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_artists_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_artists_by_name_images_by_type_by_index_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_artists_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_artists_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_artists_by_name_images_by_type_by_index_serialize(
        self,
        name,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Artists/{Name}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_gamegenres_by_name_images_by_type(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_gamegenres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gamegenres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_gamegenres_by_name_images_by_type_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_gamegenres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gamegenres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_gamegenres_by_name_images_by_type_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_gamegenres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gamegenres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_gamegenres_by_name_images_by_type_serialize(
        self,
        name,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/GameGenres/{Name}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_gamegenres_by_name_images_by_type_by_index(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_gamegenres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gamegenres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_gamegenres_by_name_images_by_type_by_index_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_gamegenres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gamegenres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_gamegenres_by_name_images_by_type_by_index_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_gamegenres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gamegenres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_gamegenres_by_name_images_by_type_by_index_serialize(
        self,
        name,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/GameGenres/{Name}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_genres_by_name_images_by_type(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_genres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_genres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_genres_by_name_images_by_type_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_genres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_genres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_genres_by_name_images_by_type_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_genres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_genres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_genres_by_name_images_by_type_serialize(
        self,
        name,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Genres/{Name}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_genres_by_name_images_by_type_by_index(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_genres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_genres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_genres_by_name_images_by_type_by_index_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_genres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_genres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_genres_by_name_images_by_type_by_index_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_genres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_genres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_genres_by_name_images_by_type_by_index_serialize(
        self,
        name,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Genres/{Name}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_items_by_id_images(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[ImageInfo]:
        """Gets information about an item's images

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_images_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ImageInfo]",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_items_by_id_images_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[ImageInfo]]:
        """Gets information about an item's images

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_images_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ImageInfo]",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_items_by_id_images_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Gets information about an item's images

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_images_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ImageInfo]",
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_items_by_id_images_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json', 
                'application/xml'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Items/{Id}/Images',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_items_by_id_images_by_type(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_items_by_id_images_by_type

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_images_by_type_serialize(
            id=id,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_items_by_id_images_by_type_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_items_by_id_images_by_type

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_images_by_type_serialize(
            id=id,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_items_by_id_images_by_type_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_items_by_id_images_by_type

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_images_by_type_serialize(
            id=id,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_items_by_id_images_by_type_serialize(
        self,
        id,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Items/{Id}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_items_by_id_images_by_type_by_index(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_items_by_id_images_by_type_by_index

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_items_by_id_images_by_type_by_index_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_items_by_id_images_by_type_by_index

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_items_by_id_images_by_type_by_index_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_items_by_id_images_by_type_by_index

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_items_by_id_images_by_type_by_index_serialize(
        self,
        id,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Items/{Id}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount(
        self,
        percent_played: Optional[StrictInt],
        un_played_count: Optional[StrictInt],
        id: Annotated[StrictStr, Field(description="Item Id")],
        max_width: Annotated[StrictInt, Field(description="The maximum image width to return.")],
        max_height: Annotated[StrictInt, Field(description="The maximum image height to return.")],
        tag: Annotated[StrictStr, Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")],
        format: Annotated[StrictStr, Field(description="Determines the output foramt of the image - original,gif,jpg,png")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount

        Requires authentication as user

        :param percent_played: (required)
        :type percent_played: int
        :param un_played_count: (required)
        :type un_played_count: int
        :param id: Item Id (required)
        :type id: str
        :param max_width: The maximum image width to return. (required)
        :type max_width: int
        :param max_height: The maximum image height to return. (required)
        :type max_height: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
        :type tag: str
        :param format: Determines the output foramt of the image - original,gif,jpg,png (required)
        :type format: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount_serialize(
            percent_played=percent_played,
            un_played_count=un_played_count,
            id=id,
            max_width=max_width,
            max_height=max_height,
            tag=tag,
            format=format,
            type=type,
            index=index,
            width=width,
            height=height,
            quality=quality,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount_with_http_info(
        self,
        percent_played: Optional[StrictInt],
        un_played_count: Optional[StrictInt],
        id: Annotated[StrictStr, Field(description="Item Id")],
        max_width: Annotated[StrictInt, Field(description="The maximum image width to return.")],
        max_height: Annotated[StrictInt, Field(description="The maximum image height to return.")],
        tag: Annotated[StrictStr, Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")],
        format: Annotated[StrictStr, Field(description="Determines the output foramt of the image - original,gif,jpg,png")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount

        Requires authentication as user

        :param percent_played: (required)
        :type percent_played: int
        :param un_played_count: (required)
        :type un_played_count: int
        :param id: Item Id (required)
        :type id: str
        :param max_width: The maximum image width to return. (required)
        :type max_width: int
        :param max_height: The maximum image height to return. (required)
        :type max_height: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
        :type tag: str
        :param format: Determines the output foramt of the image - original,gif,jpg,png (required)
        :type format: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount_serialize(
            percent_played=percent_played,
            un_played_count=un_played_count,
            id=id,
            max_width=max_width,
            max_height=max_height,
            tag=tag,
            format=format,
            type=type,
            index=index,
            width=width,
            height=height,
            quality=quality,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount_without_preload_content(
        self,
        percent_played: Optional[StrictInt],
        un_played_count: Optional[StrictInt],
        id: Annotated[StrictStr, Field(description="Item Id")],
        max_width: Annotated[StrictInt, Field(description="The maximum image width to return.")],
        max_height: Annotated[StrictInt, Field(description="The maximum image height to return.")],
        tag: Annotated[StrictStr, Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")],
        format: Annotated[StrictStr, Field(description="Determines the output foramt of the image - original,gif,jpg,png")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount

        Requires authentication as user

        :param percent_played: (required)
        :type percent_played: int
        :param un_played_count: (required)
        :type un_played_count: int
        :param id: Item Id (required)
        :type id: str
        :param max_width: The maximum image width to return. (required)
        :type max_width: int
        :param max_height: The maximum image height to return. (required)
        :type max_height: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
        :type tag: str
        :param format: Determines the output foramt of the image - original,gif,jpg,png (required)
        :type format: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount_serialize(
            percent_played=percent_played,
            un_played_count=un_played_count,
            id=id,
            max_width=max_width,
            max_height=max_height,
            tag=tag,
            format=format,
            type=type,
            index=index,
            width=width,
            height=height,
            quality=quality,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount_serialize(
        self,
        percent_played,
        un_played_count,
        id,
        max_width,
        max_height,
        tag,
        format,
        type,
        index,
        width,
        height,
        quality,
        crop_whitespace,
        enable_image_enhancers,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if percent_played is not None:
            _path_params['PercentPlayed'] = percent_played
        if un_played_count is not None:
            _path_params['UnPlayedCount'] = un_played_count
        if id is not None:
            _path_params['Id'] = id
        if max_width is not None:
            _path_params['MaxWidth'] = max_width
        if max_height is not None:
            _path_params['MaxHeight'] = max_height
        if tag is not None:
            _path_params['Tag'] = tag
        if format is not None:
            _path_params['Format'] = format
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnPlayedCount}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_musicgenres_by_name_images_by_type(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_musicgenres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_musicgenres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_musicgenres_by_name_images_by_type_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_musicgenres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_musicgenres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_musicgenres_by_name_images_by_type_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_musicgenres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_musicgenres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_musicgenres_by_name_images_by_type_serialize(
        self,
        name,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/MusicGenres/{Name}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_musicgenres_by_name_images_by_type_by_index(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_musicgenres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_musicgenres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_musicgenres_by_name_images_by_type_by_index_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_musicgenres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_musicgenres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_musicgenres_by_name_images_by_type_by_index_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_musicgenres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_musicgenres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_musicgenres_by_name_images_by_type_by_index_serialize(
        self,
        name,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/MusicGenres/{Name}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_persons_by_name_images_by_type(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_persons_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_persons_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_persons_by_name_images_by_type_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_persons_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_persons_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_persons_by_name_images_by_type_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_persons_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_persons_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_persons_by_name_images_by_type_serialize(
        self,
        name,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Persons/{Name}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_persons_by_name_images_by_type_by_index(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_persons_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_persons_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_persons_by_name_images_by_type_by_index_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_persons_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_persons_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_persons_by_name_images_by_type_by_index_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_persons_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_persons_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_persons_by_name_images_by_type_by_index_serialize(
        self,
        name,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Persons/{Name}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_studios_by_name_images_by_type(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_studios_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_studios_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_studios_by_name_images_by_type_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_studios_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_studios_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_studios_by_name_images_by_type_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_studios_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_studios_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_studios_by_name_images_by_type_serialize(
        self,
        name,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Studios/{Name}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_studios_by_name_images_by_type_by_index(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_studios_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_studios_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_studios_by_name_images_by_type_by_index_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_studios_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_studios_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_studios_by_name_images_by_type_by_index_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_studios_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_studios_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_studios_by_name_images_by_type_by_index_serialize(
        self,
        name,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Studios/{Name}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_users_by_id_images_by_type(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_users_by_id_images_by_type

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_users_by_id_images_by_type_serialize(
            id=id,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_users_by_id_images_by_type_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_users_by_id_images_by_type

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_users_by_id_images_by_type_serialize(
            id=id,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_users_by_id_images_by_type_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_users_by_id_images_by_type

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_users_by_id_images_by_type_serialize(
            id=id,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_users_by_id_images_by_type_serialize(
        self,
        id,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Users/{Id}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_users_by_id_images_by_type_by_index(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """get_users_by_id_images_by_type_by_index

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_users_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_users_by_id_images_by_type_by_index_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """get_users_by_id_images_by_type_by_index

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_users_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_users_by_id_images_by_type_by_index_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_users_by_id_images_by_type_by_index

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_users_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_users_by_id_images_by_type_by_index_serialize(
        self,
        id,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/Users/{Id}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_artists_by_name_images_by_type(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_artists_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_artists_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_artists_by_name_images_by_type_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_artists_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_artists_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_artists_by_name_images_by_type_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_artists_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_artists_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_artists_by_name_images_by_type_serialize(
        self,
        name,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/Artists/{Name}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_artists_by_name_images_by_type_by_index(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_artists_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_artists_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_artists_by_name_images_by_type_by_index_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_artists_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_artists_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_artists_by_name_images_by_type_by_index_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_artists_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_artists_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_artists_by_name_images_by_type_by_index_serialize(
        self,
        name,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/Artists/{Name}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_gamegenres_by_name_images_by_type(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_gamegenres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_gamegenres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_gamegenres_by_name_images_by_type_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_gamegenres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_gamegenres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_gamegenres_by_name_images_by_type_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_gamegenres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_gamegenres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_gamegenres_by_name_images_by_type_serialize(
        self,
        name,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/GameGenres/{Name}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_gamegenres_by_name_images_by_type_by_index(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_gamegenres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_gamegenres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_gamegenres_by_name_images_by_type_by_index_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_gamegenres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_gamegenres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_gamegenres_by_name_images_by_type_by_index_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_gamegenres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_gamegenres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_gamegenres_by_name_images_by_type_by_index_serialize(
        self,
        name,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/GameGenres/{Name}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_genres_by_name_images_by_type(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_genres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_genres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_genres_by_name_images_by_type_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_genres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_genres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_genres_by_name_images_by_type_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_genres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_genres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_genres_by_name_images_by_type_serialize(
        self,
        name,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/Genres/{Name}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_genres_by_name_images_by_type_by_index(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_genres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_genres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_genres_by_name_images_by_type_by_index_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_genres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_genres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_genres_by_name_images_by_type_by_index_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_genres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_genres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_genres_by_name_images_by_type_by_index_serialize(
        self,
        name,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/Genres/{Name}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_items_by_id_images_by_type(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_items_by_id_images_by_type

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_items_by_id_images_by_type_serialize(
            id=id,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_items_by_id_images_by_type_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_items_by_id_images_by_type

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_items_by_id_images_by_type_serialize(
            id=id,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_items_by_id_images_by_type_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_items_by_id_images_by_type

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_items_by_id_images_by_type_serialize(
            id=id,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_items_by_id_images_by_type_serialize(
        self,
        id,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/Items/{Id}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_items_by_id_images_by_type_by_index(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_items_by_id_images_by_type_by_index

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_items_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_items_by_id_images_by_type_by_index_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_items_by_id_images_by_type_by_index

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_items_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_items_by_id_images_by_type_by_index_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_items_by_id_images_by_type_by_index

        Requires authentication as user

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_items_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_items_by_id_images_by_type_by_index_serialize(
        self,
        id,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/Items/{Id}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount(
        self,
        percent_played: Optional[StrictInt],
        un_played_count: Optional[StrictInt],
        id: Annotated[StrictStr, Field(description="Item Id")],
        max_width: Annotated[StrictInt, Field(description="The maximum image width to return.")],
        max_height: Annotated[StrictInt, Field(description="The maximum image height to return.")],
        tag: Annotated[StrictStr, Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")],
        format: Annotated[StrictStr, Field(description="Determines the output foramt of the image - original,gif,jpg,png")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount

        Requires authentication as user

        :param percent_played: (required)
        :type percent_played: int
        :param un_played_count: (required)
        :type un_played_count: int
        :param id: Item Id (required)
        :type id: str
        :param max_width: The maximum image width to return. (required)
        :type max_width: int
        :param max_height: The maximum image height to return. (required)
        :type max_height: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
        :type tag: str
        :param format: Determines the output foramt of the image - original,gif,jpg,png (required)
        :type format: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount_serialize(
            percent_played=percent_played,
            un_played_count=un_played_count,
            id=id,
            max_width=max_width,
            max_height=max_height,
            tag=tag,
            format=format,
            type=type,
            index=index,
            width=width,
            height=height,
            quality=quality,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount_with_http_info(
        self,
        percent_played: Optional[StrictInt],
        un_played_count: Optional[StrictInt],
        id: Annotated[StrictStr, Field(description="Item Id")],
        max_width: Annotated[StrictInt, Field(description="The maximum image width to return.")],
        max_height: Annotated[StrictInt, Field(description="The maximum image height to return.")],
        tag: Annotated[StrictStr, Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")],
        format: Annotated[StrictStr, Field(description="Determines the output foramt of the image - original,gif,jpg,png")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount

        Requires authentication as user

        :param percent_played: (required)
        :type percent_played: int
        :param un_played_count: (required)
        :type un_played_count: int
        :param id: Item Id (required)
        :type id: str
        :param max_width: The maximum image width to return. (required)
        :type max_width: int
        :param max_height: The maximum image height to return. (required)
        :type max_height: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
        :type tag: str
        :param format: Determines the output foramt of the image - original,gif,jpg,png (required)
        :type format: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount_serialize(
            percent_played=percent_played,
            un_played_count=un_played_count,
            id=id,
            max_width=max_width,
            max_height=max_height,
            tag=tag,
            format=format,
            type=type,
            index=index,
            width=width,
            height=height,
            quality=quality,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount_without_preload_content(
        self,
        percent_played: Optional[StrictInt],
        un_played_count: Optional[StrictInt],
        id: Annotated[StrictStr, Field(description="Item Id")],
        max_width: Annotated[StrictInt, Field(description="The maximum image width to return.")],
        max_height: Annotated[StrictInt, Field(description="The maximum image height to return.")],
        tag: Annotated[StrictStr, Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")],
        format: Annotated[StrictStr, Field(description="Determines the output foramt of the image - original,gif,jpg,png")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount

        Requires authentication as user

        :param percent_played: (required)
        :type percent_played: int
        :param un_played_count: (required)
        :type un_played_count: int
        :param id: Item Id (required)
        :type id: str
        :param max_width: The maximum image width to return. (required)
        :type max_width: int
        :param max_height: The maximum image height to return. (required)
        :type max_height: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers. (required)
        :type tag: str
        :param format: Determines the output foramt of the image - original,gif,jpg,png (required)
        :type format: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount_serialize(
            percent_played=percent_played,
            un_played_count=un_played_count,
            id=id,
            max_width=max_width,
            max_height=max_height,
            tag=tag,
            format=format,
            type=type,
            index=index,
            width=width,
            height=height,
            quality=quality,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_items_by_id_images_by_type_by_index_by_tag_by_format_by_maxwidth_by_maxheight_by_percentplayed_by_unplayedcount_serialize(
        self,
        percent_played,
        un_played_count,
        id,
        max_width,
        max_height,
        tag,
        format,
        type,
        index,
        width,
        height,
        quality,
        crop_whitespace,
        enable_image_enhancers,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if percent_played is not None:
            _path_params['PercentPlayed'] = percent_played
        if un_played_count is not None:
            _path_params['UnPlayedCount'] = un_played_count
        if id is not None:
            _path_params['Id'] = id
        if max_width is not None:
            _path_params['MaxWidth'] = max_width
        if max_height is not None:
            _path_params['MaxHeight'] = max_height
        if tag is not None:
            _path_params['Tag'] = tag
        if format is not None:
            _path_params['Format'] = format
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnPlayedCount}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_musicgenres_by_name_images_by_type(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_musicgenres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_musicgenres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_musicgenres_by_name_images_by_type_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_musicgenres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_musicgenres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_musicgenres_by_name_images_by_type_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_musicgenres_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_musicgenres_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_musicgenres_by_name_images_by_type_serialize(
        self,
        name,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/MusicGenres/{Name}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_musicgenres_by_name_images_by_type_by_index(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_musicgenres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_musicgenres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_musicgenres_by_name_images_by_type_by_index_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_musicgenres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_musicgenres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_musicgenres_by_name_images_by_type_by_index_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_musicgenres_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_musicgenres_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_musicgenres_by_name_images_by_type_by_index_serialize(
        self,
        name,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/MusicGenres/{Name}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_persons_by_name_images_by_type(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_persons_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_persons_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_persons_by_name_images_by_type_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_persons_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_persons_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_persons_by_name_images_by_type_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_persons_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_persons_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_persons_by_name_images_by_type_serialize(
        self,
        name,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/Persons/{Name}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_persons_by_name_images_by_type_by_index(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_persons_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_persons_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_persons_by_name_images_by_type_by_index_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_persons_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_persons_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_persons_by_name_images_by_type_by_index_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_persons_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_persons_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_persons_by_name_images_by_type_by_index_serialize(
        self,
        name,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/Persons/{Name}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_studios_by_name_images_by_type(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_studios_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_studios_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_studios_by_name_images_by_type_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_studios_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_studios_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_studios_by_name_images_by_type_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_studios_by_name_images_by_type

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_studios_by_name_images_by_type_serialize(
            name=name,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_studios_by_name_images_by_type_serialize(
        self,
        name,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/Studios/{Name}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_studios_by_name_images_by_type_by_index(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_studios_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_studios_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_studios_by_name_images_by_type_by_index_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_studios_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_studios_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_studios_by_name_images_by_type_by_index_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Item name")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_studios_by_name_images_by_type_by_index

        Requires authentication as user

        :param name: Item name (required)
        :type name: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_studios_by_name_images_by_type_by_index_serialize(
            name=name,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_studios_by_name_images_by_type_by_index_serialize(
        self,
        name,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['Name'] = name
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/Studios/{Name}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_users_by_id_images_by_type(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_users_by_id_images_by_type

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_users_by_id_images_by_type_serialize(
            id=id,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_users_by_id_images_by_type_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_users_by_id_images_by_type

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_users_by_id_images_by_type_serialize(
            id=id,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_users_by_id_images_by_type_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_users_by_id_images_by_type

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_users_by_id_images_by_type_serialize(
            id=id,
            type=type,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_users_by_id_images_by_type_serialize(
        self,
        id,
        type,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/Users/{Id}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def head_users_by_id_images_by_type_by_index(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """head_users_by_id_images_by_type_by_index

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_users_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def head_users_by_id_images_by_type_by_index_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """head_users_by_id_images_by_type_by_index

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_users_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def head_users_by_id_images_by_type_by_index_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        max_width: Annotated[Optional[StrictInt], Field(description="The maximum image width to return.")] = None,
        max_height: Annotated[Optional[StrictInt], Field(description="The maximum image height to return.")] = None,
        width: Annotated[Optional[StrictInt], Field(description="The fixed image width to return.")] = None,
        height: Annotated[Optional[StrictInt], Field(description="The fixed image height to return.")] = None,
        quality: Annotated[Optional[StrictInt], Field(description="Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.")] = None,
        tag: Annotated[Optional[StrictStr], Field(description="Optional. Supply the cache tag from the item object to receive strong caching headers.")] = None,
        crop_whitespace: Annotated[Optional[StrictBool], Field(description="Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.")] = None,
        enable_image_enhancers: Annotated[Optional[StrictBool], Field(description="Enable or disable image enhancers such as cover art.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Determines the output foramt of the image - original,gif,jpg,png")] = None,
        background_color: Annotated[Optional[StrictStr], Field(description="Optional. Apply a background color for transparent images.")] = None,
        foreground_layer: Annotated[Optional[StrictStr], Field(description="Optional. Apply a foreground layer on top of the image.")] = None,
        auto_orient: Annotated[Optional[StrictBool], Field(description="Set to true to force normalization of orientation in the event the renderer does not support it.")] = None,
        keep_animation: Annotated[Optional[StrictBool], Field(description="Set to true to retain image animation (when supported).")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """head_users_by_id_images_by_type_by_index

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param max_width: The maximum image width to return.
        :type max_width: int
        :param max_height: The maximum image height to return.
        :type max_height: int
        :param width: The fixed image width to return.
        :type width: int
        :param height: The fixed image height to return.
        :type height: int
        :param quality: Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases.
        :type quality: int
        :param tag: Optional. Supply the cache tag from the item object to receive strong caching headers.
        :type tag: str
        :param crop_whitespace: Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art.
        :type crop_whitespace: bool
        :param enable_image_enhancers: Enable or disable image enhancers such as cover art.
        :type enable_image_enhancers: bool
        :param format: Determines the output foramt of the image - original,gif,jpg,png
        :type format: str
        :param background_color: Optional. Apply a background color for transparent images.
        :type background_color: str
        :param foreground_layer: Optional. Apply a foreground layer on top of the image.
        :type foreground_layer: str
        :param auto_orient: Set to true to force normalization of orientation in the event the renderer does not support it.
        :type auto_orient: bool
        :param keep_animation: Set to true to retain image animation (when supported).
        :type keep_animation: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._head_users_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            max_width=max_width,
            max_height=max_height,
            width=width,
            height=height,
            quality=quality,
            tag=tag,
            crop_whitespace=crop_whitespace,
            enable_image_enhancers=enable_image_enhancers,
            format=format,
            background_color=background_color,
            foreground_layer=foreground_layer,
            auto_orient=auto_orient,
            keep_animation=keep_animation,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _head_users_by_id_images_by_type_by_index_serialize(
        self,
        id,
        type,
        index,
        max_width,
        max_height,
        width,
        height,
        quality,
        tag,
        crop_whitespace,
        enable_image_enhancers,
        format,
        background_color,
        foreground_layer,
        auto_orient,
        keep_animation,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if max_width is not None:
            
            _query_params.append(('MaxWidth', max_width))
            
        if max_height is not None:
            
            _query_params.append(('MaxHeight', max_height))
            
        if width is not None:
            
            _query_params.append(('Width', width))
            
        if height is not None:
            
            _query_params.append(('Height', height))
            
        if quality is not None:
            
            _query_params.append(('Quality', quality))
            
        if tag is not None:
            
            _query_params.append(('Tag', tag))
            
        if crop_whitespace is not None:
            
            _query_params.append(('CropWhitespace', crop_whitespace))
            
        if enable_image_enhancers is not None:
            
            _query_params.append(('EnableImageEnhancers', enable_image_enhancers))
            
        if format is not None:
            
            _query_params.append(('Format', format))
            
        if background_color is not None:
            
            _query_params.append(('BackgroundColor', background_color))
            
        if foreground_layer is not None:
            
            _query_params.append(('ForegroundLayer', foreground_layer))
            
        if auto_orient is not None:
            
            _query_params.append(('AutoOrient', auto_orient))
            
        if keep_animation is not None:
            
            _query_params.append(('KeepAnimation', keep_animation))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='HEAD',
            resource_path='/Users/{Id}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_items_by_id_images_by_type(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        body: Annotated[Union[StrictBytes, StrictStr], Field(description="Binary stream")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Uploads an image for an item, must be base64 encoded.

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param body: Binary stream (required)
        :type body: bytearray
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_serialize(
            id=id,
            type=type,
            body=body,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_items_by_id_images_by_type_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        body: Annotated[Union[StrictBytes, StrictStr], Field(description="Binary stream")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Uploads an image for an item, must be base64 encoded.

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param body: Binary stream (required)
        :type body: bytearray
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_serialize(
            id=id,
            type=type,
            body=body,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_items_by_id_images_by_type_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        body: Annotated[Union[StrictBytes, StrictStr], Field(description="Binary stream")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Uploads an image for an item, must be base64 encoded.

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param body: Binary stream (required)
        :type body: bytearray
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_serialize(
            id=id,
            type=type,
            body=body,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_items_by_id_images_by_type_serialize(
        self,
        id,
        type,
        body,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            # convert to byte array if the input is a file name (str)
            if isinstance(body, str):
                with open(body, "rb") as _fp:
                    _body_params = _fp.read()
            else:
                _body_params = body



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/octet-stream'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Items/{Id}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_items_by_id_images_by_type_by_index(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        body: Annotated[Union[StrictBytes, StrictStr], Field(description="Binary stream")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Uploads an image for an item, must be base64 encoded.

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param body: Binary stream (required)
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_items_by_id_images_by_type_by_index_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        body: Annotated[Union[StrictBytes, StrictStr], Field(description="Binary stream")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Uploads an image for an item, must be base64 encoded.

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param body: Binary stream (required)
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_items_by_id_images_by_type_by_index_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        body: Annotated[Union[StrictBytes, StrictStr], Field(description="Binary stream")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Uploads an image for an item, must be base64 encoded.

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param body: Binary stream (required)
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_items_by_id_images_by_type_by_index_serialize(
        self,
        id,
        type,
        index,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            # convert to byte array if the input is a file name (str)
            if isinstance(body, str):
                with open(body, "rb") as _fp:
                    _body_params = _fp.read()
            else:
                _body_params = body



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/octet-stream'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Items/{Id}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_items_by_id_images_by_type_by_index_delete(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """post_items_by_id_images_by_type_by_index_delete

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_by_index_delete_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_items_by_id_images_by_type_by_index_delete_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """post_items_by_id_images_by_type_by_index_delete

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_by_index_delete_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_items_by_id_images_by_type_by_index_delete_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_items_by_id_images_by_type_by_index_delete

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_by_index_delete_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_items_by_id_images_by_type_by_index_delete_serialize(
        self,
        id,
        type,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Items/{Id}/Images/{Type}/{Index}/Delete',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_items_by_id_images_by_type_by_index_index(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        new_index: Annotated[StrictInt, Field(description="The new image index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Updates the index for an item image

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param new_index: The new image index (required)
        :type new_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_by_index_index_serialize(
            id=id,
            type=type,
            index=index,
            new_index=new_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_items_by_id_images_by_type_by_index_index_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        new_index: Annotated[StrictInt, Field(description="The new image index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Updates the index for an item image

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param new_index: The new image index (required)
        :type new_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_by_index_index_serialize(
            id=id,
            type=type,
            index=index,
            new_index=new_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_items_by_id_images_by_type_by_index_index_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        new_index: Annotated[StrictInt, Field(description="The new image index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Updates the index for an item image

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param new_index: The new image index (required)
        :type new_index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_by_index_index_serialize(
            id=id,
            type=type,
            index=index,
            new_index=new_index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_items_by_id_images_by_type_by_index_index_serialize(
        self,
        id,
        type,
        index,
        new_index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if new_index is not None:
            
            _query_params.append(('NewIndex', new_index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Items/{Id}/Images/{Type}/{Index}/Index',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_items_by_id_images_by_type_by_index_url(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        url: Annotated[StrictStr, Field(description="The url for the new image")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Updates the index for an item image

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param url: The url for the new image (required)
        :type url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_by_index_url_serialize(
            id=id,
            type=type,
            index=index,
            url=url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_items_by_id_images_by_type_by_index_url_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        url: Annotated[StrictStr, Field(description="The url for the new image")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Updates the index for an item image

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param url: The url for the new image (required)
        :type url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_by_index_url_serialize(
            id=id,
            type=type,
            index=index,
            url=url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_items_by_id_images_by_type_by_index_url_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        url: Annotated[StrictStr, Field(description="The url for the new image")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Updates the index for an item image

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param url: The url for the new image (required)
        :type url: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_by_index_url_serialize(
            id=id,
            type=type,
            index=index,
            url=url,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_items_by_id_images_by_type_by_index_url_serialize(
        self,
        id,
        type,
        index,
        url,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        if url is not None:
            
            _query_params.append(('Url', url))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Items/{Id}/Images/{Type}/{Index}/Url',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_items_by_id_images_by_type_delete(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """post_items_by_id_images_by_type_delete

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_delete_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_items_by_id_images_by_type_delete_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """post_items_by_id_images_by_type_delete

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_delete_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_items_by_id_images_by_type_delete_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Item Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_items_by_id_images_by_type_delete

        Requires authentication as administrator

        :param id: Item Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_items_by_id_images_by_type_delete_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_items_by_id_images_by_type_delete_serialize(
        self,
        id,
        type,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Items/{Id}/Images/{Type}/Delete',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_users_by_id_images_by_type(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        body: Annotated[Union[StrictBytes, StrictStr], Field(description="Binary stream")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Uploads an image for an item, must be base64 encoded.

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param body: Binary stream (required)
        :type body: bytearray
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_id_images_by_type_serialize(
            id=id,
            type=type,
            body=body,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_users_by_id_images_by_type_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        body: Annotated[Union[StrictBytes, StrictStr], Field(description="Binary stream")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Uploads an image for an item, must be base64 encoded.

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param body: Binary stream (required)
        :type body: bytearray
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_id_images_by_type_serialize(
            id=id,
            type=type,
            body=body,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_users_by_id_images_by_type_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        body: Annotated[Union[StrictBytes, StrictStr], Field(description="Binary stream")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Uploads an image for an item, must be base64 encoded.

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param body: Binary stream (required)
        :type body: bytearray
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_id_images_by_type_serialize(
            id=id,
            type=type,
            body=body,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_users_by_id_images_by_type_serialize(
        self,
        id,
        type,
        body,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            # convert to byte array if the input is a file name (str)
            if isinstance(body, str):
                with open(body, "rb") as _fp:
                    _body_params = _fp.read()
            else:
                _body_params = body



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/octet-stream'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Users/{Id}/Images/{Type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_users_by_id_images_by_type_by_index(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        body: Annotated[Union[StrictBytes, StrictStr], Field(description="Binary stream")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Uploads an image for an item, must be base64 encoded.

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param body: Binary stream (required)
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_users_by_id_images_by_type_by_index_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        body: Annotated[Union[StrictBytes, StrictStr], Field(description="Binary stream")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Uploads an image for an item, must be base64 encoded.

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param body: Binary stream (required)
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_users_by_id_images_by_type_by_index_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        body: Annotated[Union[StrictBytes, StrictStr], Field(description="Binary stream")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Uploads an image for an item, must be base64 encoded.

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param body: Binary stream (required)
        :type body: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_id_images_by_type_by_index_serialize(
            id=id,
            type=type,
            index=index,
            body=body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_users_by_id_images_by_type_by_index_serialize(
        self,
        id,
        type,
        index,
        body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if body is not None:
            # convert to byte array if the input is a file name (str)
            if isinstance(body, str):
                with open(body, "rb") as _fp:
                    _body_params = _fp.read()
            else:
                _body_params = body



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/octet-stream'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Users/{Id}/Images/{Type}/{Index}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_users_by_id_images_by_type_by_index_delete(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """post_users_by_id_images_by_type_by_index_delete

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_id_images_by_type_by_index_delete_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_users_by_id_images_by_type_by_index_delete_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """post_users_by_id_images_by_type_by_index_delete

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_id_images_by_type_by_index_delete_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_users_by_id_images_by_type_by_index_delete_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[StrictInt, Field(description="Image Index")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_users_by_id_images_by_type_by_index_delete

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index (required)
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_id_images_by_type_by_index_delete_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_users_by_id_images_by_type_by_index_delete_serialize(
        self,
        id,
        type,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        if index is not None:
            _path_params['Index'] = index
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Users/{Id}/Images/{Type}/{Index}/Delete',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_users_by_id_images_by_type_delete(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """post_users_by_id_images_by_type_delete

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_id_images_by_type_delete_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_users_by_id_images_by_type_delete_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """post_users_by_id_images_by_type_delete

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_id_images_by_type_delete_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_users_by_id_images_by_type_delete_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="User Id")],
        type: Annotated[ImageType, Field(description="Image Type")],
        index: Annotated[Optional[StrictInt], Field(description="Image Index")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_users_by_id_images_by_type_delete

        Requires authentication as user

        :param id: User Id (required)
        :type id: str
        :param type: Image Type (required)
        :type type: ImageType
        :param index: Image Index
        :type index: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_users_by_id_images_by_type_delete_serialize(
            id=id,
            type=type,
            index=index,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '403': None,
            '404': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_users_by_id_images_by_type_delete_serialize(
        self,
        id,
        type,
        index,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['Id'] = id
        if type is not None:
            _path_params['Type'] = type.value
        # process the query parameters
        if index is not None:
            
            _query_params.append(('Index', index))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikeyauth', 
            'embyauth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/Users/{Id}/Images/{Type}/Delete',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


